~0
0.   Walk through all sections.

   This selection will lead you through every level of the MakePost utility
   and is usually used when creating a new PostWorks post-processor from
   scratch.

1.   Miscellaneous Setup.

   This section is used to load a Machine Descriptor File (.MDF), set the cur-
   rent machine number and to setup the default units.

2.   Define machine configuration.

   This section contains all of the physical machine settings.  Type of machine,
   linear axes configuration, rotary axes configuration, axes movement limits,
   etc. will be defined.

3.   Define Control Tape format.

   This section contains the Control Tape characteristics, including register
   descriptions, G-code and M-code groups, User defined tape blocks and the
   punch file format.

4.   Print file description.

   This section defines the Print Descriptor File (.pdf) that the current
   post configuration will use.

5.   Motion block parameters.

   This section describes the handling of motion block output.  The handling
   of the FROM statement, absolute/incremental programming modes, rotary motion
   output and axes tolerances are some of the settings included in this section.

6.   Circular/Spline interpolation.

   This section defines all aspects of circular, helical, and spline inter-
   polation.

7.   Motion Adjustments.

   This section includes various forms of machine motion adjustments, including
   mutually exclusive axes, rotary axes linearization and slowdown blocks.

8.   Milling Cycles.

   This section defines support for both post generated milling cycles and
   canned cycles that will be performed by the machine control.

9.   Lathe Cycles.

   This section defines support for both post generated lathe cycles and
   canned cycles that will be performed by the machine control.

10.   Sequence numbers/Alignment blocks.

   This section defines the output format for sequence numbers and alignment
   blocks.

11.   Spindle & Coolant.

   This section defines how the SPINDL and COOLNT commands are handled and what
   codes each command will output.

12.   Feedrate & Rapid.

   This section describes which feedrate modes are supported by the machine
   control and how feedrates and rapid motion are output.  FPM, FPR, DPM and
   1/T feedrates are defined, as well as rapid motion adjustments.

13.   Tool Change Sequence.

   This section defines how tool change sequences are handled.  It includes
   support for tool selection, loading and unloading of the tool and tool length
   offsets.  Tailoring of the commands SELCTL, LOADTL, TURRET, TOOLNO, etc. is
   also included in this section.

14.   Cutter/Fixture Compensation.

   This section defines cutter and fixture compensation support.  It includes
   cutcom vector support, compensation enable/disable codes, and other aspects
   of machine controlled compensation.

15.   Miscellaneous Post commands.

   This section handles post-processor commands that are not included in any
   other section, including the INSERT, Messages, OPSKIP, OPSTOP, STOP, DELAY,
   GOHOME and POSTN commands.

16.   Ultrasonic Blade Configuration.

   This section defines the configuration of an Ultrasonic Blade machine,
   mainly dealing with the attributes of the blade axis; registers, direction
   vector, retract logic, etc.  This section is only valid when configuring
   an Ultrasonic Blade Cutter type machine.

17.   Stringer Drilling Machine.

   This machine defines the configuration of Stringer Drilling Machine.  The
   default active head, the axes registers, special codes, current and home
   positions, and machine limits.

18.   Exit

   This selection will exit the MakePost Post Generator.
~1.1
1.   Post-processor name:

   Enter the identifying name for the current MDF file.  All settings will be
   saved to 'PWORKS_name.MDF' when exiting the MakePost facility.  If you load
   an MDF file and make changes to it in order to generate another machine
   description, you must enter a new name here, otherwise you will overwrite
   the MDF file you originally loaded.  The post-processor name can be up to
   40 characters long.
~1.2
2.   Machine Description:

   Enter the textual description for this machine configuration.  The machine
   description can be up to 80 characters long.
~1.3
3.   Input units:

   Enter the default clfile input units, either INCH or MM, that the current
   post configuration will expect as input.  This setting has no effect on the
   units used as input to the MakePost facility.  To change these units use the
   UNITS switch on the input command line or in the initialization file.  The
   default input units can be changed with the MACHIN/PWORKS,OPTION,1,n command
   in the part program.
~1.4
4.   Output units:

   Enter the default units, either INCH or MM, that the current post configur-
   ation will output to the Control Tape.  The default output units can be
   changed with the MACHIN/PWORKS,OPTION,2,n command in the part program.
~1.5
5.   Enter Inch selection code:

   Enter the code to output to the Control Tape when Inch output has been
   selected.  Enter the code in the form 'r(v)'.  Example:  G(70). This code
   will be output at the beginning of the tape.  This code may be omitted by
   leaving this entry blank.
~1.6
6.   Enter Millimeter selection code:

   Enter the code to output to the Control Tape when Millimeter output has been
   selected.  Enter the code in the form 'r(v)'.  Example:  G(71). This code
   will be output at the beginning of the tape.  This code may be omitted by
   leaving this entry blank.
~1.7
7.   Punch file extension:

   Enter the default file extension you would like used for punch files
   generated using this Machine Descriptor File.  The extension entered here
   will be the default extension instead of the normal default extension
   '.pu1'.  It can be overridden by using the '-PUNCH:ext' runtime switch in
   either the 'pworks.ini' file or on the command line.  Be sure to include
   the '.' character.
~1.8
8.   Suppress Punch file when error level is encountered:

   Typically PWORKS will output a Punch file regardless of how many warnings,
   errors, or fatals are encountered.  You can change this behavior and
   suppress the output of the Punch file whenever a warning, error, or fatal
   is encountered.  If the Punch file output is suppressed, then a Punch file
   will not be created.  The only exception being if multiple Punch files are
   being output, then Punch files completed prior to encountering an error will
   still be output.

   The following options can be selected.

      'No' will always create the Punch file output when Punch file output has
      been enabled.

      'Warning' will suppress the Punch file output whenever a warning, error,
      or fatal is encountered.

      'Error' will suppress the Punch file output whenever an error or fatal is
      encountered.

      'Fatal' will suppress the Punch file output whenever a fatal is
      encountered.
~2.0
0.   Walk through machine configuration.

   This selection will lead you through all of the aspects of defining the
   machine configuration, including type of machine, linear axes configuration,
   rotary axes configuration, axes movement limits, etc.

1.   Define type of machine.

   This section defines the type of machine for this post.  Valid machine types
   are Mill and Lathe.

2.   Linear axis set-up.

   This section defines the attributes of the primary and secondary linear axes
   (X,Y,Z,U,V,W).  This section will be disabled unless a secondary axis exists
   for at least one of the primary axis.

3.   Rotary axis set-up.

   This section defines the attributes of the rotary axes.  Whether it is a
   rotary table or head, the location of the rotary axis on the machine, if it
   moves on a linear or rotary scale, etc.  This section will be disabled if
   there are no rotary axes.

4.   Axes register description.

   This section defines the registers to use for each of the output linear and
   rotary axes.

5.   Current axes position.

   This section defines the default position at the beginning of the program
   for each of the linear and rotary axes.

6.   Home position & Clearance plane.

   This section defines the machine Home position, for use by the GOHOME command
   and the default clearance plane, for use by the RETRCT command.

7.   Machine limits.

   This section defines the axes travel limits of the machine for all of the
   supported axes.

8.   Machine interference zones.

   This section defines spindle and fixture collision zones on the machine.  Up
   to 4 collision zones can be defined.  The number of collision zones is de-
   fined in the Type of machine section.

9.   Exit

   Exits the Machine configuration section and returns you to the previous
   section.
~2.1.1
1.   Type of machine:

   Enter the number that corresponds to the type of machine that you wish to
   support.

           1 = Mill
           2 = Lathe
           3 = Ultrasonic Cutter
           4 = Mill/Turn
           5 = Stringer Drilling Machine
~2.1.2
2.  Does milling mode support polar interpolation:

   Some Mill/Turn machines support a mode where the rotary axis (spindle) takes
   over as the Y-axis while cutting the face of the part.  The rotary axis is
   usually output using rectangular coordinates, with the control calculating
   the actual rotary angle.  Enter "YES" if your machine supports this feature.
~2.1.3
3.  Does milling mode support cylindrical interpolation:

   Cylindrical interpolation is supported for Mill/Turn machines only, and
   allows a round part to be programmed in a flat plan.  PostWorks will wrap the
   flat part onto a cylinder and output the correct linear and rotary positions
   to cut the part.  One of the advantages of cylindrical interpolation is that
   the control supports circular interpolation on the round part during this
   mode.
~2.1.4
4.   Is Cylindrical Interp supported in user defined plane:

   Enter YES if the machine supports cylindrical interpolation in planes other
   than the standard lathe plane (rotatation about the Z-axis).  Most machines
   turn the part around the Z-axis and do not support cylindrical interpolation
   in any other plane.
~2.1.5
5.   Is Cylindrical Interp supported in only a single plane:

   Most Mill/Turn machines have only one rotary table axis, which allows for
   cylindrical interpolation in only a single plane.  Enter YES at this prompt
   if this describes your machine.  If the machine has multiple rotary tables
   (spindles), which rotate in different planes, then enter NO.
~2.1.6
6.   Enter number of linear X-axes:

   Enter the number of linear axes this machine has that move along the X-axis.
   Up to 2 linear X-axes can be supported.
~2.1.7
7.   Enter number of linear Y-axes:

   Enter the number of linear axes this machine has that move along the Y-axis.
   Up to 2 linear Y-axes can be supported.
~2.1.8
8.   Enter number of linear Z-axes:

   Enter the number of linear axes this machine has that move along the Z-axis.
   Up to 2 linear Z-axes can be supported.
~2.1.9
9.  Are rotary axes output as tool axis vector:

   Enter YES if the tool axis vector should be output directly to the control
   tape instead of the rotary axes positions.  In this case, it is assumed that
   the machine controller is intelligent and will handle the conversion of the
   tool axis vector to the actual rotary axis positions.  The typical answer is
   NO, which allows PostWorks to calculate and output all rotary axes.  In this
   case the user must specify the position, orientation, and all other param-
   eters controlling the configuration and output of the rotary axes.
~2.1.10
10.   Enter number of rotary axes:

   Enter the number of rotary axes that this machine has.  You can enter from
   0 to 4 rotary axes, though a maximum of two rotary axes may be active at any
   one time.  The remainder rotary axes must be locked, though they may be
   locked in any position.
~2.1.11
11.  Enter number of interference zones:

   Enter the number of zones that will cause the spindle and machine to collide.
   The axes position will be checked for entry to one of these zones and PWORKS
   will output a warning message anytime an interference zone is breached.  You
   can define up to 4 interference zones.  The actual interference zones are
   defined in the "Machine interference zones" section.
~2.1.12
12.  Enter default spindle tool axis:

   Enter a vector that represents the primary (spindle) tool axis when all
   rotary axes are at 0 degrees.  The primary tool axis will be used inter-
   nally by PWORKS to calculate the rotary angles, perform cycle operations,
   adjust for the programmed tool length, etc.

   A spindle tool axis vector of 0,0,1 is normally used.  Instances where you
   may want to specify a different vector is when attaching a 90 degree head to
   the spindle or when manually rotating the spindle.

   The MODE/TOOL command can be used to change the primary tool axis from within
   the part program.
~2.2.1
1.   Enter calculation type for secondary X-axis:

   Enter the number that corresponds to the calculation required for generating
   the secondary X-axis.  This prompt will only be displayed when 2 linear X-
   axes are supported.

           1. Secondary_X = Input_X - Fixed_distance - Primary_X
           2. Secondary_X = Input_X - Previous_Input_X
           3. Secondary_X = Input_X

   Calculation type 1 is usually used when the primary and secondary axes are
   not connected, for example a quill and saddle.

   Calculation type 2 is usually used when the secondary axes moves with the
   primary axis, for example a boring attachment loaded in the spindle.

   Calculation type 3 is used when the machine control is intelligent enough
   to calculate the primary and secondary axis positions based on an input
   position relative to the part.
~2.2.2
2.   Enter calculation type for secondary Y-axis:

   Enter the number that corresponds to the calculation required for generating
   the secondary Y-axis.  This prompt will only be displayed when 2 linear Y-
   axes are supported.

           1. Secondary_Y = Input_Y - Fixed_distance - Primary_Y
           2. Secondary_Y = Input_Y - Previous_Input_Y
           3. Secondary_Y = Input_Y

   Calculation type 1 is usually used when the primary and secondary axes are
   not connected, for example a quill and saddle.

   Calculation type 2 is usually used when the secondary axes moves with the
   primary axis, for example a boring attachment loaded in the spindle.

   Calculation type 3 is used when the machine control is intelligent enough
   to calculate the primary and secondary axis positions based on an input
   position relative to the part.
~2.2.3
3.   Enter calculation type for secondary Z-axis:

   Enter the number that corresponds to the calculation required for generating
   the secondary Z-axis.  This prompt will only be displayed when 2 linear Z-
   axes are supported.

           1. Secondary_Z = Input_Z - Fixed_distance - Primary_Z
           2. Secondary_Z = Input_Z - Previous_Input_Z
           3. Secondary_Z = Input_Z

   Calculation type 1 is usually used when the primary and secondary axes are
   not connected, for example a quill and saddle.

   Calculation type 2 is usually used when the secondary axes moves with the
   primary axis, for example a boring attachment loaded in the spindle.

   Calculation type 3 is used when the machine control is intelligent enough
   to calculate the primary and secondary axis positions based on an input
   position relative to the part.
~2.2.4
4.    Enter distance between Primary X-axis and Secondary X-axis:

   Enter the distance between the primary and secondary X-axis when both axes
   are at 0.  This distance is used as the 'Fixed_distance' when 2 linear X-axes
   are supported and calculation type 1, from the previous prompt, was selected.
   This prompt will only be displayed when calculation type 1 was chosen for the
   secondary X-axis.
~2.2.5
5.    Enter distance between Primary Y-axis and Secondary Y-axis:

   Enter the distance between the primary and secondary Y-axis when both axes
   are at 0.  This distance is used as the 'Fixed_distance' when 2 linear Y-axes
   are supported and calculation type 1, from the previous prompt, was selected.
   This prompt will only be displayed when calculation type 1 was chosen for the
   secondary Y-axis.
~2.2.6
6.    Enter distance between Primary Z-axis and Secondary Z-axis:

   Enter the distance between the primary and secondary Z-axis when both axes
   are at 0.  This distance is used as the 'Fixed_distance' when 2 linear Z-axes
   are supported and calculation type 1, from the previous prompt, was selected.
   This prompt will only be displayed when calculation type 1 was chosen for the
   secondary Z-axis.
~2.2.7
7.   Default X-axis at start of program:

   Enter which of the X-axis should be active at the start of the program, by
   default, either PRIMARY, SECONDRY, or BOTH.  The active X-axis can be changed
   at any time during the part program by using the MODE/XAXIS,n command.  This
   prompt will only be displayed when 2 linear X-axes are supported.

   BOTH selects both linear X-axes to be output by default and is is usually
   only selected when calculation type 3 was chosen for the secondary X-axis.
~2.2.8
8.   Default Y-axis at start of program:

   Enter which of the Y-axis should be active at the start of the program, by
   default, either PRIMARY, SECONDRY, or BOTH.  The active Y-axis can be changed
   at any time during the part program by using the MODE/YAXIS,n command.  This 
   prompt will only be displayed when 2 linear Y-axes are supported.

   BOTH selects both linear Y-axes to be output by default and is is usually
   only selected when calculation type 3 was chosen for the secondary Y-axis.
~2.2.9
9.   Default Z-axis at start of program:

   Enter which of the Z-axis should be active at the start of the program, by
   default, either PRIMARY, SECONDRY, or BOTH.  The active Z-axis can be changed
   at any time during the part program by using the MODE/ZAXIS,n command.  This 
   prompt will only be displayed when 2 linear Z-axes are supported.

   BOTH selects both linear Z-axes to be output by default and is is usually
   only selected when calculation type 3 was chosen for the secondary Z-axis.
~2.3.1
1.   Rotary axis #1 is a Table/Head:

   Specify whether the 1st rotary axis is a rotary table (TABLE) or if the
   spindle carrier rotates (HEAD).  Rotary axis definitions must be made in the
   following order.

      1. Table riders.
      2. Table carriers.
      3. Head carriers.
      4. Head riders.

   A carrier axis is defined as a rotary axis that has another rotary axis
   mounted on it.  The mounted rotary axis will change position, relative to the
   machine, as the carrier axis rotates.  A rider axis is a rotary axis that is
   mounted on the carrier axis.  The rotation of the rider axis does not affect
   that of the carrier axis.

   Given the above set of rules, if the machine has 2 rotary axes, a table and a
   head, then TABLE should be entered as Rotary axis #1, and HEAD for Rotary
   axis #2.  This prompt will only be displayed when at least 1 rotary axis has
   been specified.
~2.3.2
2.   Rotary axis #2 is a Table/Head:

   Specify whether the 2nd rotary axis is a rotary table (TABLE) or if the
   spindle carrier rotates (HEAD).  Rotary axis definitions must be made in the
   following order.

      1. Table riders.
      2. Table carriers.
      3. Head carriers.
      4. Head riders.

   A carrier axis is defined as a rotary axis that has another rotary axis
   mounted on it.  The mounted rotary axis will change position, relative to the
   machine, as the carrier axis rotates.  A rider axis is a rotary axis that is
   mounted on the carrier axis.  The rotation of the rider axis does not affect
   that of the carrier axis.

   Given the above set of rules, if the machine has 2 rotary axes, a table and
   a head, then TABLE should be entered as Rotary axis #1, and HEAD for Rotary
   axis #2.  This prompt will only be displayed when at least 2 rotary axes have
   been specified.
~2.3.3
3.   Rotary axis #3 is a Table/Head:

   Specify whether the 3rd rotary axis is a rotary table (TABLE) or if the
   spindle carrier rotates (HEAD).  Rotary axis definitions must be made in the
   following order.

      1. Table riders.
      2. Table carriers.
      3. Head carriers.
      4. Head riders.

   A carrier axis is defined as a rotary axis that has another rotary axis
   mounted on it.  The mounted rotary axis will change position, relative to the
   machine, as the carrier axis rotates.  A rider axis is a rotary axis that is
   mounted on the carrier axis.  The rotation of the rider axis does not affect
   that of the carrier axis.

   Given the above set of rules, if the machine has 3 rotary axes, a table and
   2 heads, then TABLE should be entered as Rotary axis #1, and HEAD for Rotary
   axes #2 and #3.  The head entered for rotary axis #2 must be the carrier
   axis, meaning Rotary axis #3 will change position as Rotary axis #2 moves.
   This prompt will only be displayed when at least 3 rotary axes have been
   specified.
~2.3.4
4.   Rotary axis #4 is a Table/Head:

   Specify whether the 4th rotary axis is a rotary table (TABLE) or if the
   spindle carrier rotates (HEAD).  Rotary axis definitions must be made in the
   following order.

      1. Table riders.
      2. Table carriers.
      3. Head carriers.
      4. Head riders.

   A carrier axis is defined as a rotary axis that has another rotary axis
   mounted on it.  The mounted rotary axis will change position, relative to the
   machine, as the carrier axis rotates.  A rider axis is a rotary axis that is
   mounted on the carrier axis.  The rotation of the rider axis does not affect
   that of the carrier axis.

   Given the above set of rules, if the machine has 4 rotary axes, 2 tables and
   2 heads, then TABLE should be entered for Rotary axes #1 and #2, and HEAD for
   Rotary axes #2 and #3.  The manner in which the rotary axes are referenced
   throughout the MakePost facility and PWORKS will be exactly as stated above.
   This prompt will only be displayed when all 4 rotary axes have been speci-
   fied.
~2.3.5
5.   Rotary axis #1 rotates around which axis [X,Y,Z]:

   Enter the primary linear axis, either X,Y or Z that Rotary axis #1 rotates
   about when all rotary axes are at 0 degrees.  Keep in mind the order in which
   rotary axes are defined.  This prompt will only be displayed when at least 1
   rotary axis has been specified.
~2.3.6
6.   Rotary axis #2 rotates around which axis [X,Y,Z]:

   Enter the primary linear axis, either X,Y or Z that Rotary axis #2 rotates
   about when all rotary axes are at 0 degrees.  Keep in mind the order in which
   rotary axes are defined.  This prompt will only be displayed when at least 2
   rotary axes have been specified.
~2.3.7
7.   Rotary axis #3 rotates around which axis [X,Y,Z]:

   Enter the primary linear axis, either X,Y or Z that Rotary axis #3 rotates
   about when all rotary axes are at 0 degrees.  Keep in mind the order in which
   rotary axes are defined.  This prompt will only be displayed when at least 3
   rotary axes have been specified.
~2.3.8
8.   Rotary axis #4 rotates around which axis [X,Y,Z]:

   Enter the primary linear axis, either X,Y or Z that Rotary axis #4 rotates
   about when all rotary axes are at 0 degrees.  Keep in mind the order in which
   rotary axes are defined.  This prompt will only be displayed when all 4
   rotary axes have been specified.
~2.3.9
9.   Does the Z-axis rotate with the rotary head:

   Enter YES if the Z-axis is mounted on the rotary head and its direction
   changes when the head rotates.  This prompt will only be displayed when at
   least one of the rotary axes is defined as a HEAD.
~2.3.10
10.   Are the rotary tables connected:

   Enter YES if the rotary tables are connected in a carrier/rider type con-
   figuration, where one table is mounted on top of the other.  This is most
   typical configuration.

   Enter NO if the rotary tables are mounted on the machine separately.  The
   rotation of either rotary axes will not affect the position of the other.
   This configuration is not common and usually entails having separate parts
   mounted on each rotary table.
~2.3.11
11.   Enter number of physical Rotary axes #1:

   Some multi-head machines require that the rotary axes associated with each
   head be addressed separately, even if the position will always be the same.
   Entering a value greater than one at this prompt will cause the post to
   output multiple registers for this particular rotary axis to control the
   separate rotary axes associated with each head.  The same register will be
   used to output each axis, but with a different number designation in the
   register's label.

   The starting characters for the rotary axis register must contain a '#'
   character in order to take advantage of this feature.  If it does not, then
   only a single register without any modification will be output with this
   rotary axis (the same as when there are no duplicate axes).

        Example:
           Register: C#=
           Output:   C1=90. C2=90.  etc.

   The '#' character will be replaced with the number of the rotary axis that is
   active.  You may have up to nine duplicate axes for each rotary axis.  Enter
   a value of one if your machine does not have duplicate axes for this rotary
   axis.

   By default all duplicate rotary axes are disabled, except for the first one
   (1).  You can use the ROTABL/ON command to enable multiple duplicate axes
   and ROTABL/OFF to disable the axes.
~2.3.12
12.   Enter number of physical Rotary axes #2:

   Some multi-head machines require that the rotary axes associated with each
   head be addressed separately, even if the position will always be the same.
   Entering a value greater than one at this prompt will cause the post to
   output multiple registers for this particular rotary axis to control the
   separate rotary axes associated with each head.  The same register will be
   used to output each axis, but with a different number designation in the
   register's label.

   The starting characters for the rotary axis register must contain a '#'
   character in order to take advantage of this feature.  If it does not, then
   only a single register without any modification will be output with this
   rotary axis (the same as when there are no duplicate axes).

        Example:
           Register: C#=
           Output:   C1=90. C2=90.  etc.

   The '#' character will be replaced with the number of the rotary axis that is
   active.  You may have up to nine duplicate axes for each rotary axis.  Enter
   a value of one if your machine does not have duplicate axes for this rotary
   axis.

   By default all duplicate rotary axes are disabled, except for the first one
   (1).  You can use the ROTABL/ON command to enable multiple duplicate axes
   and ROTABL/OFF to disable the axes.
~2.3.13
13.   Enter number of physical Rotary axes #3:

   Some multi-head machines require that the rotary axes associated with each
   head be addressed separately, even if the position will always be the same.
   Entering a value greater than one at this prompt will cause the post to
   output multiple registers for this particular rotary axis to control the
   separate rotary axes associated with each head.  The same register will be
   used to output each axis, but with a different number designation in the
   register's label.

   The starting characters for the rotary axis register must contain a '#'
   character in order to take advantage of this feature.  If it does not, then
   only a single register without any modification will be output with this
   rotary axis (the same as when there are no duplicate axes).

        Example:
           Register: C#=
           Output:   C1=90. C2=90.  etc.

   The '#' character will be replaced with the number of the rotary axis that is
   active.  You may have up to nine duplicate axes for each rotary axis.  Enter
   a value of one if your machine does not have duplicate axes for this rotary
   axis.

   By default all duplicate rotary axes are disabled, except for the first one
   (1).  You can use the ROTABL/ON command to enable multiple duplicate axes
   and ROTABL/OFF to disable the axes.
~2.3.14
14.   Enter number of physical Rotary axes #4:

   Some multi-head machines require that the rotary axes associated with each
   head be addressed separately, even if the position will always be the same.
   Entering a value greater than one at this prompt will cause the post to
   output multiple registers for this particular rotary axis to control the
   separate rotary axes associated with each head.  The same register will be
   used to output each axis, but with a different number designation in the
   register's label.

   The starting characters for the rotary axis register must contain a '#'
   character in order to take advantage of this feature.  If it does not, then
   only a single register without any modification will be output with this
   rotary axis (the same as when there are no duplicate axes).

        Example:
           Register: C#=
           Output:   C1=90. C2=90.  etc.

   The '#' character will be replaced with the number of the rotary axis that is
   active.  You may have up to nine duplicate axes for each rotary axis.  Enter
   a value of one if your machine does not have duplicate axes for this rotary
   axis.

   By default all duplicate rotary axes are disabled, except for the first one
   (1).  You can use the ROTABL/ON command to enable multiple duplicate axes
   and ROTABL/OFF to disable the axes.
~2.3.15
15.   Rotary axis #1 is a Contouring/Positioning axis:

   Enter CONTOUR if Rotary axis #1 is a contouring axis, meaning that it can
   move in conjunction with the linear axes.  If the rotary axis can only be
   moved by itself or will not maintain a constant velocity in conjunction
   with the other axes at the programmed feed rate, then enter POSITION.  This
   prompt will only be displayed when at least 1 rotary axis has been specified.
~2.3.16
16.   Rotary axis #2 is a Contouring/Positioning axis:

   Enter CONTOUR if Rotary axis #2 is a contouring axis, meaning that it can
   move in conjunction with the linear axes.  If the rotary axis can only be
   moved by itself or will not maintain a constant velocity in conjunction
   with the other axes at the programmed feed rate, then enter POSITION.  This
   prompt will only be displayed when at least 2 rotary axes have been speci-
   fied.
~2.3.17
17.   Rotary axis #3 is a Contouring/Positioning axis:

   Enter CONTOUR if Rotary axis #3 is a contouring axis, meaning that it can
   move in conjunction with the linear axes.  If the rotary axis can only be
   moved by itself or will not maintain a constant velocity in conjunction
   with the other axes at the programmed feed rate, then enter POSITION.  This
   prompt will only be displayed when at least 3 rotary axes have been speci-
   fied.
~2.3.18
18.   Rotary axis #4 is a Contouring/Positioning axis:

   Enter CONTOUR if Rotary axis #4 is a contouring axis, meaning that it can
   move in conjunction with the linear axes.  If the rotary axis can only be
   be moved by itself or will not maintain a constant velocity in conjunction
   with the other axes at the programmed feed rate, then enter POSITION.  This
   prompt will only be displayed when at all 4 rotary axes have been specified.
~2.3.19
19.   Rotary axis #1 is output on a Linear/Rotary scale:

   The rotary axis moves on a linear scale when a value of 720 degrees will move
   the axis 2 revolutions from 0 degrees.  A rotary scale will always be output
   between 0 and 360 degrees, usually with the sign (+-) of the value determin-
   ing the direction.  Enter either LINEAR or ROTARY.
~2.3.20
20.   Rotary axis #2 is output on a Linear/Rotary scale:

   The rotary axis moves on a linear scale when a value of 720 degrees will move
   the axis 2 revolutions from 0 degrees.  A rotary scale will always be output
   between 0 and 360 degrees, usually with the sign (+-) of the value determin-
   ing the direction.  Enter either LINEAR or ROTARY.
~2.3.21
21.   Rotary axis #3 is output on a Linear/Rotary scale:

   The rotary axis moves on a linear scale when a value of 720 degrees will move
   the axis 2 revolutions from 0 degrees.  A rotary scale will always be output
   between 0 and 360 degrees, usually with the sign (+-) of the value determin-
   ing the direction.  Enter either LINEAR or ROTARY.
~2.3.22
22.   Rotary axis #4 is output on a Linear/Rotary scale:

   The rotary axis moves on a linear scale when a value of 720 degrees will move
   the axis 2 revolutions from 0 degrees.  A rotary scale will always be output
   between 0 and 360 degrees, usually with the sign (+-) of the value determin-
   ing the direction.  Enter either LINEAR or ROTARY.
~2.3.23
23.   Initial orientation for Rotary axes #1:

   If this rotary axis rotates about a vector other than one of the major axes
   (X,Y,Z), then you can specify its initial orientation here.  Most
   specifications will define the orientation of this type of axis referencing
   angles from a major axis, therefore this prompt requests that the initial
   orientation be specified as angle rotation(s) around major axes in the
   following format.

      X30,Z45

   The above specification will position the defined axis at 30 degrees about
   the X-axis and 45 degrees about the Z-axis.  The order of the rotation axes
   is important and follows the same rules as when defining the physical rotary
   axes (table riders, table carriers, head riders, head carriers).  You do
   not have to specify two rotations for the initial orientation, if the
   physical axis is only rotated around one major axes, then only this axis has
   to be specified.  For example, for a nutating head the answer could be as
   follows.

      X40
~2.3.24
24.   Initial orientation for Rotary axes #2:

   If this rotary axis rotates about a vector other than one of the major axes
   (X,Y,Z), then you can specify its initial orientation here.  Most
   specifications will define the orientation of this type of axis referencing
   angles from a major axis, therefore this prompt requests that the initial
   orientation be specified as angle rotation(s) around major axes in the
   following format.

      X30,Z45

   The above specification will position the defined axis at 30 degrees about
   the X-axis and 45 degrees about the Z-axis.  The order of the rotation axes
   is important and follows the same rules as when defining the physical rotary
   axes (table riders, table carriers, head riders, head carriers).  You do
   not have to specify two rotations for the initial orientation, if the
   physical axis is only rotated around one major axes, then only this axis has
   to be specified.  For example, for a nutating head the answer could be as
   follows.

      X40
~2.3.25
25.   Initial orientation for Rotary axes #3:

   If this rotary axis rotates about a vector other than one of the major axes
   (X,Y,Z), then you can specify its initial orientation here.  Most
   specifications will define the orientation of this type of axis referencing
   angles from a major axis, therefore this prompt requests that the initial
   orientation be specified as angle rotation(s) around major axes in the
   following format.

      X30,Z45

   The above specification will position the defined axis at 30 degrees about
   the X-axis and 45 degrees about the Z-axis.  The order of the rotation axes
   is important and follows the same rules as when defining the physical rotary
   axes (table riders, table carriers, head riders, head carriers).  You do
   not have to specify two rotations for the initial orientation, if the
   physical axis is only rotated around one major axes, then only this axis has
   to be specified.  For example, for a nutating head the answer could be as
   follows.

      X40
~2.3.26
26.   Initial orientation for Rotary axes #4:

   If this rotary axis rotates about a vector other than one of the major axes
   (X,Y,Z), then you can specify its initial orientation here.  Most
   specifications will define the orientation of this type of axis referencing
   angles from a major axis, therefore this prompt requests that the initial
   orientation be specified as angle rotation(s) around major axes in the
   following format.

      X30,Z45

   The above specification will position the defined axis at 30 degrees about
   the X-axis and 45 degrees about the Z-axis.  The order of the rotation axes
   is important and follows the same rules as when defining the physical rotary
   axes (table riders, table carriers, head riders, head carriers).  You do
   not have to specify two rotations for the initial orientation, if the
   physical axis is only rotated around one major axes, then only this axis has
   to be specified.  For example, for a nutating head the answer could be as
   follows.

      X40
~2.3.27
27.   Does positioning rotary axis have feedrate control:

   Enter YES if the positioning rotary axis can be output with a feed rate to
   control its speed.  If the rotary axis rotation speed cannot be controlled
   and will always move at one speed, then enter NO.  This prompt will only be
   displayed when at least one of the rotary axes supported is defined as a
   positioning only axis.
~2.3.28
28.   Enter circumference of Rotary axis #1:

   Enter the value that will cause one full rotation for Rotary axis #1.  This
   will usually be 360.0 for rotaries that are output using degrees.  Some
   machines, for example the Bostomatic, output the rotary angle as a circum-
   ference instead of in degrees, the value may be different in this case.  This
   prompt is only displayed when Rotary axis #1 moves on a linear scale.
~2.3.29
29.   Enter circumference of Rotary axis #2:

   Enter the value that will cause one full rotation for Rotary axis #2.  This
   will usually be 360.0 for rotaries that are output using degrees.  Some
   machines, for example the Bostomatic, output the rotary angle as a circum-
   ference instead of in degrees, the value may be different in this case.  This
   prompt is only displayed when Rotary axis #2 moves on a linear scale.
~2.3.30
30.   Enter circumference of Rotary axis #3:

   Enter the value that will cause one full rotation for Rotary axis #3.  This
   will usually be 360.0 for rotaries that are output using degrees.  Some
   machines, for example the Bostomatic, output the rotary angle as a circum-
   ference instead of in degrees, the value may be different in this case.  This
   prompt is only displayed when Rotary axis #3 moves on a linear scale.
~2.3.31
31.   Enter circumference of Rotary axis #4:

   Enter the value that will cause one full rotation for Rotary axis #4.  This
   will usually be 360.0 for rotaries that are output using degrees.  Some
   machines, for example the Bostomatic, output the rotary angle as a circum-
   ference instead of in degrees, the value may be different in this case.  This
   prompt is only displayed when Rotary axis #4 moves on a linear scale.
~2.3.32
32.   A positive number will move Rotary axis #1 in a CLW/CCLW direction:

   Enter the direction that Rotary axis #1 will move when a positive number is
   output, either clockwise (CLW) or counter-clockwise (CCLW).  A positive num-
   ber will move most rotaries in the clockwise direction.  This prompt will
   only be displayed when at least 1 rotary axis has been specified.
~2.3.33
33.   A positive number will move Rotary axis #2 in a CLW/CCLW direction:

   Enter the direction that Rotary axis #2 will move when a positive number is
   output, either clockwise (CLW) or counter-clockwise (CCLW).  A positive num-
   ber will move most rotaries in the clockwise direction.  This prompt will
   only be displayed when at least 2 rotary axes have been specified.
~2.3.34
34.   A positive number will move Rotary axis #3 in a CLW/CCLW direction:

   Enter the direction that Rotary axis #3 will move when a positive number is
   output, either clockwise (CLW) or counter-clockwise (CCLW).  A positive num-
   ber will move most rotaries in the clockwise direction.  This prompt will
   only be displayed when at least 3 rotary axes have been specified.
~2.3.35
35.   A positive number will move Rotary axis #4 in a CLW/CCLW direction:

   Enter the direction that Rotary axis #4 will move when a positive number is
   output, either clockwise (CLW) or counter-clockwise (CCLW).  A positive num-
   ber will move most rotaries in the clockwise direction.  This prompt will
   only be displayed when all 4 rotary axes have been specified.
~2.3.36
36.   Default active rotary axes at start of program (Max. 2):

   This prompt is displayed only when 3 or more rotary axes are supported.
   Although PostWorks can support up to 4 rotary axes, only 2 can be active at
   any one time.  Enter which rotary axes (1-4) are active, by default, at the
   beginning of the program.  You can enter 1 or 2 axes separated by a comma.
   Example, 1,2.  The active rotary axes can be changed at any place within the
   part program by using the MODE/AXIS command.
~2.3.37
37.   Distance to center of Rotary axis #1 [x,y,z]:

   Enter the distance from the programmed 0,0,0 location to the center of Rotary
   axis #1 when all linear and rotary axes are at zero.  The center of all
   rotary axes are required by PWORKS when calculating the machine coordinate
   points from the programmed cl points.  Enter the X,Y and Z coordinates
   separated by commas, for example, 0,10.5,0.

   The following rules must be taken into consideration when 2 or more rotary
   heads are configured.

        1. When multiple rotary heads share the same pivot point, then the
           rotary center must be defined for the head rider.

        2. The head carrier rotation center point should be defined as a dis-
           tance from the head rider center point.

   You can use the ROTABL/ORIGIN command to change these values at any place
   within the part program.  This prompt will only be displayed when at least 1
   rotary axis has been specified.
~2.3.38
38.   Distance to center of Rotary axis #2 [x,y,z]:

   Enter the distance from the programmed 0,0,0 location to the center of Rotary
   axis #2 when all linear and rotary axes are at zero.  The center of all
   rotary axes are required by PWORKS when calculating the machine coordinate
   points from the programmed cl points.  Enter the X,Y and Z coordinates
   separated by commas, for example, 0,10.5,0.

   The following rules must be taken into consideration when 2 or more rotary
   heads are configured.

        1. When multiple rotary heads share the same pivot point, then the
           rotary center must be defined for the head rider.

        2. The head carrier rotation center point should be defined as a dis-
           tance from the head rider center point.

   You can use the ROTABL/ORIGIN command to change these values at any place
   within the part program.  This prompt will only be displayed when at least 2
   rotary axes have been specified.
~2.3.39
39.   Distance to center of Rotary axis #3 [x,y,z]:

   Enter the distance from the programmed 0,0,0 location to the center of Rotary
   axis #3 when all linear and rotary axes are at zero.  The center of all
   rotary axes are required by PWORKS when calculating the machine coordinate
   points from the programmed cl points.  Enter the X,Y and Z coordinates
   separated by commas, for example, 0,10.5,0.

   The following rules must be taken into consideration when 2 or more rotary
   heads are configured.

        1. When multiple rotary heads share the same pivot point, then the
           rotary center must be defined for the head rider.

        2. The head carrier rotation center point should be defined as a dis-
           tance from the head rider center point.

   You can use the ROTABL/ORIGIN command to change these values at any place
   within the part program.  This prompt will only be displayed when at least 3
   rotary axes have been specified.
~2.3.40
40.   Distance to center of Rotary axis #4 [x,y,z]:

   Enter the distance from the programmed 0,0,0 location to the center of Rotary
   axis #2 when all linear and rotary axes are at zero.  The center of all
   rotary axes are required by PWORKS when calculating the machine coordinate
   points from the programmed cl points.  Enter the X,Y and Z coordinates
   separated by commas, for example, 0,10.5,0.

   The following rules must be taken into consideration when 2 or more rotary
   heads are configured.

        1. When multiple rotary heads share the same pivot point, then the
           rotary center must be defined for the head rider.

        2. The head carrier rotation center point should be defined as a dis-
           tance from the head rider center point.

   You can use the ROTABL/ORIGIN command to change these values at any place
   within the part program.  This prompt will only be displayed when at least 4
   rotary axes have been specified.
~2.4.1
1.   Register for absolute Primary X-axis:

   Enter the register descriptor for the absolute primary X-axis position, for
   example X1, X2, etc.  You must enter a register even if the machine only
   supports incremental mode, as this register is used internally by PWORKS in
   calculating the incremental value for the Primary X.  Usually the X1 register
   is used.
~2.4.2
2.   Register for incremental Primary X-axis:

   Enter the register descriptor to use for incremental positioning of the
   primary X-axis, for example X1, X2, etc.  You do not need to enter a register
   if the machine does not support incremental mode.  Usually the X2 register is
   used.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.3
3.   Register for absolute Secondary X-axis:

   Enter the register descriptor for the absolute secondary X-axis position, for
   example U1, U2, etc.  You must enter a register even if the machine only
   supports incremental mode, as this register is used internally by PWORKS in
   calculating the incremental value for the Secondary X.  Usually the U1 regis-
   ter is used.
~2.4.4
4.   Register for incremental Secondary X-axis:

   Enter the register descriptor to use for incremental positioning of the
   primary X-axis, for example U1, U2, etc.  You do not need to enter a register
   if the machine does not support incremental mode.  Usually the U2 register is
   used.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.5
5.   Register for absolute Primary Y-axis:

   Enter the register descriptor for the absolute primary Y-axis position, for
   example Y1, Y2, etc.  You must enter a register even if the machine only
   supports incremental mode, as this register is used internally by PWORKS in
   calculating the incremental value for the Primary Y.  Usually the Y1 register
   is used.
~2.4.6
6.   Register for incremental Primary Y-axis:

   Enter the register descriptor to use for incremental positioning of the
   primary Y-axis, for example Y1, Y2, etc.  You do not need to enter a register
   if the machine does not support incremental mode.  Usually the Y2 register is
   used.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.7
7.   Register for absolute Secondary Y-axis:

   Enter the register descriptor for the absolute secondary Y-axis position, for
   example V1, V2, etc.  You must enter a register even if the machine only
   supports incremental mode, as this register is used internally by PWORKS in
   calculating the incremental value for the Secondary Y.  Usually the V1 regis-
   ter is used.
~2.4.8
8.   Register for incremental Secondary Y-axis:

   Enter the register descriptor to use for incremental positioning of the
   primary V-axis, for example V1, V2, etc.  You do not need to enter a register
   if the machine does not support incremental mode.  Usually the V2 register is
   used.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.9
9.   Register for absolute Primary Z-axis:

   Enter the register descriptor for the absolute primary Z-axis position, for
   example Z1, Z2, etc.  You must enter a register even if the machine only
   supports incremental mode, as this register is used internally by PWORKS in
   calculating the incremental value for the Primary Z.  Usually the Z1 register
   is used.
~2.4.10
10.   Register for incremental Primary Z-axis:

   Enter the register descriptor to use for incremental positioning of the
   primary Z-axis, for example Z1, Z2, etc.  You do not need to enter a register
   if the machine does not support incremental mode.  Usually the Z2 register is
   used.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.11
11.   Register for absolute Secondary Z-axis:

   Enter the register descriptor for the absolute secondary Z-axis position, for
   example W1, W2, etc.  You must enter a register even if the machine only
   supports incremental mode, as this register is used internally by PWORKS in
   calculating the incremental value for the Secondary Z.  Usually the W1 regis-
   ter is used.
~2.4.12
12.   Register for incremental Secondary Z-axis:

   Enter the register descriptor to use for incremental positioning of the
   primary Z-axis, for example W1, W2, etc.  You do not need to enter a register
   if the machine does not support incremental mode.  Usually the W2 register is
   used.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.13
13.   Register for internal Rotary axis #1:

   Enter the register descriptor which will be used internally by PWORKS to keep
   track of the absolute position of Rotary axis #1.  This register will not be
   output and is used by PWORKS to keep track of the rotary axis on a linear
   scale of 360 degrees, no matter how the axis is actually output.

   This register must be unique (not used as an output register for any other
   address).  The A1,B1,C1 and C4 registers have initially been reserved as the
   internal rotary axis registers.
~2.4.14
14.   Register for absolute Rotary axis #1:

   Enter the register descriptor for the absolute Rotary axis #1, for example
   A2, B2, etc.  You must enter a register even if the machine only supports
   incremental mode, as this register is used internally by PWORKS in calculat-
   ing the incremental value for Rotary axis #1.  The A2,B2,C2 and C5 registers
   have initially been reserved as the absolute rotary axis registers.
~2.4.15
15.   Register for incremental Rotary axis #1:

   Enter the register descriptor to use for incremental positioning of Rotary
   axis #1, for example A3, B3, etc.  You do not need to enter a register if the
   machine does not support incremental mode.  The A3,B3,C3 and C6 registers
   have initially been reserved as the incremental rotary axis registers.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.16
16.   Register for internal Rotary axis #2:

   Enter the register descriptor which will be used internally by PWORKS to keep
   track of the absolute position of Rotary axis #2.  This register will not be
   output and is used by PWORKS to keep track of the rotary axis on a linear
   scale of 360 degrees, no matter how the axis is actually output.

   This register must be unique (not used as an output register for any other
   address).  The A1,B1,C1 and C4 registers have initially been reserved as the
   internal rotary axis registers.
~2.4.17
17.   Register for absolute Rotary axis #2:

   Enter the register descriptor for the absolute Rotary axis #2, for example
   A2, B2, etc.  You must enter a register even if the machine only supports
   incremental mode, as this register is used internally by PWORKS in calculat-
   ing the incremental value for Rotary axis #2.  The A2,B2,C2 and C5 registers
   have initially been reserved as the absolute rotary axis registers.
~2.4.18
18.   Register for incremental Rotary axis #2:

   Enter the register descriptor to use for incremental positioning of Rotary
   axis #1, for example A3, B3, etc.  You do not need to enter a register if the
   machine does not support incremental mode.  The A3,B3,C3 and C6 registers
   have initially been reserved as the incremental rotary axis registers.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.19
19.   Register for internal Rotary axis #3:

   Enter the register descriptor which will be used internally by PWORKS to keep
   track of the absolute position of Rotary axis #3.  This register will not be
   output and is used by PWORKS to keep track of the rotary axis on a linear
   scale of 360 degrees, no matter how the axis is actually output.

   This register must be unique (not used as an output register for any other
   address).  The A1,B1,C1 and C4 registers have initially been reserved as the
   internal rotary axis registers.
~2.4.20
20.   Register for absolute Rotary axis #3:

   Enter the register descriptor for the absolute Rotary axis #3, for example
   A2, B2, etc.  You must enter a register even if the machine only supports
   incremental mode, as this register is used internally by PWORKS in calculat-
   ing the incremental value for Rotary axis #3.  The A2,B2,C2 and C5 registers
   have initially been reserved as the absolute rotary axis registers.
~2.4.21
21.   Register for incremental Rotary axis #3:

   Enter the register descriptor to use for incremental positioning of Rotary
   axis #3, for example A3, B3, etc.  You do not need to enter a register if the
   machine does not support incremental mode.  The A3,B3,C3 and C6 registers
   have initially been reserved as the incremental rotary axis registers.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.22
22.   Register for internal Rotary axis #4:

   Enter the register descriptor which will be used internally by PWORKS to keep
   track of the absolute position of Rotary axis #4.  This register will not be
   output and is used by PWORKS to keep track of the rotary axis on a linear
   scale of 360 degrees, no matter how the axis is actually output.

   This register must be unique (not used as an output register for any other
   address).  The A1,B1,C1 and C4 registers have initially been reserved as the
   internal rotary axis registers.
~2.4.23
23.   Register for absolute Rotary axis #4:

   Enter the register descriptor for the absolute Rotary axis #4, for example
   A2, B2, etc.  You must enter a register even if the machine only supports
   incremental mode, as this register is used internally by PWORKS in calculat-
   ing the incremental value for Rotary axis #4.  The A2,B2,C2 and C5 registers
   have initially been reserved as the absolute rotary axis registers.
~2.4.24
24.   Register for incremental Rotary axis #4:

   Enter the register descriptor to use for incremental positioning of Rotary
   axis #4, for example A3, B3, etc.  You do not need to enter a register if the
   machine does not support incremental mode.  The A3,B3,C3 and C6 registers
   have initially been reserved as the incremental rotary axis registers.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.4.25
25.   Register for Tool Axis Vector I-component:

   Enter the register descriptor for the X-axis component of the tool axis
   vector, for example I2.  The I2 register has initially been reserved for
   this register.  This prompt is only displayed when the tool axis is output
   instead of the actual rotary axis positions.
~2.4.26
26.   Register for Tool Axis Vector J-component:

   Enter the register descriptor for the Y-axis component of the tool axis
   vector, for example J2.  The J2 register has initially been reserved for
   this register.  This prompt is only displayed when the tool axis is output
   instead of the actual rotary axis positions.
~2.4.27
27.   Register for Tool Axis Vector K-component:

   Enter the register descriptor for the Z-axis component of the tool axis
   vector, for example K2.  The K2 register has initially been reserved for
   this register.  This prompt is only displayed when the tool axis is output
   instead of the actual rotary axis positions.
~2.4.28
28.   Register for absolute Polar Interpolation Y-axis:

   Enter the register descriptor for the absolute Y-axis position when in
   polar interpolation.  This register will contain the Y-axis rectangular
   position which actually controls the rotary axis during polar interpolation
   on a Mill/Turn type machine.

   This prompt will only be displayed when the machine type is set to a Mill/
   Turn and polar interpolation is supported.
~2.4.29
29.   Register for incremental Polar Interpolation Y-axis:

   Enter the register descriptor to use for incremental positioning of the
   polar interpolation Y-axis. You do not need to enter a register if the
   machine does not support incremental mode.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.

   This prompt will only be displayed when the machine type is set to a Mill/
   Turn and polar interpolation is supported.
~2.4.30
30.   Register for internal Cylindrical Interpolation Rotary axis:

   Enter the register descriptor which will be used internally by PWORKS to keep
   track of the absolute position of the cylindrical interpolation rotary axis.
   This register will not be output and is used by PWORKS to keep track of the
   rotary axis on a linear scale of 360 degrees, no matter how the axis is ac-
   tually output.

   This register must be unique (not used as an output register for any other
   address).  The A1,B1,C1 and C4 registers have initially been reserved as the
   internal rotary axis registers.

   This prompt will only be displayed when the machine type is set to a Mill/
   Turn and cylindrical interpolation is supported.
~2.4.31
31.   Register for absolute Cylindrical Interpolation Rotary axis:

   Enter the register descriptor for the absolute cylindrical interpolation
   rotary axis.  The A2,B2,C2 and C5 registers have initially been reserved as
   the absolute rotary axis registers.
~2.4.32
32.   Register for incremental Cylindrical Interpolation Rotary axis:

   Enter the register descriptor to use for incremental positioning of this
   rotary axis.  The A3,B3,C3 and C6 registers have initially been reserved as
   the incremental rotary axis registers.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~2.5.1
1.   Current position for Primary X-axis:

   Enter the default position for the primary X-axis at the start of the
   program.  This location is input as the actual machine position and not the
   tool tip position.
~2.5.2
2.   Current position for Secondary X-axis:

   Enter the default position for the secondary X-axis at the start of the
   program.  This location is input as the actual machine position and not the
   tool tip position.
~2.5.3
3.   Current position for Primary Y-axis:

   Enter the default position for the primary Y-axis at the start of the
   program.  This location is input as the actual machine position and not the
   tool tip position.
~2.5.4
4.   Current position for Secondary Y-axis:

   Enter the default position for the secondary Y-axis at the start of the
   program.  This location is input as the actual machine position and not the
   tool tip position.
~2.5.5
5.   Current position for Primary Z-axis:

   Enter the default position for the primary Z-axis at the start of the
   program.  This location is input as the actual machine position and not the
   tool tip position.
~2.5.6
6.   Current position for Secondary Z-axis:

   Enter the default position for the secondary Z-axis at the start of the
   program.  This location is input as the actual machine position and not the
   tool tip position.
~2.5.7
7.   Current position for Rotary axis #1:

   Enter the default position for Rotary axis #1 at the start of the program.
   program.  This location is input as the actual machine position.
~2.5.8
8.   Current position for Rotary axis #2:

   Enter the default position for Rotary axis #2 at the start of the program.
   program.  This location is input as the actual machine position.
~2.5.9
9.   Current position for Rotary axis #3:

   Enter the default position for Rotary axis #3 at the start of the program.
   program.  This location is input as the actual machine position.
~2.5.10
10.   Current position for Rotary axis #4:

   Enter the default position for Rotary axis #4 at the start of the program.
   program.  This location is input as the actual machine position.
~2.6.1
1.   Primary X-axis Home position:

   Enter the machine's Primary X-axis home (reference point) position.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position, not as the tool end
   point position.
~2.6.2
2.   Secondary X-axis Home position:

   Enter the machine's Secondary X-axis home (reference point) position.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position, not as the tool end
   point position.
~2.6.3
3.   Primary Y-axis Home position:

   Enter the machine's Primary Y-axis home (reference point) position.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position, not as the tool end
   point position.
~2.6.4
4.   Secondary Y-axis Home position:

   Enter the machine's Secondary Y-axis home (reference point) position.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position, not as the tool end
   point position.
~2.6.5
5.   Primary Z-axis Home position:

   Enter the machine's Primary Z-axis home (reference point) position.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position, not as the tool end
   point position.
~2.6.6
6.   Secondary Z-axis Home position:

   Enter the machine's Secondary Z-axis home (reference point) position.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position, not as the tool end
   point position.
~2.6.7
7.   Rotary axis #1 Home position:

   Enter the machine's home (reference point) position for Rotary axis #1.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position.
~2.6.8
8.   Rotary axis #2 Home position:

   Enter the machine's home (reference point) position for Rotary axis #2.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position.
~2.6.9
9.   Rotary axis #3 Home position:

   Enter the machine's home (reference point) position for Rotary axis #3.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position.
~2.6.10
10.   Rotary axis #4 Home position:

   Enter the machine's home (reference point) position for Rotary axis #4.  The
   GOHOME command can be used to position the machine to its home position.
   This location is input as the actual machine position.
~2.6.11
11.   Default clearance plane mode:

   Enter either 'NORMAL' or 'TOOL'.  'NORMAL' sets the clearance plane type to
   be an actual plane, the tool will be retracted along the tool axis vector to
   this plane when a RETRCT command is issued.  'TOOL' specifies that the tool
   will retract a defined distance from its current position when a RETRCT
   command is issued.
~2.6.12
12.   Default clearance plane:

   Enter the default clearance plane to use at the beginning of the program.
   The clearance plane should be entered using the format 'i,j,k,d' or just 'd'.
   If only a single number is entered, 'd', then a plane vector of '0,0,1' will
   be used.

   This prompt will only be displayed when the default clearance mode was set to
   'NORMAL'.  You can use the CLRSRF/NORMAL command to change the clearance
   plane anywhere within the part program.
~2.6.13
13.   Retract distance to add to current tool length:

   Enter the distance along the current tool axis vector in addition to the tool
   length to be used at the beginning of the program for the default retract
   distance.  The tool will retract this distance plus the currently programmed
   tool length whenever a RETRCT command is issued.

   This prompt will only be displayed when the default clearance mode was set to
   'TOOL'.  You can use the CLRSRF/TOOL command to change the clearance distance
   anywhere within the part program.
~2.6.14
14.   Retract Tool tip or Pivot point to clearance plane:

   Enter the tool/spindle location which will move to the clearance plane when
   a RETRCT command is issued.  You can enter either 'TOOL' or 'PIVOT'.  'TOOL'
   will position the tool end point at the defined clearance plane.  'PIVOT'
   will move the tool stop or rotary head pivot point, whichever applies, to
   the clearance plane.  This setting will become the default retract reference
   location and can be changed using the RETRCT/(PAST,TO) command.
~2.6.15
15.   Enter retract direction logic:

   Enter the value that corresponds to the way you want retract moves output to
   the Control Tape by default.

             1. Retract tool along the X-axis.
             2. Retract tool along the Y-axis.
             3. Retract tool along the Z-axis.
             4. Retract tool along the current tool axis vector.

   Selecting option 1,2, or 3 results in the tool retracting along the speci-
   fied axis (X,Y, or Z), without regards to the tool axis vector.  Option 4
   will retract the tool along the current spindle vector.

   Regardless of the retract logic chosen here, the tool will always retract in
   relationship to the machine axes configuration.  This means that any adjust-
   ments to the linear axes for table rotations will be made first.  These
   adjusted locations will be used as a basis for the retraction direction and
   location.

   When the tool retracts along the tool axis (4), the tool spindle vector (the
   portion of the tool axis vector remaining after being adjusted for table
   rotations) will be used.
~2.7.1
1.   Primary X-axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the primary X-axis.  These
   limits can be changed using the CHECK/XAXIS,1 command.
~2.7.2
2.   Secondary X-axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the secondary X-axis.  These
   limits can be changed using the CHECK/XAXIS,2 command.
~2.7.3
3.   Primary Y-axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the primary Y-axis.  These
   limits can be changed using the CHECK/YAXIS,1 command.
~2.7.4
4.   Secondary Y-axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the secondary Y-axis.  These
   limits can be changed using the CHECK/YAXIS,2 command.
~2.7.5
5.   Primary Z-axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the primary Z-axis.  These
   limits can be changed using the CHECK/ZAXIS,1 command.
~2.7.6
6.   Secondary Z-axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the secondary Z-axis.  These
   limits can be changed using the CHECK/ZAXIS,2 command.
~2.7.7
7.   Rotary axis #1 travel limits [min,max]:

   Enter the minimum and maximum travel limits for Rotary axis #1.  These limits
   can be changed using the CHECK/AXIS,1 command.
~2.7.8
8.   Rotary axis #2 travel limits [min,max]:

   Enter the minimum and maximum travel limits for Rotary axis #2.  These limits
   can be changed using the CHECK/AXIS,2 command.
~2.7.9
9.   Rotary axis #3 travel limits [min,max]:

   Enter the minimum and maximum travel limits for Rotary axis #3.  These limits
   can be changed using the CHECK/AXIS,3 command.
~2.7.10
10.  Rotary axis #4 travel limits [min,max]:

   Enter the minimum and maximum travel limits for Rotary axis #4.  These limits
   can be changed using the CHECK/AXIS,4 command.
~2.7.11
11.  Maximum register value for Rotary axis #1:

   Enter the maximum value that can be output for Rotary axis #1.  This value
   is different than the axis limit in that it only controls the maximum
   value that the axis register can contain and is not an actual machine
   limit.  The post-processor will actually output a code or an orientation
   block whenever this value is exceeded, so that the machine controller
   will reset this axis to be at a position close to zero degrees, while the
   axis itself will not physically move.

   This prompt/feature is only valid for rotary axes that are output on a
   linear scale.
~2.7.12
12.  Maximum register value for Rotary axis #2:

   Enter the maximum value that can be output for Rotary axis #2.  This value
   is different than the axis limit in that it only controls the maximum
   value that the axis register can contain and is not an actual machine
   limit.  The post-processor will actually output a code or an orientation
   block whenever this value is exceeded, so that the machine controller
   will reset this axis to be at a position close to zero degrees, while the
   axis itself will not physically move.

   This prompt/feature is only valid for rotary axes that are output on a
   linear scale.
~2.7.13
13.  Maximum register value for Rotary axis #3:

   Enter the maximum value that can be output for Rotary axis #3.  This value
   is different than the axis limit in that it only controls the maximum
   value that the axis register can contain and is not an actual machine
   limit.  The post-processor will actually output a code or an orientation
   block whenever this value is exceeded, so that the machine controller
   will reset this axis to be at a position close to zero degrees, while the
   axis itself will not physically move.

   This prompt/feature is only valid for rotary axes that are output on a
   linear scale.
~2.7.14
14.  Maximum register value for Rotary axis #4:

   Enter the maximum value that can be output for Rotary axis #4.  This value
   is different than the axis limit in that it only controls the maximum
   value that the axis register can contain and is not an actual machine
   limit.  The post-processor will actually output a code or an orientation
   block whenever this value is exceeded, so that the machine controller
   will reset this axis to be at a position close to zero degrees, while the
   axis itself will not physically move.

   This prompt/feature is only valid for rotary axes that are output on a
   linear scale.
~2.7.15
15.  Code to reset Rotary axis #1 when register limit is reached:

   Enter the register and its value that will be output to reset this rotary
   axis back/close to zero degrees when the maximum output value is reached.

   Entering a register without any value will output this register with the
   reset position of the rotary axis as its value.  Leaving this prompt
   blank will output an orientation block (POSTN).  Specifying both a register
   and its value will output this register in a block by itself.

   This prompt/feature is only valid for rotary axes that are output on a
   linear scale.
~2.7.16
16.  Code to reset Rotary axis #2 when register limit is reached:

   Enter the register and its value that will be output to reset this rotary
   axis back/close to zero degrees when the maximum output value is reached.

   Entering a register without any value will output this register with the
   reset position of the rotary axis as its value.  Leaving this prompt
   blank will output an orientation block (POSTN).  Specifying both a register
   and its value will output this register in a block by itself.

   This prompt/feature is only valid for rotary axes that are output on a
   linear scale.
~2.7.17
17.  Code to reset Rotary axis #3 when register limit is reached:

   Enter the register and its value that will be output to reset this rotary
   axis back/close to zero degrees when the maximum output value is reached.

   Entering a register without any value will output this register with the
   reset position of the rotary axis as its value.  Leaving this prompt
   blank will output an orientation block (POSTN).  Specifying both a register
   and its value will output this register in a block by itself.

   This prompt/feature is only valid for rotary axes that are output on a
   linear scale.
~2.7.18
18.  Code to reset Rotary axis #4 when register limit is reached:

   Enter the register and its value that will be output to reset this rotary
   axis back/close to zero degrees when the maximum output value is reached.

   Entering a register without any value will output this register with the
   reset position of the rotary axis as its value.  Leaving this prompt
   blank will output an orientation block (POSTN).  Specifying both a register
   and its value will output this register in a block by itself.

   This prompt/feature is only valid for rotary axes that are output on a
   linear scale.
~2.8.1
1.   Primary X-axis interference area for zone 1:

   Enter the lower and upper limit that will define the primary X-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.2
2.   Secondary X-axis interference area for zone 1:

   Enter the lower and upper limit that will define the secondary X-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.3
3.   Primary Y-axis interference area for zone 1:

   Enter the lower and upper limit that will define the primary Y-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.4
4.   Secondary Y-axis interference area for zone 1:

   Enter the lower and upper limit that will define the secondary Y-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.5
5.   Primary Z-axis interference area for zone 1:

   Enter the lower and upper limit that will define the primary Z-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.6
6.   Secondary Z-axis interference area for zone 1:

   Enter the lower and upper limit that will define the secondary Z-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.7
7.   Rotary axis #1 interference area for zone 1:

   Enter the lower and upper limit that will define the Rotary axis #1 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.8
8.   Rotary axis #2 interference area for zone 1:

   Enter the lower and upper limit that will define the Rotary axis #2 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.9
9.   Rotary axis #3 interference area for zone 1:

   Enter the lower and upper limit that will define the Rotary axis #3 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.10
10.   Rotary axis #4 interference area for zone 1:

   Enter the lower and upper limit that will define the Rotary axis #4 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.11
11.   Primary X-axis interference area for zone 2:

   Enter the lower and upper limit that will define the primary X-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.12
12.   Secondary X-axis interference area for zone 2:

   Enter the lower and upper limit that will define the secondary X-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.13
13.   Primary Y-axis interference area for zone 2:

   Enter the lower and upper limit that will define the primary Y-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.14
14.   Secondary Y-axis interference area for zone 2:

   Enter the lower and upper limit that will define the secondary Y-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.15
15.   Primary Z-axis interference area for zone 2:

   Enter the lower and upper limit that will define the primary Z-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.16
16.   Secondary Z-axis interference area for zone 2:

   Enter the lower and upper limit that will define the secondary Z-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.17
17.   Rotary axis #1 interference area for zone 2:

   Enter the lower and upper limit that will define the Rotary axis #1 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.18
18.   Rotary axis #2 interference area for zone 2:

   Enter the lower and upper limit that will define the Rotary axis #2 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.19
19.   Rotary axis #3 interference area for zone 2:

   Enter the lower and upper limit that will define the Rotary axis #3 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.20
20.   Rotary axis #4 interference area for zone 2:

   Enter the lower and upper limit that will define the Rotary axis #4 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.21
21.   Primary X-axis interference area for zone 3:

   Enter the lower and upper limit that will define the primary X-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.22
22.   Secondary X-axis interference area for zone 3:

   Enter the lower and upper limit that will define the secondary X-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.23
23.   Primary Y-axis interference area for zone 3:

   Enter the lower and upper limit that will define the primary Y-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.24
24.   Secondary Y-axis interference area for zone 3:

   Enter the lower and upper limit that will define the secondary Y-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.25
25.   Primary Z-axis interference area for zone 3:

   Enter the lower and upper limit that will define the primary Z-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.26
26.   Secondary Z-axis interference area for zone 3:

   Enter the lower and upper limit that will define the secondary Z-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.27
27.   Rotary axis #1 interference area for zone 3:

   Enter the lower and upper limit that will define the Rotary axis #1 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.28
28.   Rotary axis #2 interference area for zone 3:

   Enter the lower and upper limit that will define the Rotary axis #2 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.29
29.   Rotary axis #3 interference area for zone 3:

   Enter the lower and upper limit that will define the Rotary axis #3 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.30
30.   Rotary axis #4 interference area for zone 3:

   Enter the lower and upper limit that will define the Rotary axis #4 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.31
31.   Primary X-axis interference area for zone 4:

   Enter the lower and upper limit that will define the primary X-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.32
32.   Secondary X-axis interference area for zone 4:

   Enter the lower and upper limit that will define the secondary X-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.33
33.   Primary Y-axis interference area for zone 4:

   Enter the lower and upper limit that will define the primary Y-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.34
34.   Secondary Y-axis interference area for zone 4:

   Enter the lower and upper limit that will define the secondary Y-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.35
35.   Primary Z-axis interference area for zone 4:

   Enter the lower and upper limit that will define the primary Z-axis collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.36
36.   Secondary Z-axis interference area for zone 4:

   Enter the lower and upper limit that will define the secondary Z-axis col-
   lision area for this interference zone.  This axis will be considered inside
   the interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.37
37.   Rotary axis #1 interference area for zone 4:

   Enter the lower and upper limit that will define the Rotary axis #1 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.38
38.   Rotary axis #2 interference area for zone 4:

   Enter the lower and upper limit that will define the Rotary axis #2 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.39
39.   Rotary axis #3 interference area for zone 4:

   Enter the lower and upper limit that will define the Rotary axis #3 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~2.8.40
40.   Rotary axis #4 interference area for zone 4:

   Enter the lower and upper limit that will define the Rotary axis #4 collision
   area for this interference zone.  This axis will be considered inside the
   interference zone when its location is equal to or greater than the lower
   limit and less than or equal to the higher limit.  All axes defined as part
   of the interference zone must be within their limiits for the interference
   zone to be considered breached.

   You may enter eithar a lower and upper limit, separated by a comma, when an
   area of the specified axis is part of the interference zone, or you may en-
   ter a single number, if the axis must be at this location to be in the inter-
   ference zone.  If this axis should not be considered as part of the interfer-
   ence zone, then leave this prompt blank.
~3.0
0.   Walk through Control Tape format.

   This selection will lead you through all of the aspects of defining the
   register, tape block and punch file formats, including register descriptions,
   G-code and M-code groups, User defined blocks, etc.

1.   Tape register format.

   This section defines the attributes of the tape registers (A1,F1,G1,S,etc.).
   The beginning and ending character strings, floating point format, sign con-
   trol, and when the register should be output can be defined.

2.   Define G-code groups.

   This section defines separate G-code groups and which G-code values belong
   to each group.

3.   Define M-code groups.

   This section defines separate M-code groups and which M-code values belong
   to each group.

4.   Store register values.

   This section stores a default value into each register.  These values will
   be loaded into each register, by PWORKS,  at the start of the part program.

5.   Define tape register order.

   This section defines the order in which the registers appear in the output
   tape block.

6.   User defined tape blocks.

   This section lets you define the format for tape blocks that will be output
   at specific times.  You define the registers and optionally their values that
   certain tape blocks will contain, for example an alignment block, the block
   following an OPSKIP/OFF command, the first block of the program, etc.

7.   Define tape block format.

   This section defines certain attributes of an output Control Tape block.
   End-of-block characters, the leader character, optional skip character and
   how G-codes and M-codes are handled can be defined.

8.   Define Punch file format.

   This section defines the format of the output control tape file.  The output
   of the PARTNO card and packed or unpacked output are some of the options.

9.   Define Start/End sequences.

   This section controls the output of certain sequences at the beginning and
   end of the output Control Tape file.  The amount of leader output, rewind
   stop characters, FINI code and User defined block at the start of the program
   can be defined.

10.   Tape Break Sequences.

   This section defines the actions to take when the Control Tape is broken
   up into multiple tapes due to the BREAK command.  Options covering the de-
   fault BREAK mode, multiple punch files, automatic tool retraction, etc. are
   included in this section.

11.   Exit

   Exits the Control Tape format section and returns you to the previous
   section.
~3.1.0
The Tape register format form enables you to modify the format of each of the
92 tape registers.  You can change the beginning characters, floating point
format, sign output, the minimum number of digits to output and the ending
characters for each register.

The registers are assigned a function throughout the rest of the MakePost
routine.  Following is an explanation and list of acceptable input for each
of the different headings in the Tape register format form.

Reg
---
This field cannot be modified and contains the designator for each register
as it should be referenced throughout the MakePost routine.

Begin
-----
Defines the starting characters for each register, which will be placed prior to
the register value when formatting it for output. You may define anywhere from 0
to 24 characters.  On most machines this will consist of a single letter (X,F,G,
M,etc.).

If the starting characters of the register address must be followed by a space
preceding the register value, then use the backslash character '\' to denote
this space.  Spaces in the midst of the starting characters can simply be
represented with a space ' ' character.  To place a backslash character at the
end of the starting characters you must use a double backslash '\\'.  This
rule holds true for the ending characters of the register.

Format
------
Defines the floating point format for each of the registers.  Valid formats are
as follows:

     LEADING   = Leading zero suppression.
     TRAILING  = Trailing zero suppression.
     FLOATING  = Number contains a decimal point.
     DECIMAL   = Number contains a decimal point, except whole numbers which
                 will drop the decimal point.

Sign
----
Controls the output of the sign (+-) character.  You may enter both a plus and
minus control character.  Valid control characters are as follows:

   (Blank) = Negative numbers will not contain a sign.
      +    = Positive numbers will contain a + sign.
      -    = Negative numbers will contain a - sign.
      *    = Negative numbers and zero will contain a - sign.
      PN   = Postive numbers will contain P( as the sign.
             Negative numbers will contain N( as the sign.

When 'PN' is specified, be sure to add a ')' as the ending character for this
register.

Left
----
Enter the number of digits to the left of the (implied) decimal point, for both
Inch and Metric modes.

Right
-----
Enter the number of digits to the right of the (implied) decimal point, for both
Inch and Metric modes.

Min Left
--------
Enter the minimum number of digits to the left of the (implied) decimal point
that the output number must contain.

Min Right
---------
Enter the minimum number of digits to the right of the (implied) decimal point
that the output number must contain.

End
---
Defines the ending characters for each register, which will be placed after the
register value when formatting it for output. You may define anywhere from 0 to
24 characters.  On most machines this will consist of no characters.

Control
-------

The control entry determines when this particular register will be output to the
Control Tape.  Following is a list of acceptable input to this field.

     NOT_USED  = This register will never be output.
     ALWAYS    = This register will be output on every block.
     SET       = This register will be output whenever it is internally set by
                 PWORKS.
     CHANGED   = This register will be output whenever its value changes.
     NONZERO   = This register will be output whenever it has a value other than
                 zero.
     MOTION    = This register will only be output on motion blocks when its
                 value has changed.
~3.2.0
The G-code Groups form allows you to define up to 10 G-code groups, each with up
to 14 values.  These groups are used by PWORKS to determine which G-codes cancel
other G-codes.

Each G-code group should contain values, without the G designator, which cancel
each other on the machine, though Group 0 is usually used for non-modal G-codes,
not G-codes which cancel one another.  PWORKS also uses these groups to deter-
mine when to output certain G-codes.
~3.3.0
The M-code Groups form allows you to define up to 10 M-code groups, each with up
to 7 values.  These groups are used by PWORKS to determine which M-codes cancel
other M-codes.

Each M-code group should contain values, without the M designator, which cancel
each other on the machine, though Group 0 is usually used for non-modal M-codes,
not M-codes which cancel one another.  PWORKS also uses these groups to deter-
mine when to output certain M-codes.
~3.4.0
The Preset Registers form allows you to define the default value for each regis-
ter.  The register designator (A1,B2,C3,etc.) appears along with a default
value. You can only change the value, not the designator.
~3.5.0
The Register Order form allows you to define the order in which each register
appears in the output Control Tape block.  The register order is listed from
left to right on each line.  You only need to define the registers that are
supported with the current machine configuration.  Any registers that are used
but do not appear in this form will be appended to the end of the block.

The order of the registers can be changed at any time during the program by
utilizing the REGORD command inside of a post-processor Macro.
~3.6.0
The User Defined Blocks form contains the definitions for up to 20 User defined
tape blocks, each including up to 20 registers.  These block definitions are
referenced in other sections of the MakePost routine, such as the beginning
tape block, the first motion block, non-motion blocks, the first block after a
STOP,OPSTOP and OPSKIP/OFF command, etc.  They can also be output using the
FORCE/BLOCK command within a post-processor Macro.

For each block, enter a list of registers with an optional value separated by
commas.  These registers will be output whenever this block is forced out during
the part program.  You can specify both physical (G1,X1,etc.) and logical regis-
ters (X,F).

When specifying a value with a register, the value must be enclosed in parenthe-
sis, G(90).  You can also specify the $ character to signify an End-of-block.
The registers to the left of the $ will be output in a single block and the
registers to the right will be output in the following block.

   Example:   G(17),G(90),X1,Y1,Z1,F,M1,$,G(00),Z2

User defined blocks for macro calls, such as cycles on a Siemens 840D
controller, are defined by a sequence of numbers that represent the order of
the macro parameters in the call block.  All parameter values defined in a
macro call will automatically be output, since the parameters are position
dependant.  Any parameters that are not specified in the User defined block
order will be output in their numeric order after the parameters defined in the
User defined block are output.  You cannot mix registers with numeric macro
parameters in a single User defined block.

   Example:   1,2,3,4,12,7,18
   Output:    CYCLE83 (parm-1,parm-2,parm-3,parm-4,parm-12,parm-7,parm-18)
~3.7.1
1.   Multiple non-conflicting G-codes can be in a single block:

   Enter YES if G-codes from multiple groups can be output in a single Control
   Tape block.  G-codes that are in the same group, meaning they cancel one
   another, will still be output in separate blocks.
~3.7.2
2.   Multiple non-conflicting M-codes can be in a single block:

   Enter YES if M-codes from multiple groups can be output in a single Control
   Tape block.  M-codes that are in the same group, meaning they cancel one
   another, will still be output in separate blocks.
~3.7.3
3.   G-codes and M-codes can be in the same block:

   Enter NO if an M-code cannot be output in the same Control Tape block as a
   G-code.
~3.7.4
4.   Word address/tab sequential format:

   Enter the number that corresponds to the addressing mode of a Control Tape
   block.
 
        1. Word Address
        2. Fixed Tab Sequential

   Word address specifies that each register has a character designator assigned
   to it that identifies it.

   Fixed tab sequential specifies that each register is identified by its
   location within the Control Tape block and each register will be preceded by
   a tab character.
~3.7.5
5.   End-of-block character(s):

   Enter between 0 and 5 characters that will be output as the End-of-block
   designator.  This is usually the $ character, though when direct downloading
   of the Control Tape to the machine is used, without running through a con-
   vertor, then it is usually set to be no characters.  When there are no End-
   of-block characters, then you must also specify an unpacked punch file.
~3.7.6
6.   Start of message character(s):

   Enter between 0 and 10 characters that define the start of an operator
   message.  Operator messages are output with the PPRINT statement when DISPLY/
   ON has been specified.
~3.7.7
7.   End of message character(s):

   Enter between 0 and 10 characters that define the end of an operator message.
   Operator messages are output with the PPRINT statement when DISPLY/ON has
   been specified.
~3.7.8
8.   Leader character:

   Enter a single character that will be output as Control Tape leader.  This is
   usually the space character.
~3.7.9
9.   Tab character:

   Enter a single character that will be output for tabs.  Since the tab is a
   non-printable character, it is normally replaced with a printable character,
   usually an asterisk (*), and then run through a convertor (NCP, DNC, etc.)
   before being sent to the machine.  Tabs are used with Tab sequential output
   and sometimes in message blocks.
~3.7.10
10.   Optional skip character:

   Enter a single character that will be output at the beginning of all Control
   Tape blocks after an OPSKIP/ON command has been encountered.  This is usually
   the slash (/) character.
~3.7.11
11.   Default mode for CHECK/LENGTH:

   Enter YES if you want PWORKS to perform a checksumming of each tape block.
   When checksumming is enabled, PWORKS will total the decimal values of each
   character in the tape block and will add a code to the block that contains
   the result of this summation.

   Checksumming is primarily used to verify the contents of the Control Tape
   when transmitting it to the machine control.  Verify that the machine sup-
   ports checksumming prior to enabling it.
~3.7.12
12.   Enter checksum register (CHECK/LENGTH):

   Enter the register that will contain the checksum value when checksumming is
   enabled.  The E register is usually used.
~3.7.13
13.   Maximum value for checksum register:

   Enter the maximum value that can be placed in the checksum register.  When
   checksumming is enabled and this value is reached during the summation
   process, then the summation value will be rolled back to zero and the sum-
   mation process continued.

   For example, if the summation total calculates to 1234 and the maximum value
   allowed is 999, then the checksum register will contain 235.
~3.8.1
1.   Punch file is packed/unpacked:

   Enter either PACKED or UNPACKED, depending on how you want the punch file
   output.  A packed punch file has the Control Tape blocks packed into 72
   column lines, with columns 73-80 reserved for an ID number.  Unpacked punch
   files contain a single Control Tape block per line.
~3.8.2
2.   Maximum length of an MCD block:

   Enter the maximum size of an output MCD block in number of characters.
   PostWorks will break up any block which exceeds this size into multiple
   blocks.  A valid response is in the range of 10 to 512.  This prompt only
   applies if the punch file is output in unpacked format.

   This size can be changed in the part program file by using the
   MACHIN/PWORKS,mach,OPTION,5,n command.
~3.8.3
3.   PARTNO card output:

   Enter the number that corresponds to the way you want to handle the output of
   the PARTNO card.

       0. Do not output the PARTNO card.
       1. Output the first PARTNO card as is.
       2. Output the first PARTNO card in a message block.
       3. Output all PARTNO cards as is.
       4. Output all PARTNO cards in message blocks.

   Normally the PARTNO card is output as is (1).
~3.8.4
4.   Separate tape registers with a space in Punch file:

   Some machines allow the registers in a Control Tape block to be separated
   with leader character(s) in order to make the display easier to read.  Enter
   YES if you want the registers in each block separated with a single leader
   character.
~3.8.5
5.   Separate Macro parameters with a space in Punch file:

   Some block formats are output using a Macro call with parameters.  The
   parameters are typically contained within parenthesis and separated by
   commas.  Enter YES if you want the parameters separated by a single
   space following the comma.  If you enter no, then the Macro parameters
   will be output in a compressed format, without spaces between them.
~3.9.1
1.   Enter Punch Header File (.phf) name:

   Enter the PHF filename that contains the punch file header and trailer
   sections.  Up to 40 characters can be entered, the actual file name
   loaded will be 'pworks_name.phf'.  Leaving this field blank will disable the
   output of a header and/or trailer section within the punch file.  The Punch
   Header File Appendix in the MakePost Reference Manual contains a complete
   description of the PHF file.
~3.9.2
2.   Amount of leader at start of Punch file [inch/mm]:

   Enter the amount of leader you want output to the Punch file following the
   PARTNO card.  The value will be in Inches or Millimeters, depending on the
   UNITS runtime option.
~3.9.3
3.   Amount of leader at end of Punch file [inch/mm]:

   Enter the amount of leader you want output to the Punch file following the
   FINI card.  The value will be in Inches or Millimeters, depending on the
   UNITS runtime option.
~3.9.4
4.   Rewind stop character(s):

   Enter between 0 and 5 characters that define the rewind stop code. The
   rewind stop code will be output automatically by the PARTNO card and at the
   programmers discretion using the TMARK/AUTO command.  If you do not wish a
   rewind stop code at the beginning of the tape, then do not enter any charac-
   ters here.
~3.9.5
5.   Output an EOB with rewind stop code:

   Enter YES if the rewind stop code should be output with an End-of-block code.
   The rewind stop code is usually output in a block by itself, terminated by
   an End-of-block code.
~3.9.6
6.   User defined starting block:

   Enter the number of the User defined starting block you want to be output as
   the first block of the control tape.  A value of 0 will disable this feature.
~3.9.7
7.   Code to output with REWIND card:

   Enter the register and optional value you want output with the REWIND com-
   mand.  You can leave this prompt blank, in which case a code will not be out-
   put with REWIND.  M(30) is usually output with the REWIND command.
~3.9.8
8.   Code to output with FINI card:

   Enter the register and optional value you want output with the FINI card.
   You can leave this prompt blank, in which case a code will not be output
   with FINI.  M(02) is usually output as the End-of-tape code.
~3.9.9
9.   Start of Tape character(s):

   Enter between 0 and 5 characters that define the Start-of-tape mark.
   Usually the rewind stop code will suffice to mark the beginning of the tape,
   though some machines also require a special string at the start of the Con-
   trol Tape.
~3.9.10
10.   End of Tape character(s):

   Enter between 0 and 5 characters that define the End-of-tape mark.  Usually
   the code output with the FINI card will suffice to mark an End-of-tape,
   though some machines also require a special string at the end of the Control
   Tape.
~3.10.1
1.   Enter default mode for BREAK command:

   Enter the mode that will be active at the start of the program for tape
   breaks.  You can enter one of the following modes.

        OFF     -  Disables tape breaks.
        ON      -  Enables tape breaks when a BREAK command is encountered and
                   the tape length is greater than the maximum allowed.
        AUTO    -  Enables tape breaks when the tape length is greater than the
                   user specified maximum.
        TIMES   -  Enables tape breaks when the machining time is greater than
                   the user specified maximum.
        DELTA   -  Enables tape breaks when the linear axes machining distance
                   exceeds the user specified maximum.
        SEQNO   -  Enables tape breaks when the number of output tape blocks
                   exceeds the user specified maximum.

   See the BREAK/mode command for a detailed description of tape breaks.
~3.10.2
2.   Create a new punch file at Tape Breaks:

   Enter YES if you want the Control Tape to be broken up into multiple files
   whenever a tape break sequence is output.  Each new punch file will be for-
   matted the same as the original punch file (PARTNO card output, leading/
   trailing leader, etc.).

   See the BREAK/PCHFILE command for a detailed description on how multiple
   punch files will be output.
~3.10.3
3.   Create a new print file at Tape Breaks:

   Enter YES if you want the print file to be broken up into multiple files
   whenever a tape break sequence is output.  Each new print file will be for-
   matted the same as the original print file.

   See the BREAK/PCHFILE command for a detailed description on how multiple
   punch files will be output.
~3.10.4
4.   Retract the tool at Tape Breaks:

   Enter YES if you want the tool to be automatically retracted during a tape
   break sequence.  The tool will be retracted prior to creating a new punch
   file (if requested) and repositioned to its original position afterwards.
~3.10.5
5.   Issue TMARK after Tape Break:

   Enter YES if you want TMARK command automatically issued after a tape break.
   The first block following a tape break will be an alignment block.  The TMARK
   command will be output just prior to repositioning the tool to its original
   position.
~3.10.6
6.   Default tape length for Tape Breaks:

   Enter the maximum tape length allowed before a tape break sequence will be
   output.  This length should be entered in feet or meters, depending on the
   current input units.  PWORKS will output a tape break sequence whenever the
   tape length exceeds this value.

   This prompt will only be displayed when the default BREAK mode has been set
   to 'ON' or 'AUTO'.
~3.10.7
7.   Default machining time for Tape Breaks:

   Enter the maximum machining time allowed before a tape break sequence will be
   output.  This value should be entered in minutes.  PWORKS will output a tape
   break sequence whenever the machining time exceeds this value.

   This prompt will only be displayed when the default BREAK mode has been set
   to 'TIMES'.
~3.10.8
8.   Default delta linear distance for Tape Breaks:

   Enter the maximum linear machining distance allowed before a tape break
   sequence will be output.  This value should be entered in either inches or
   millimeters, depending on the current input units.  PWORKS will output a tape
   break sequence whenever the machining distance exceeds this value.

   This prompt will only be displayed when the default BREAK mode has been set
   to 'DELTA'.
~3.10.9
9.   Default number of output blocks for Tape Breaks:

   Enter the maximum number of tape blocks that can be output before a tape
   break sequence will be output.  This value should be entered as a whole
   number.  PWORKS will output a tape break sequence whenever the number of
   output tape blocks exceeds this value.

   This prompt will only be displayed when the default BREAK mode has been set
   to 'SEQNO'.
~3.10.10
10.   Default retract rate for Tape Breaks:

   Enter the feed rate at which to retract the tool during a tape break se-
   quence.  A value of 0 will retract the tool at the rapid traverse rate.  This
   value should be entered in Feed per Minute.

   This prompt will only be displayed when tool retracts in a tape break se-
   quence have been enabled.
~3.10.11
11.  Default plunge rate for Tape Breaks:

   Enter the feed rate at which to reposition the tool after it has been re-
   tracted during a tape break sequence.  A value of 0 will plunge the tool at
   the rapid traverse rate.  This value should be entered in Feed per Minute.

   This prompt will only be displayed when tool retracts in a tape break se-
   quence have been enabled.
~4.1
1.   Enter default Print Descriptor File (.pdf) name:

   Enter the PDF file name that you wish to load as the default print file
   description for the current post configuration.  The PDF file name can be up
   to 40 characters long.  The actual file name loaded will be
   'pworks_name.pdf'.  The PDF file must exist when running the PWORKS
   post-processor.  You can change the PDF file in the part program by using the
   MACHIN/PWORKS,OPTION,3 command.  You can also override this number at runtime
   by using the /OPTION:3,n runtime switch.
~4.2
2.   Enter page header record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output each time the print file advances to a new page.  You can enter up to
   2 records.  If you do not enter any record numbers, then the print file will
   not contain any page headers.
~4.3
3.   Enter page trailer record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output prior to the print file advancing to a new page.  You can enter up to
   2 records.  If you do not enter any record numbers, then the print file will
   not contain any page trailers.
~4.4
4.   Enter motion block record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output when the control tape block contains axes movement.  You can enter up
   to 2 records.  If you do not enter any record numbers, then motion blocks
   will not be output to the print file.
~4.5
5.   Enter non-motion block record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output when the control tape block does not contain any axes movement.  You
   can enter up to 2 records.  If you do not enter any record numbers, then non-
   motion blocks will not be output to the print file.
~4.6
6.   Enter INSERT record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output with an INSERT record.  You can enter up to 2 records.  If you do not
   enter any record numbers, then INSERT records will not be output to the print
   file.
~4.7
7.   Enter STOP record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output after a STOP command is processed..  You can enter up to 2 records.
   If you do not enter any record numbers, then the STOP command will not output
   a print file record.
~4.8
8.   Enter OPSTOP record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output after a OPSTOP command is processed..  You can enter up to 2 records.
   If you do not enter any record numbers, then the OPSTOP command will not
   output a print file record.
~4.9
9.   Enter LOADTL record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output after a LOADTL command is processed..  You can enter up to 2 records.
   If you do not enter any record numbers, then the LOADTL command will not
   output a print file record.
~4.10
10.   Enter FINI record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output after the FINI card is processed..  You can enter up to 2 records.  If
   you do not enter any record numbers, then the FINI card will not output a
   print file record.
~4.11
11.   Enter PPRINT record(s):

   Enter the record number(s) from the Print Descriptor File (PDF) that will be
   output whenever a PPRINT command is processed..  You can enter up to 2
   records.  If you do not enter any record numbers, then PPRINTs will not be
   output to the print file.
~5.0
0.   Walk through Motion block parameters.

   This selection will lead you through all of the aspects of defining how
   motion blocks are handled, including the processing of the FROM statement,
   absolute/incremental programming modes, rotary motion output, and axes toler-
   ances.

1.   Special event handling.

   This section defines the FROM statement processing, lathe radius/diameter
   programming, and absolute/incremental programming modes.

2.   Rotary motion.

   This section handles the output of rotary motion, including output point
   adjustments for rotary movement, and absolute/incremental programming modes.
   It can only be entered when at least one rotary axis is supported.

3.   Clamping logic.

   This section handles the clamping and unclamping of the rotary axes.  It can
   only be entered when at least one rotary axis is supported.

4.   Define axes tolerances.

   This section defines the minimum increment allowed for axes output, the 
   maximum departure allowed, and the tolerance for determining when each axis
   should be output.

5.   Default output axes adjustments.

   This section defines the default TRANS/-AXIS and TRANS/SCALE,-AXIS values.

6.   Motion register description.

   This section defines the codes for contouring motion, absolute/incremental
   modes and the user defined blocks for the 1st motion block and non-motion
   blocks.

7.   Exit

   Exits the Motion block parameters section and returns you to the previous
   section.
~5.1.1
1.   Specify handling of FROM statment:

   Enter the number that corresponds to the way you want to handle the process-
   ing of the FROM statement.

       1 = FROM is not output and will force output of all axes.
       2 = FROM is not output and will set the current values for each axis.
       3 = FROM is treated the same as GOTO.

   Normally the FROM statement sets the current axes position (2).
~5.1.2
2.   The X-axis is input as Radius/Diameter:

   This prompt will only be displayed for lathes.  Enter either RADIUS or
   DIAMETER, depending on how the input parts will be programmed, this will
   usually be RADIUS.
~5.1.3
3.   The X-axis is output as Radius/Diameter:

   This prompt will only be displayed for lathes.  Enter either RADIUS or
   DIAMETER, depending on how the machine expects to see the X-axis.  PWORKS
   will double the X-axis values when the part is programmed as radius values
   but output as diameter values.
~5.1.4
4.   Output the X-axis as negative positions:

   Enter YES if the output coordinates should be mirrored through the X-axis,
   causing the X-axis to be output as negative positions.  This question will
   only be asked when a lathe is being defined.
~5.1.5
5.   The part is programmed in XY and should be output in ZX:

   This prompt will only be displayed for lathes.  Enter YES if the input
   coordinates are programmed in the XY-plane.  This is the normal manner for
   programming lathes.  Enter NO if the input coordinates are programmed in the
   ZX-plane.  The output points will always be in the ZX-plane.
~5.1.6
6.   Default positioning mode [ABS/INCR]:

   Enter the default positioning mode, either ABS (absolute positions) or INCR
   (incremental distances) for the output axes.  The positioning mode can be
   changed during the part program by using the MODE/INCR command.
~5.1.7
7.   Force current position when changing from INCR to ABS mode:

   Enter the number that corresponds to the way you want to handle the change
   from incremental to absolute output modes.

       1 = Do not output the current position.
       2 = Output the current axes position immediately.
       3 = Force output of all axes on next motion block.

   It is sometimes desirable to force the motion block following a change to
   absolute programming to include all of the supported axes positions.  If
   this is desirable, enter either 2 or 3.
~5.1.8
8.   Force output of all axes when one is output:

   Some programmers like to have all of the machining axes output on each
   motion block in case the NC program has to be restarted on the machine at
   a random block in the program.  Enter Yes at this prompt if you want all of
   the machining axes output in every motion block.
~5.2.1
1.   Use tool axis vector to control rotary axis positions:

   Enter YES when the part is defined in one coordinate system and the tool axis
   should be used to control the position of the rotary axes.

   If the part geometry is defined in all planes of the rotary axes movement and
   only ROTABL commands will be used to position the rotary axes, then enter NO.
~5.2.2
2.   Adjust input points for rotary table(s):

   Enter YES when the part is defined in one coordinate system and the tool axis
   is used to move the rotary axes.  In this case, the input points will be
   adjusted according to the table rotations prior to being output.

   If the part geometry is defined in all planes of rotary table movement and
   the ROTABL command will be used to position the rotary table(s), then enter
   NO.

   This prompt will only be displayed when at least one of the rotary axes is a
   table.  
~5.2.3
3.   Adjust input points for rotary heads(s):

   When the milling machine contains a rotary head, the output points are
   usually the location of a rotary pivot point that does not move when the
   rotary head moves.  Enter YES if you want to adjust the input points to lie
   on this set position at the machine.  The Machine Configuration section and
   the ROTABL/ORIGIN command can be used to define the location of the pivot
   point.

   This prompt will only be displayed when at least one of the rotary axes is a
   head.
~5.2.4
4.   Force output of all rotary axes when one is output:

   Enter YES if all rotary axes must be output in a block whenever a single
   rotary axis would be output.  Most machine controls only require that each
   axis that actually changes be output in a block.  In this case enter NO at
   this prompt.
~5.2.5
5.   Absolute/Incremental output for Rotary axis #1:

   Enter the number that corresponds to the output format for Rotary axis #1.

       1. Output in current mode.
       2. Output is always absolute.
       3. Output is always incremental.

   Some machines, though they support both absolute and incremental modes,
   require that the rotary axes be output in only one mode.  When this is the
   case, it is usually the absolute mode.

   Enter 1 when the machine will allow this rotary axis to be output in both
   absolute and incremental modes, as requested by the MODE/INCR command.
~5.2.6
6.   Absolute/Incremental output for Rotary axis #2:

   Enter the number that corresponds to the output format for Rotary axis #2.

       1. Output in current mode.
       2. Output is always absolute.
       3. Output is always incremental.

   Some machines, though they support both absolute and incremental modes,
   require that the rotary axes be output in only one mode.  When this is the
   case, it is usually the absolute mode.

   Enter 1 when the machine will allow this rotary axis to be output in both
   absolute and incremental modes, as requested by the MODE/INCR command.
~5.2.7
7.   Absolute/Incremental output for Rotary axis #3:

   Enter the number that corresponds to the output format for Rotary axis #3.

       1. Output in current mode.
       2. Output is always absolute.
       3. Output is always incremental.

   Some machines, though they support both absolute and incremental modes,
   require that the rotary axes be output in only one mode.  When this is the
   case, it is usually the absolute mode.

   Enter 1 when the machine will allow this rotary axis to be output in both
   absolute and incremental modes, as requested by the MODE/INCR command.
~5.2.8
8.   Absolute/Incremental output for Rotary axis #4:

   Enter the number that corresponds to the output format for Rotary axis #4.

       1. Output in current mode.
       2. Output is always absolute.
       3. Output is always incremental.

   Some machines, though they support both absolute and incremental modes,
   require that the rotary axes be output in only one mode.  When this is the
   case, it is usually the absolute mode.

   Enter 1 when the machine will allow this rotary axis to be output in both
   absolute and incremental modes, as requested by the MODE/INCR command.
~5.2.9
9.   Enter value for a CCLW move to 0 degrees for the rotary axes:

   This prompt will only be displayed when at least one rotary axis is output on
   a rotary scale, since a rotary scale uses the sign (+-) of the number to
   determine the direction the axis moves.

   When a rotary axis moves to 0 degrees in a counter-clockwise direction the
   value output is -0.  Some machines are not able to determine the difference
   between a negative zero and a positive zero.  For these machines, enter the
   value to output for a CCLW move to 0 degrees.  This will usually be 360.
~5.2.10
10.  Enter value for a CLW move to 0 degrees for the rotary axes:

   This prompt will only be displayed when at least one rotary axis is output on
   a rotary scale, since a rotary scale uses the sign (+-) of the number to
   determine the direction the axis moves.

   When a rotary axis moves to 0 degrees in a clockwise direction the typical
   value output is 360.  Some machines do not support a rotary angle value of
   360 degrees.  These machines usually require a value of 0 degrees.
~5.2.11
11.   Enter rotary axes size change code:

   Enter the register and its value that defines a "rotary axis size change"
   block.  The circumference of the rotary axes is usually 360 degrees and can
   not be changed.  Though, some machines, such as the Bostomatic, accept the
   rotary axis input as a percentage of its programmed circumference.  These
   machines will usually allow you to change the programmed rotary axes cir-
   cumference.

   Enter a size change code here only if your machine supports circumference
   rotary axes programming.  G(25) is normally used.  You can also use the
   ROTABL/SIZE command to change the size of the rotary axes.
~5.2.12
12.   Output rotary axes size change as ...:

   Enter the number that corresponds to the units in which the machine wants
   to see rotary size changes from the following units.

        1. Radius.
        2. Diameter.
        3. Circumference.

   This prompt will only affect the value output to the control tape when
   changing the programmed size of a rotary axis, the ROTABL/SIZE command will
   still expect to see the new size entered as the circumference.
~5.2.13
13.   Enter register for Rotary axis #1 size change:

   Enter the register that will be used to output the newly programmed size for
   Rotary axis #1.  This register will contain the new size and will be output
   with the rotary axes size change code specified previously.
~5.2.14
14.   Enter register for Rotary axis #2 size change:

   Enter the register that will be used to output the newly programmed size for
   Rotary axis #2.  This register will contain the new size and will be output
   with the rotary axes size change code specified previously.
~5.2.15
15.   Enter register for Rotary axis #3 size change:

   Enter the register that will be used to output the newly programmed size for
   Rotary axis #3.  This register will contain the new size and will be output
   with the rotary axes size change code specified previously.
~5.2.16
16.   Enter register for Rotary axis #4 size change:

   Enter the register that will be used to output the newly programmed size for
   Rotary axis #4.  This register will contain the new size and will be output
   with the rotary axes size change code specified previously.
~5.2.17
17.   Enter CLW direction code for Rotary axis #1:

   Some machine controls require that a code be output with the rotary axis
   position in order to specify the rotation direction.  If this control
   requires a separate rotary direction code, then enter the register and its
   value here for moving Rotary axis #1 in the clockwise direction.
~5.2.18
18.   Enter CCLW direction code for Rotary axis #1:

   Some machine controls require that a code be output with the rotary axis
   position in order to specify the rotation direction.  If this control
   requires a separate rotary direction code, then enter the register and its
   value here for moving Rotary axis #1 in the counter-clockwise direction.
~5.2.19
19.   Enter CLW direction code for Rotary axis #2:

   Some machine controls require that a code be output with the rotary axis
   position in order to specify the rotation direction.  If this control
   requires a separate rotary direction code, then enter the register and its
   value here for moving Rotary axis #2 in the clockwise direction.
~5.2.20
20.   Enter CCLW direction code for Rotary axis #2:

   Some machine controls require that a code be output with the rotary axis
   position in order to specify the rotation direction.  If this control
   requires a separate rotary direction code, then enter the register and its
   value here for moving Rotary axis #2 in the counter-clockwise direction.
~5.2.21
21.   Enter CLW direction code for Rotary axis #3:

   Some machine controls require that a code be output with the rotary axis
   position in order to specify the rotation direction.  If this control
   requires a separate rotary direction code, then enter the register and its
   value here for moving Rotary axis #3 in the clockwise direction.
~5.2.22
22.   Enter CCLW direction code for Rotary axis #3:

   Some machine controls require that a code be output with the rotary axis
   position in order to specify the rotation direction.  If this control
   requires a separate rotary direction code, then enter the register and its
   value here for moving Rotary axis #3 in the counter-clockwise direction.
~5.2.23
23.   Enter CLW direction code for Rotary axis #4:

   Some machine controls require that a code be output with the rotary axis
   position in order to specify the rotation direction.  If this control
   requires a separate rotary direction code, then enter the register and its
   value here for moving Rotary axis #4 in the clockwise direction.
~5.2.24
24.   Enter CCLW direction code for Rotary axis #4:

   Some machine controls require that a code be output with the rotary axis
   position in order to specify the rotation direction.  If this control
   requires a separate rotary direction code, then enter the register and its
   value here for moving Rotary axis #4 in the counter-clockwise direction.
~5.3.1
1.   Enter clamping logic for rotary axes:

   Enter the number that corresponds to logic required to automatically clamp
   and unclamp the rotary axes.

       1. Clamping/unclamping of rotary axes is not necessary.
       2. Each rotary axis should be unclamped prior to movement and
          immediately clamped after each movement.
       3. Each rotary axis should be unclamped prior to movement and
          clamped prior to the specific rotary axis not moving.
       4. Each rotary axis should be unclamped prior to any rotary output
          and clamped prior to pure linear output with no rotary output.
       5. Each rotary axis should be unclamped prior to any rotary movement
          and clamped prior to pure linear axes movement (no rotary movement).

   Some machines require that rotary axes be clamped when they are not moving
   in order to maintain a constant position.  PWORKS has the ability to
   automatically unclamp the rotary axis prior to movement and to clamp it when
   there is no movement.  Number 3 is the most common type of clamping logic
   used when clamping of the rotary axes is necessary.

   The difference between numbers 4 and 5 is that selecting number 4 will
   check for rotary axis output on a block and does not count whether there is
   actual movement or not.  Selecting number 5 requires that there is actual
   rotary axis movement in order to trigger the clamping/unclamping logic.

   You can also manually clamp and unclamp the rotary axes using the CLAMP
   command.
~5.3.2
2.    Enter clamping code for Rotary axis #1:

   Enter the register and value required to clamp Rotary axis #1, for example,
   M(11).  This prompt will only be displayed when automatic clamping of the
   rotary axes has been enabled.
~5.3.3
3.    Enter unclamping code for Rotary axis #1:

   Enter the register and value required to unclamp Rotary axis #1, for example,
   M(10).  This prompt will only be displayed when automatic clamping of the
   rotary axes has been enabled.
~5.3.4
4.    Enter clamping code for Rotary axis #2:

   Enter the register and value required to clamp Rotary axis #2, for example,
   M(11).  This prompt will only be displayed when automatic clamping of the
   rotary axes has been enabled.
~5.3.5
5.    Enter unclamping code for Rotary axis #2:

   Enter the register and value required to unclamp Rotary axis #2, for example,
   M(10).  This prompt will only be displayed when automatic clamping of the
   rotary axes has been enabled.
~5.3.6
6.    Enter clamping code for Rotary axis #3:

   Enter the register and value required to clamp Rotary axis #3, for example,
   M(11).  This prompt will only be displayed when automatic clamping of the
   rotary axes has been enabled.
~5.3.7
7.    Enter unclamping code for Rotary axis #3:

   Enter the register and value required to unclamp Rotary axis #3.  Example,
   M(10).  This prompt will only be displayed when automatic clamping of the
   rotary axes has been enabled.
~5.3.8
8.    Enter clamping code for Rotary axis #4:

   Enter the register and value required to clamp Rotary axis #4.  Example,
   M(11).  This prompt will only be displayed when automatic clamping of the
   rotary axes has been enabled.
~5.3.9
9.    Enter unclamping code for Rotary axis #4:

   Enter the register and value required to unclamp Rotary axis #4.  Example,
   M(10).  This prompt will only be displayed when automatic clamping of the
   rotary axes has been enabled.
~5.3.10
10.   Clamping codes should be output in a block by themselves:

   Enter YES if the codes required to clamp and unclamp the rotary axes should
   be output in a block by themselves.  Otherwise, they will be output on the
   motion block that caused the automatic clamping/unclamping.  This prompt
   will only be displayed when automatic clamping of the rotary axes has been
   enabled.
~5.3.11
11.   User defined block for clamping Rotary axis #1:

   Enter the number of the User defined block you want to be output when Rotary
   axis #1 is clamped.  A value of 0 will disable this feature.  This prompt
   will only be displayed when automatic clamping of the rotary axes has been
   enabled.
~5.3.12
12.   User defined block for unclamping Rotary axis #1:

   Enter the number of the User defined block you want to be output when Rotary
   axis #1 is unclamped.  A value of 0 will disable this feature.  This prompt
   will only be displayed when automatic clamping of the rotary axes has been
   enabled.
~5.3.13
13.   User defined block for clamping Rotary axis #2:

   Enter the number of the User defined block you want to be output when Rotary
   axis #2 is clamped.  A value of 0 will disable this feature.  This prompt
   will only be displayed when automatic clamping of the rotary axes has been
   enabled.
~5.3.14
14.   User defined block for unclamping Rotary axis #2:

   Enter the number of the User defined block you want to be output when Rotary
   axis #2 is unclamped.  A value of 0 will disable this feature.  This prompt
   will only be displayed when automatic clamping of the rotary axes has been
   enabled.
~5.3.15
15.   User defined block for clamping Rotary axis #3:

   Enter the number of the User defined block you want to be output when Rotary
   axis #3 is clamped.  A value of 0 will disable this feature.  This prompt
   will only be displayed when automatic clamping of the rotary axes has been
   enabled.
~5.3.16
16.   User defined block for unclamping Rotary axis #3:

   Enter the number of the User defined block you want to be output when Rotary
   axis #3 is unclamped.  A value of 0 will disable this feature.  This prompt
   will only be displayed when automatic clamping of the rotary axes has been
   enabled.
~5.3.17
17.   User defined block for clamping Rotary axis #4:

   Enter the number of the User defined block you want to be output when Rotary
   axis #4 is clamped.  A value of 0 will disable this feature.  This prompt
   will only be displayed when automatic clamping of the rotary axes has been
   enabled.
~5.3.18
18.   User defined block for unclamping Rotary axis #4:

   Enter the number of the User defined block you want to be output when Rotary
   axis #4 is unclamped.  A value of 0 will disable this feature.  This prompt
   will only be displayed when automatic clamping of the rotary axes has been
   enabled.
~5.4.1
1.   Minimum linear increment allowed for Primary X-axis movement:

   Enter the minimum delta movement allowed for the primary X-axis.  All output
   for the primary X-axis will be on an even increment.  For example, if .0002
   is the minimum increment allowed and .0005 is requested to be output, then
   the actual output value may be .0004 or .0006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 4 digits to the right of
   the decimal point has been specified and the minimum increment is .0001, then
   enter 0.
~5.4.2
2.   Minimum linear increment allowed for Secondary X-axis movement:

   Enter the minimum delta movement allowed for the secondary X-axis.  All
   output for the secondary X-axis will be on an even increment.  For example,
   if .0002 is the minimum increment allowed and .0005 is requested to be
   output, then the actual output value may be .0004 or .0006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 4 digits to the right of
   the decimal point has been specified and the minimum increment is .0001, then
   enter 0.
~5.4.3
3.   Minimum linear increment allowed for Primary Y-axis movement:

   Enter the minimum delta movement allowed for the primary Y-axis.  All output
   for the primary Y-axis will be on an even increment.  For example, if .0002
   is the minimum increment allowed and .0005 is requested to be output, then
   the actual output value may be .0004 or .0006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 4 digits to the right of
   the decimal point has been specified and the minimum increment is .0001, then
   enter 0.
~5.4.4
4.   Minimum linear increment allowed for Secondary Y-axis movement:

   Enter the minimum delta movement allowed for the secondary Y-axis.  All
   output for the secondary Y-axis will be on an even increment.  For example,
   if .0002 is the minimum increment allowed and .0005 is requested to be
   output, then the actual output value may be .0004 or .0006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 4 digits to the right of
   the decimal point has been specified and the minimum increment is .0001, then
   enter 0.
~5.4.5
5.   Minimum linear increment allowed for Primary Z-axis movement:

   Enter the minimum delta movement allowed for the primary Z-axis.  All output
   for the primary Z-axis will be on an even increment.  For example, if .0002
   is the minimum increment allowed and .0005 is requested to be output, then
   the actual output value may be .0004 or .0006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 4 digits to the right of
   the decimal point has been specified and the minimum increment is .0001, then
   enter 0.
~5.4.6
6.   Minimum linear increment allowed for Secondary Z-axis movement:

   Enter the minimum delta movement allowed for the secondary Z-axis.  All
   output for the secondary Z-axis will be on an even increment.  For example,
   if .0002 is the minimum increment allowed and .0005 is requested to be
   output, then the actual output value may be .0004 or .0006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 4 digits to the right of
   the decimal point has been specified and the minimum increment is .0001, then
   enter 0.
~5.4.7
7.   Minimum linear increment allowed for Rotary axis #1:

   Enter the minimum delta movement allowed for Rotary axis #1.  All output
   for this axis will be on an even increment.  For example, if .002 is the
   minimum increment allowed and .005 is requested to be output, then the
   actual output value may be .004 or .006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 3 digits to the right of
   the decimal point has been specified and the minimum increment is .001, then
   enter 0.
~5.4.8
8.   Minimum linear increment allowed for Rotary axis #2:

   Enter the minimum delta movement allowed for Rotary axis #2.  All output
   for this axis will be on an even increment.  For example, if .002 is the
   minimum increment allowed and .005 is requested to be output, then the
   actual output value may be .004 or .006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 3 digits to the right of
   the decimal point has been specified and the minimum increment is .001, then
   enter 0.
~5.4.9
9.   Minimum linear increment allowed for Rotary axis #3:

   Enter the minimum delta movement allowed for Rotary axis #3.  All output
   for this axis will be on an even increment.  For example, if .002 is the
   minimum increment allowed and .005 is requested to be output, then the
   actual output value may be .004 or .006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 3 digits to the right of
   the decimal point has been specified and the minimum increment is .001, then
   enter 0.
~5.4.10
10.   Minimum linear increment allowed for Rotary axis #4:

   Enter the minimum delta movement allowed for Rotary axis #4.  All output
   for this axis will be on an even increment.  For example, if .002 is the
   minimum increment allowed and .005 is requested to be output, then the
   actual output value may be .004 or .006.

   Enter a value of zero if the minimum increment corresponds to the accuracy
   specified for the axis' register.  For example, if 3 digits to the right of
   the decimal point has been specified and the minimum increment is .001, then
   enter 0.
~5.4.11
11.   Tolerance for determining output on Primary X-axis:

   Enter the tolerance for determining when the primary X-axis should be output.
   The primary X-axis will not be output until the delta movement is greater
   than or equal to the tolerance entered.  This feature is useful on multi-axis
   machines where a slight fluctuation in the tool axis will generate output
   positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.4.12
12.   Tolerance for determining output on Secondary X-axis:

   Enter the tolerance for determining when the secondary X-axis should be
   output.  The secondary X-axis will not be output until the delta movement is
   greater than or equal to the tolerance entered.  This feature is useful on
   multi-axis machines where a slight fluctuation in the tool axis will generate
   output positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.4.13
13.   Tolerance for determining output on Primary Y-axis:

   Enter the tolerance for determining when the primary Y-axis should be output.
   The primary Y-axis will not be output until the delta movement is greater
   than or equal to the tolerance entered.  This feature is useful on multi-axis
   machines where a slight fluctuation in the tool axis will generate output
   positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.4.14
14.   Tolerance for determining output on Secondary Y-axis:

   Enter the tolerance for determining when the secondary Y-axis should be
   output.  The secondary Y-axis will not be output until the delta movement is
   greater than or equal to the tolerance entered.  This feature is useful on
   multi-axis machines where a slight fluctuation in the tool axis will generate
   output positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.4.15
15.   Tolerance for determining output on Primary Z-axis:

   Enter the tolerance for determining when the primary Z-axis should be output.
   The primary Z-axis will not be output until the delta movement is greater
   than or equal to the tolerance entered.  This feature is useful on multi-axis
   machines where a slight fluctuation in the tool axis will generate output
   positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.4.16
16.   Tolerance for determining output on Secondary Z-axis:

   Enter the tolerance for determining when the secondary Z-axis should be
   output.  The secondary Z-axis will not be output until the delta movement is
   greater than or equal to the tolerance entered.  This feature is useful on
   multi-axis machines where a slight fluctuation in the tool axis will generate
   output positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.4.17
17.   Tolerance for determining output on Rotary axis #1:

   Enter the tolerance for determining when Rotary axis #1 should be output.
   Rotary axis #1 will not be output until the delta movement is greater than
   or equal to the tolerance entered.  This feature is useful on multi-axis
   machines where a slight fluctuation in the tool axis will generate output
   positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.4.18
18.   Tolerance for determining output on Rotary axis #2:

   Enter the tolerance for determining when Rotary axis #2 should be output.
   Rotary axis #2 will not be output until the delta movement is greater than
   or equal to the tolerance entered.  This feature is useful on multi-axis
   machines where a slight fluctuation in the tool axis will generate output
   positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.4.19
19.   Tolerance for determining output on Rotary axis #3:

   Enter the tolerance for determining when Rotary axis #3 should be output.
   Rotary axis #3 will not be output until the delta movement is greater than
   or equal to the tolerance entered.  This feature is useful on multi-axis
   machines where a slight fluctuation in the tool axis will generate output
   positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.4.20
20.   Tolerance for determining output on Rotary axis #4:

   Enter the tolerance for determining when Rotary axis #4 should be output.
   Rotary axis #4 will not be output until the delta movement is greater than
   or equal to the tolerance entered.  This feature is useful on multi-axis
   machines where a slight fluctuation in the tool axis will generate output
   positions that are close but not exactly at the same location.

   You can use the PPTOL command to change the tolerance values within the part
   program.
~5.5.1
1.   Default TRANS/-AXIS for Primary X-axis:

   Enter a value which you want to be added to the primary X-axis prior to being
   output.  This value will be added to the axis until a TRANS/XAXIS,1 command
   is encountered in the program.  This value is normally 0.
~5.5.2
2.   Default TRANS/-AXIS for Secondary X-axis:

   Enter a value which you want to be added to the secondary X-axis prior to
   being output.  This value will be added to the axis until a TRANS/XAXIS,2
   command is encountered in the program.  This value is normally 0.
~5.5.3
3.   Default TRANS/-AXIS for Primary Y-axis:

   Enter a value which you want to be added to the primary Y-axis prior to being
   output.  This value will be added to the axis until a TRANS/YAXIS,1 command
   is encountered in the program.  This value is normally 0.
~5.5.4
4.   Default TRANS/-AXIS for Secondary Y-axis:

   Enter a value which you want to be added to the secondary Y-axis prior to
   being output.  This value will be added to the axis until a TRANS/YAXIS,2
   command is encountered in the program.  This value is normally 0.
~5.5.5
5.   Default TRANS/-AXIS for Primary Z-axis:

   Enter a value which you want to be added to the primary Z-axis prior to being
   output.  This value will be added to the axis until a TRANS/ZAXIS,1 command
   is encountered in the program.  This value is normally 0.
~5.5.6
6.   Default TRANS/-AXIS for Secondary Z-axis:

   Enter a value which you want to be added to the secondary Z-axis prior to
   being output.  This value will be added to the axis until a TRANS/ZAXIS,2
   command is encountered in the program.  This value is normally 0.
~5.5.7
7.   Default TRANS/-AXIS for Rotary axis #1:

   Enter a value which you want to be added to Rotary axis #1 prior to being
   output.  This value will be added to the axis until a TRANS/AXIS,1 command
   is encountered in the program.  This value is normally 0.
~5.5.8
8.   Default TRANS/-AXIS for Rotary axis #2:

   Enter a value which you want to be added to Rotary axis #2 prior to being
   output.  This value will be added to the axis until a TRANS/AXIS,2 command
   is encountered in the program.  This value is normally 0.
~5.5.9
9.   Default TRANS/-AXIS for Rotary axis #3:

   Enter a value which you want to be added to Rotary axis #3 prior to being
   output.  This value will be added to the axis until a TRANS/AXIS,3 command
   is encountered in the program.  This value is normally 0.
~5.5.10
10.   Default TRANS/-AXIS for Rotary axis #4:

   Enter a value which you want to be added to Rotary axis #4 prior to being
   output.  This value will be added to the axis until a TRANS/AXIS,4 command
   is encountered in the program.  This value is normally 0.
~5.5.11
11.   Default TRANS/SCALE,-AXIS for Primary X-axis:

   Enter a scale factor to multiply the primary X-axis by prior to being output.
   This scale will be applied to the axis until a TRANS/SCALE,XAXIS,1 command is
   encountered in the program.  This value is normally 1.
~5.5.12
12.   Default TRANS/SCALE,-AXIS for Secondary X-axis:

   Enter a scale factor to multiply the secondary X-axis by prior to being
   output.  This scale will be applied to the axis until a TRANS/SCALE,XAXIS,2
   command is encountered in the program.  This value is normally 1.
~5.5.13
13.   Default TRANS/SCALE,-AXIS for Primary Y-axis:

   Enter a scale factor to multiply the primary Y-axis by prior to being output.
   This scale will be applied to the axis until a TRANS/SCALE,YAXIS,1 command is
   encountered in the program.  This value is normally 1.
~5.5.14
14.   Default TRANS/SCALE,-AXIS for Secondary Y-axis:

   Enter a scale factor to multiply the secondary Y-axis by prior to being
   output.  This scale will be applied to the axis until a TRANS/SCALE,YAXIS,2
   command is encountered in the program.  This value is normally 1.
~5.5.15
15.   Default TRANS/SCALE,-AXIS for Primary Z-axis:

   Enter a scale factor to multiply the primary Z-axis by prior to being output.
   This scale will be applied to the axis until a TRANS/SCALE,ZAXIS,1 command is
   encountered in the program.  This value is normally 1.
~5.5.16
16.   Default TRANS/SCALE,-AXIS for Secondary Z-axis:

   Enter a scale factor to multiply the secondary Z-axis by prior to being
   output.  This scale will be applied to the axis until a TRANS/SCALE,ZAXIS,2
   command is encountered in the program.  This value is normally 1.
~5.5.17
17.   Default TRANS/SCALE,-AXIS for Rotary axis #1:

   Enter a scale factor to multiply Rotary axis #1 by prior to being output.
   This scale will be applied to the axis until a TRANS/SCALE,AXIS,1 command is
   encountered in the program.  This value is normally 1.
~5.5.18
18.   Default TRANS/SCALE,-AXIS for Rotary axis #2:

   Enter a scale factor to multiply Rotary axis #2 by prior to being output.
   This scale will be applied to the axis until a TRANS/SCALE,AXIS,2 command is
   encountered in the program.  This value is normally 1.
~5.5.19
19.   Default TRANS/SCALE,-AXIS for Rotary axis #3:

   Enter a scale factor to multiply Rotary axis #3 by prior to being output.
   This scale will be applied to the axis until a TRANS/SCALE,AXIS,3 command is
   encountered in the program.  This value is normally 1.
~5.5.20
20.   Default TRANS/SCALE,-AXIS for Rotary axis #4:

   Enter a scale factor to multiply Rotary axis #4 by prior to being output.
   This scale will be applied to the axis until a TRANS/SCALE,AXIS,4 command is
   encountered in the program.  This value is normally 1.
~5.6.1
1.   Linear motion code:

   Enter the register and its value for setting linear interpolation mode.  The
   linear motion code is usually G(01).
~5.6.2
2.   Linear motion code in LMFP mode:

   Enter the register and its value for setting linear interpolation mode
   while in polar interpolation on a Mill/Turn machine.  This code is usually
   D(11).
~5.6.3
3.   Linear motion code in LMDP mode:

   Enter the register and its value for setting linear interpolation mode
   while in cylindrical interpolation on a Mill/Turn machine.  This code is
   usually D(21).
~5.6.4
4.   Absolute positioning code:

   Enter the register and its value for setting absolute positioning mode.
   Normally, the absolute positioning code for machines which support both
   absolute and incremental modes is G(90).  If you do not enter a register,
   then no code will be output when switching to absolute mode.
~5.6.5
5.   Incremental positioning code:

   Enter the register and its value for setting incremental positioning mode.
   Normally, the incremental positioning code for machines which support both
   absolute and incremental modes is G(91).  If you do not enter a register,
   then no code will be output when switching to incremental mode.
~5.6.6
6.   Code(s) for setting major tool axis to XYPLAN:

   Enter the code(s) that will be output when the MODE/TOOL,XYPLAN command is
   used.  The MODE/TOOL,XYPLAN sets the primary (spindle) tool axis to 0,0,1.
   You can enter anywhere from 0 to 3 codes.

   Example:
                G(17),M(53)
~5.6.7
7.   Code(s) for setting major tool axis to ZXPLAN:

   Enter the code(s) that will be output when the MODE/TOOL,ZXPLAN command is
   used.  The MODE/TOOL,ZXPLAN sets the primary (spindle) tool axis to 0,1,0.
   You can enter anywhere from 0 to 3 codes.

   Example:
                G(18),M(54)
~5.6.8
8.   Code(s) for setting major tool axis to YZPLAN:

   Enter the code(s) that will be output when the MODE/TOOL,YZPLAN command is
   used.  The MODE/TOOL,YZPLAN sets the primary (spindle) tool axis to 1,0,0.
   You can enter anywhere from 0 to 3 codes.

   Example:
                G(19),M(54)
~5.6.9
9.   LMFP/LMDP mode minimum span register:

   Enter the register to use for the minimum span length wile in either polar
   interpolation or cylindrical interpolation mode on a Mill/Turn type machine.
   This span length is used to keep the tool within tolerance of the part when
   the rotary axis is used to satisy the Y-axis on machines which do not have a
   physical Y-axis.  The L register is usually used.
~5.6.10
10.   Enable Mill/Turn Milling mode code:

   Enter the code that chages the mode on a Mill/Turn machine from lathe
   programming to milling.  This is the same code which enables the spindle
   as a rotary axis and is usually M(19).
~5.6.11
11.   Disable Mill/Turn Milling mode code:

   Enter the code that chages the mode on a Mill/Turn machine from milling to
   lathe programming.  This code disables the spindle from being programmed as
   a rotary axis and is usually M(20).
~5.6.12
12.   Enter Mill/Turn Polar Interpolation code:

   Enter the code which enables the polar interpolation feature on a Mill/Turn
   type machine.  Polar interpolation is a simplified way to program a milling
   operation on the face of the part.  This code is usually G(79).
~5.6.13
13.  Enter Mill/Turn Cylindrical Interpolation code:

   Enter the code which enables the cylindrical interpolation feature on a
   Mill/Turn type machine.  Cylindrical interpolation is a simplified way to
   mill grooves on the diameter of the part.  This code is usually G(79).
~5.6.14
14.  Register for circle unit in Cylindrical Interpolation:

   On a Mill/Turn machine which supports cylindrical interpolation, it is
   sometimes required for the program to define the unit length of the part
   circumference.  This register will contain the arc length of one degreee
   around the circumference of the part.  If your machine does not require this
   value, then leave this prompt blank.
~5.6.15
15.  Is cylinder axis code required in LMDP enable/disable block:

   Enter YES if the rotary axis address should be output when entering and
   exiting Cylindrical Interpolation mode.  The rotary axis address will be
   output in the block containing both the LMDP enable code and the block
   canceling LMDP mode.
~5.6.16
16.  Is cylinder axis value required in LMDP enable/disable block:

   Most machines require only the rotary axis address (C,A,B,etc.) to be
   output on an LMDP enable/disable block.  If your machine does not need a
   value to be output with this address, then enter NO at this prompt, otherwise
   enter YES.  The value output with this address will be the value currently
   stored in this register.
~5.6.17
17.   User defined 1st motion block:

   Enter the number of the User defined block you want to be output as the first
   motion block of the Control Tape.  Usually this will at least contain all
   axis positions and the initial feedrate.  A value of 0 will disable this
   feature.
~5.6.18
18.   User defined non-motion block:

   Enter the number of the User defined block you want to be output for each
   non-motion block.  For example, SPINDL, STOP and FINI blocks.  A value of 0
   will disable this feature.
~6.0
0.  Walk through Circular/Spline interpolation

   This selection will lead you through all of the aspects of defining circular
   interpolation output, including format, radius limits, helical interpolation,
   and register descriptions.  It will also lead you through the definition of
   spline interpolation.

1.   Circular interpolation format.

   This section defines the output format for circular interpolation, absolute
   center point, incremental distances to center point, polar coordinates, etc.
   It also includes circular boundary definitions.

2.   Circular interpolation tolerances.

   This section defines the minimum and maximum radius allowed, the minimum
   amount of linear movement to output as circular interpolation and whether
   or not to adjust the final point on a circular move to lie exactly on the
   circle.

3.   Helical interpolation format.

   This section defines the output format for helical interpolation and whether
   the machine supports helical interpolation.

4.   Circular interpolation registers.

   This section defines the registers to use for all codes output for circular
   interpolation blocks, including the plane selection codes.

5.  Spline interpolation format

   This section defines the output format for spline interpolation, including
   controller support, tolerances, and register definitions.

6.   Exit

   Exits the Circular interpolation section and returns you to the previous
   section.
~6.1.1
1.   Does the machine controller support circular interpolation:

   Enter YES if the machine will accept a single block which will generate
   circular movement on the machine.  If you answer NO, then all input circular
   records will be output as linear moves.
~6.1.2
2.   Enter format of circular interpolation:

   Enter the number that corresponds to the format of the circular interpolation
   block the machine expects to see.

   1 = The absolute center point position of the circle will be output in a
       circular interpolation block.

   2 = The signed incremental distances to the center point of the circle, for
       each linear axis that moves, will be output in a circular interpolation
       block.

   3 = The unsigned incremental distances to the center point of the circle, for
       each linear axis that moves, will be output in a circular interpolation
       block.

   4 = When in absolute mode, the absolute center point of the circle will be
       output.  When in incremental mode, the signed incremental distances to
       the center of the circle will be output.

   5 = When in absolute mode, the absolute center point of the circle will be
       output.  When in incremental mode, the unsigned incremental distances to
       the center of the circle will be output.

   6 = The radius of the circle will be output in a circular interpolation
       block.

   7 = Both the linear move prior to and the circular interpolation block will
       be output as polar coordinates, including the center point of the circle
       and the angular position of the move.

   8 = The absolute center point of the circle will be output in one block, with
       the ending point of the arc output in the following block.

   9 = The absolute center point of the circle and the circle's radius will be
       output in a circular interpolation block.

  10 = The conversational polar coordinate format of circular interpolation
       consists of two blocks of output per circular record.  The first block
       contains the absolute coordinates of the circle center and the second
       block contains the delta angle of the circular move and the circular
       direction.
~6.1.3
3.   Enter format of circular interpolation in LMFP/LMDP mode:

   Enter the number that corresponds to the format of the circular interpolation
   block the Mill/Turn machine expects to see when in either polar interpolation
   or cylindrical interpolation mode.

   1 = The absolute center point position of the circle will be output in a
       circular interpolation block.

   2 = The signed incremental distances to the center point of the circle, for
       each linear axis that moves, will be output in a circular interpolation
       block.

   3 = The unsigned incremental distances to the center point of the circle, for
       each linear axis that moves, will be output in a circular interpolation
       block.

   4 = When in absolute mode, the absolute center point of the circle will be
       output.  When in incremental mode, the signed incremental distances to
       the center of the circle will be output.

   5 = When in absolute mode, the absolute center point of the circle will be
       output.  When in incremental mode, the unsigned incremental distances to
       the center of the circle will be output.

   6 = The radius of the circle will be output in a circular interpolation
       block.

   7 = Both the linear move prior to and the circular interpolation block will
       be output as polar coordinates, including the center point of the circle
       and the angular position of the move.

   8 = The absolute center point of the circle will be output in one block, with
       the ending point of the arc output in the following block.

   9 = The absolute center point of the circle and the circle's radius will be
       output in a circular interpolation block.
~6.1.4
4.   Incremental distance should be from start point to center:

   This prompt will only be displayed when signed incremental distances to the
   center point are output on circular interpolation blocks.  Enter YES if the
   distances output should be from the starting point of the arc to the center
   point.  This is the standard output.

   Some machines require the distance from the center point to the start of the
   arc.  Enter NO to generate these distances.
~6.1.5
5.   The center point should be output as Radius/Diameter:

   Enter either RADIUS or DIAMETER, depending on how the machine expects to see
   the X-axis center location for circular interpolation.  Most lathes, even
   though they accept diameter positioning for the X-axis, expect to see the
   X-axis center location programmed in reference to the part radius.
~6.1.6
6.   Circular interpolation is allowed in all 3 planes (XY,YZ,ZX):

   Enter NO if your machine only supports circular interpolation in the XY
   plane.  In this case, all circular moves in the YZ and ZX planes will be
   output as linear moves.
~6.1.7
7.   Is 3-axis circular interpolation supported:

   Some machines support circular interpolation in a plane other than one of
   the major planes (XY, YZ, ZX).  In this case, the circular direction code,
   an intermediate point, and the final point of the circular arc will be
   output.  Enter YES if your machine supports circular interpolation outside
   of the major planes.

~6.1.8
8.   Output final point of 3-axis circular on separate block:

   Enter YES if 3-axis circular interpolation output should be broken up into
   two separate blocks, with the first block containing the circular direction
   code and the intermediate point, and the second block containing the final
   point of the circular arc.  Enter NO if the intermediate and final points
   can be in the same block.

   Example:

      YES: G02.4 X Y Z$             NO: CIP X Y Z I1= J1= K1=$
           X Y Z$
~6.1.9
9.   Enter format of 3-axis circular intermediate point:

   Enter the number that corresponds to the format (Absolte/Incremental) of the
   3-axis circular intermediate point when it is output in a single block with
   the final circular location.

   1 = Use the same format as the circular center point.
   2 = Use the circular end point format (MODE/INCR,ON-OFF).

   When the 3-axis intermediate point is output in a separate line and not
   combined with the final point the programmed mode (MODE/INCR) will always be
   used.
~6.1.10
10.  Enter planes where circular interpolation is allowed (XY,YZ,ZX):

   Enter all planes which support circular interpolation.  Valid responses are
   XY,YZ, and ZX.  Separate each plane with a comma, for example: XY,ZX.  All
   circular moves in a plane which does not support circular interpolation will
   be output as linear moves.
~6.1.11
11.  Circular moves should be broken up ...:

   Enter the number that corresponds to the boundary limitations of circular
   interpolation output.

       1 = ... on quadrant boundaries.
       2 = ... on hemisphere boundaries.
       3 = ... on full 360 degree boundaries.
~6.1.12
12.  Force position on circular interpolation record:

   Enter YES if you wish to force the output of all active linear axes on a
   circular interpolation block.  If you enter NO, then the output of the
   linear axis will follow the normal rules, usually meaning they will not be
   output if they do not change.
~6.1.13
13.  Force direction code on circular interpolation record:

   Enter YES if the machine requires a direction code (CLW,CCLW) on every
   circular block output.  The circular direction code usually is only output
   on the first circular block following a linear move or when the direction
   changes.  On some machines, though, the circular direction codes are not
   modal and the control will revert to linear interpolation if the direction
   code is not encountered in a motion block.

   If you enter NO, then the output of the circular direction codes will follow
   the normal rules, usually meaning they will not be output when the circular
   direction remains the same.
~6.1.14
14.  Estimate delta distances during circular interpolation:

   Normally PostWorks will only use the output blocks during circular inter-
   polation to calculate the machining distances (axis delta movements),
   which can be useful when comparing the Slide Motion Recaps from one run to
   another, since the delta summations will be different when comparing cir-
   cular interpolation output to linear output.  At times it is necessary to
   see a more exact estimate of the machining distances during circular inter-
   polation, for example when estimating tool life.

   Enter YES at this prompt if the total machining distances during circular
   interpolation should be included in the axis delta summations kept by
   PostWorks.
~6.2.1
1.   Radius tolerance for circular interpolation:

   Enter the maximum amount of deviation that a cl point in a circular inter-
   polation record can have as compared to the radius calculated by using the
   starting point of the arc.  If the cl point exceeds this tolerance, then the
   remainder of the circular record will be output as linear moves.

   You can use the MCHTOL command within the part program to change this toler-
   ance.
~6.2.2
2.   Minimum linear movement to output as circular interpolation:

   Enter the minimum amount of linear movement that can be output as a circular
   interpolation block.  If the delta movement from the starting point to the
   ending point is less than this value, then this portion of the circular
   interpolation record will be output as linear moves.

   You can use the MCHTOL command within the part program to change this dis-
   tance.
~6.2.3
3.   Minimum radius allowed for circular interpolation:

   Enter the minimum radius of a circle that can be output as circular inter-
   polation.  If the circle radius is less than this value, then the circular
   interpolation record will be output as linear moves.  This is usually a
   machine limitation.
~6.2.4
4.   Maximum radius allowed for circular interpolation:

   Enter the maximum radius of a circle that can be output as circular inter-
   polation.  If the circle radius is greater than this value, then the circular
   interpolation record will be output as linear moves.  This is usually a
   machine limitation.
~6.2.5
5.   Adjust final point to lie exactly on the circle:

   Some machines require that the final point of the circular arc lie exactly
   on the circle as defined by the starting point and circle center point with-
   out even the smallest deviation.  Since the CAM software iterates around the
   circle, there is a possibility that the final point is off the circle, but
   within a certain tolerance.

   Enter YES if your machine must have the final point lie exactly on the
   circle.  One side effect of having PostWorks adjust the final point, is that
   you can accumulate positioning errors when driving multiple circles, because
   the adjusted point of the previous arc will become the starting point of the
   next arc, thereby changing the radius of the next arc slightly.  This is not
   a problem when there is a linear move between circles.
~6.3.1
1.   Does the machine controller support helical interpolation:

   Enter YES if your machine will generate helical movement automatically.  A
   helical interpolation block usually consists of circular interpolation codes
   along with the third linear axis depth and optionally the lead of the depth.

   If you enter NO, then PWORKS will generate the helical motion as a series of
   linear moves.
~6.3.2
2.   Output final depth with helical:

   Enter YES if helical interpolation blocks should contain the final depth of
   the third linear axis.  This is normally the case.  This prompt will only be
   displayed when the machine supports helical interpolation.
~6.3.3
3.   Helical final depth is output as:

   Enter the number that corresponds to the output format for the helical
   final depth.

        0 = Current programming mode.
        1 = Always absolute.
        2 = Always incremental.
~6.3.4
4.   Output delta linear movement with helical:

   Enter the number corresponding to the distance traveled along the arc for
   the third linear axis with helical interpolation.

        0 = Do not output the delta linear movement of the third axis.
        1 = Output the linear movement per radian for the third axis.
        2 = Output the linear movement per 360 degrees for the third axis.

   This prompt will only be displayed when the machine supports helical inter-
   polation.
~6.3.5
5.   Tolerance for generating helical movement:

   Enter the tolerance to maintain for linear moves that PWORKS generates for
   helical interpolation.  This prompt will only be displayed when the machine
   does not support helical interpolation.
~6.4.1
1.   Polar coordinate linear motion code:

   Enter the register and its value for the linear move immediately preceding a
   circular interpolation move when polar coordinate circular interpolation is
   supported.  This code is usually G(11).
~6.4.2
2.   Polar coordinate rapid motion code:

   Enter the register and its value for a rapid move that immediately precedes a
   circular interpolation move when polar coordinate circular interpolation is
   supported.  This code is usually G(10).
~6.4.3
3.   Clockwise circular interpolation code:

   Enter the register and its value for setting circular interpolation mode in
   the clockwise direction.  This code is usually G(02).
~6.4.4
4.   Counter-clockwise circular interpolation code:

   Enter the register and its value for setting circular interpolation mode in
   the counter-clockwise direction.  This code is usually G(03).
~6.4.5
5.   Conversational circle center code:

   Enter the register and its value that defines the circle center definition
   block when conversational polar coordinates are output for circular
   interpolation.  This code is usually CC.
~6.4.6
6.   Conversational circular record code:

   Enter the register and its value that defines the circular motion block 
   when conversational polar coordinates are output for circular interpolation.
   This code is usually CP.
~6.4.7
7.   Conversational delta angle register:

   Enter the register descriptor for the incremental angular movement when
   conversational polar coordinate circular interpolation is supported.  This
   register is usually IPA.
~6.4.8
8.   Clockwise circular interpolation code in LMFP mode:

   Enter the register and its value for setting circular interpolation mode in
   the clockwise direction while in polar interpolation mode on a Mill/Turn
   type machine.  This code is usually D(12).
~6.4.9
9.   Counter-clockwise circular interpolation code in LMFP mode:

   Enter the register and its value for setting circular interpolation mode in
   the counter-clockwise direction while in polar interpolation mode on a Mill/
   Turn type machine.  This code is usually D(13).
~6.4.10
10.  Clockwise circular interpolation code in LMDP mode:

   Enter the register and its value for setting circular interpolation mode in
   the clockwise direction while in cylindrical interpolation mode on a Mill/
   Turn type machine.  This code is usually D(22).
~6.4.11
11.  Counter-clockwise circular interpolation code in LMDP mode:

   Enter the register and its value for setting circular interpolation mode in
   the counter-clockwise direction while in cylindrical interpolation mode on a
   Mill/Turn type machine.  This code is usually D(23).
~6.4.12
12.  Clockwise helical interpolation code:

   Enter the register and its value for setting helical interpolation mode in
   the clockwise direction.  This code is usually G(02).
~6.4.13
13.  Counter-clockwise helical interpolation code:

   Enter the register and its value for setting helical interpolation mode in
   the counter-clockwise direction.  This code is usually G(03).
~6.4.14
14.  Clockwise 3-axis circular interpolation code:

   Enter the register and its value for setting circular interpolation mode
   outside of the major planes in the clockwise direction.  This code is
   usually CIP or G(02.4).
~6.4.15
15.  Counter-clockwise 3-axis circular interpolation code:

   Enter the register and its value for setting circular interpolation mode
   outside of the major planes in the counter-clockwise direction.  This code
   is usually CIP or G(03.4).
~6.4.16
16.  X-axis circle center register:

   Enter the register descriptor for the X-part of the circle center point
   descriptor for circular interpolation blocks.  The I1 register is usually
   used.
~6.4.17
17.  Y-axis circle center register:

   Enter the register descriptor for the Y-part of the circle center point
   descriptor for circular interpolation blocks.  The J1 register is usually
   used.
~6.4.18
18.  Z-axis circle center register:

   Enter the register descriptor for the Z-part of the circle center point
   descriptor for circular interpolation blocks.  The K1 register is usually
   used.
~6.4.19
19.  Circle radius register:

   Enter the register descriptor for the circle radius for circular interpola-
   tion blocks.  The R register is usually used.  This prompt will only be
   displayed when the circle radius is output in circular interpolation blocks.
~6.4.20
20.  X-axis intermediate point register:

   Enter the register descriptor for the X-part of the intermediate point when
   3-axis circular interpolation is active.  The I2 register is usually used.
   This prompt will only be displayed when 3-axis circular interpolation is
   supported.
~6.4.21
21.  Y-axis intermediate point register:

   Enter the register descriptor for the Y-part of the intermediate point when
   3-axis circular interpolation is active.  The J2 register is usually used.
   This prompt will only be displayed when 3-axis circular interpolation is
   supported.
~6.4.22
22.  Z-axis intermediate point register:

   Enter the register descriptor for the Z-part of the intermediate point when
   3-axis circular interpolation is active.  The K2 register is usually used.
   This prompt will only be displayed when 3-axis circular interpolation is
   supported.
~6.4.23
23.   Polar coordinate angle register:

   Enter the register descriptor for the angular position when polar coordinate
   circular interpolation is supported.
~6.4.24
24.  Output X & Y circle center registers in all planes:

   Some machines require that the same circle center point registers be output
   for all machining planes of circular interpolation, for example always I & J.
   Enter YES if your machine only accepts the same two circle center registers
   for all machining planes.
~6.4.25
25.  XY-plane selection code:

   Enter the register and its value that selects the XY machining plane.  This
   is usually G(17).
~6.4.26
26.  ZX-plane selection code:
   Enter the register and its value that selects the ZX machining plane.  This
   is usually G(18).
~6.4.27
27.  YZ-plane selection code:
   Enter the register and its value that selects the YZ machining plane.  This
   is usually G(19).
~6.4.28
28.  User defined plane selection code:

   Some Mill/Turn machines support cylindrical interpolation (LMDP) in user
   selected planes.  These machines require a user defined plane selection block
   to be output when enabling LMDP mode.  Enter the register and its value which
   defines a user defined plane block.  This code is usually G(16).
~6.4.29
29.  Are axis code values required with plane selection:

   User defined plane selection blocks contain a definiition code and the axis
   addresses which define the machining plane.  Usually the axis addresses
   without any values (X,Y,etc.) are output in this block.  In this case enter
   NO at the prompt.  If the machine requires a value to be output with these
   addresses, then enter YES.  The last output value for each register will be
   output.
~6.4.30
30.  Output dwell code with plane selection:

   This prompt is not yet supported.
~6.4.31
31.  Amount of dwell to output w/plane selection code:

   This prompt is not yet supported.
~6.4.32
32.  Output plane selection code in circular block:

   Enter YES if the plane selection code (G17, etc.) can be output in the same
   block as the circular interpolation codes (G02, etc.).  Enter NO if the
   plane selection code should be output in the block preceding the circular
   interpolation block.
~6.5.1
1.   Does the machine controller support spline interpolation:

   Enter YES if the machine will accept a spline definition as input and
   generate the actual motion which drives the spline.  If you enter YES to 
   this question, then PostWorks will evaluate the input coordinates and
   generate a spline definition whenever they are within tolerance of a smooth
   spline.  The spline definition is actually calculated by PostWorks and
   requires no special input from the CAM system.

   Spline interpolation formats currently supported are for the Siemens 880
   control and the Fanuc 16 control.
~6.5.2
2.   Enter codes for enabling high precision contouring mode:

   Enter up to 5 registers and their values which will enable high precision
   contouring control mode.  This mode must be enabled on Fanuc controls when
   spline interpolation is in effect and is usually enabled using the following
   codes.

      Fanuc    -  G(5),P(10000)
      Siemens  -  (none)

   The Siemens control does not use high precision contouring control mode.
~6.5.3
3.   Enter codes for disabling high precision contouring mode:

   Enter up to 5 registers and their values which will disable high precision
   contouring control mode.  This mode must be enabled on Fanuc controls when
   spline interpolation is in effect and is usually disabled using the following
   codes.

      Fanuc    -  G(5),P(0)
      Siemens  -  (none)

   The Siemens control does not use high precision contouring control mode.
~6.5.4
4.   Enter the tolerance for fitting spline thru points:

   Enter the tolerance to use when creating splines.  This tolerance will
   determine the number of points used to define the spline.  A looser tolerance
   will generate larger splines with fewer control points, reducing the amount
   of tape blocks.
~6.5.5
5.   Enter chordal tolerance for spline interpolation:

   This tolerance specifies the maximum amount of deviation that a spline can
   have between two definition points as compared to the programmed cl points.
   The chordal tolerance is used to gauge the maximum distance a straight line
   cl move deviates from the calculated spline.  If the distance is greater
   than the chordal tolerance, then the spline will be split into two or more
   splines, or linear interpolation will be reinstated.
~6.5.6
6.   Spline interpolation code:

   Enter the register and its value used to enable spline interpolation mode at
   the controller.  It usually has the following format.

      Fanuc    -  G06.2
      Siemens  -  BSPLINE

   The Siemens code should be setup in the Register Format section as having
   the start characters 'BSPLI', the end characters 'NE' and 0 digits output to
   the left and right of the decimal point.
~6.5.7
7.   Force linear/circular interpolation code after spline mode:

   Enter YES if an interpolation code must be reinstated after spline inter-
   polation.  If you enter NO at this prompt, then the normal output control
   for the interpolation register will be used to determine when it will be
   output.  The typical answer is YES.
~6.5.8
8.   Output spline interpolation code in a block by itself:

   Enter YES if the spline interpolation definition code must be output in a
   block by itself.  Otherwise, it will be output with the first coordinate in
   the spline definition.

      Typical Answers:

         Fanuc    -  NO
         Siemens  -  YES
~6.5.9
9.   Output knot values or node distances:

   Along with the control points output with spline interpolation, the machine
   control will usually require additional data to define the spline.  The
   Fanuc control requires the knot values, while the the node distance is the
   length along the curve between spline coordinates and is required by the
   Siemens control.

      Typical Answers:

         Fanuc    -  KNOT
         Siemens  -  NODE
~6.5.10
10.   Enter register for knot values/node distances:

   Enter the register descriptor that will contain either the knot value or the
   node distance for each spline definition coordinate.

      Typical Answers:

         Fanuc    -  K
         Siemens  -  PL=

   A register must be setup to the appropriate starting characters and numeric
   format and entered at this prompt, for example, K2.
~6.5.11
11.   Include start point in spline interpolation:

   The starting point for spline interpolation is the machine location output
   previous to the spline code output.  The Fanuc control requires that this
   point be repeated as the first control point of the spline.  The Siemens
   control does not expect this location to be output.  The following answers
   are typical for the two controls.

      Fanuc    -  YES
      Siemens  -  NO
~7.0
0.   Walk through Motion adjustments.

   This selection will lead you through all of the different types of adjust-
   ments that can be applied to machining motion.
 
1.   Miscellaneous adjustments.

   This section includes support for the maximum amount of axes which can move
   in a single motion block, mutually exclusive axes, and holding back motion
   when only a single axis moves.

2.   Rotary axes linearization.

   This section defines the tolerance for rotary axes linearization and the
   support for an automatic tool retract when the rotary axes are positioned
   using the longest route.  This section can only be entered when at least
   one rotary axis is supported.

3.   Rotary axes look-ahead.

   This section defines the parameters used for when PostWorks scans ahead
   in the clfile looking for a change in the tool axis so that the rotary
   axis can be moved in the correct direction to minimize encroachment
   of the machine limits.

4.   Slowdown spans.

   This section defines slowdown support, including post generated slowdown
   blocks and machine controlled slowdown codes.

5.   Maximum axis departures.

   This section defines the maximum distance (departure) that each axis can
   move in a single block.

6.  Acceleration blocks.

   This section determines whether acceleration spans are required by the
   machine control.  These acceleration blocks are generated internally by 
   PostWorks.

7.  Transformation blocks.

   This section controls the calculation of transformation blocks, which are
   used to define the coordinate system on the machine control.

8.  Transformation output.

   This section controls the output of transformation blocks, which includes
   the registers and codes required to enable and disable transformation blocks.

9.   Exit

   Exits the Motion Adjustments section and returns you to the previous section.
~7.1.1
1.   Maximum number of axes which can move in a single block.

   Some machines only allow so many axes to move in a single block.  If your
   machine has this limitation, then enter the maximum number of axes which can
   move in a single block.  Otherwise, if your machine has no such limitation,
   enter 10.

   The move will be broken into two or more moves when the number of axes in a
   a single block exceeds this number.
~7.1.2
2.   Priority for output axes:

   This prompt will only be displayed when the maximum number of axes allowed to
   move in a single block is less than the number of axes supported, both linear
   and rotary.  Enter each supported axis, separated with a comma, in the order
   of which you want them output when the number of axes exceeds the maximum
   allowed.

   When the move is broken up, the axes appearing first in this list will be
   output on the first block, with the remaining axes output on the following
   blocks.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.3
3.   Number of mutually exclusive axes sets:

   Some machines lack the capabilities to move all of the available programmable
   axes at the same time.  PostWorks has the capability to check for mutually
   exclusive axes (axes which cannot be programmed to move simultaneously in the
   same motion block) and break up the motion block so that these axes are in
   separate blocks.  An error message will also be output when the move is
   broken up.

   You can enter up to 4 sets of mutually exclusive axes.  If all of the pro-
   grammable axes can move together simultaneously, then enter 0 at this prompt.
~7.1.4
4.   Enter 1st set of mutually exclusive axes:

   Enter the machine axes, linear and/or rotary, that cannot move simultaneous-
   ly.  You can enter from 2 to 4 mutually exclusive axis descriptors.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.5
5.   Controlling axis for 1st set:

   When breaking a move, where 2 or more mutually exclusive axes were programmed
   to move together, into 2 or more motion blocks, PWORKS has the capability to
   determine how the move is to be broken up based on whether a specified axis
   moves in the positive or negative direction.

   Enter the axis descriptor whose direction will determine how a move will be
   broken up when 2 or more mutually exclusive axes are programmed to move
   simultaneously.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.6
6.   Axes priority with positive axis move for 1st set:

   Enter the priority that will be used when breaking up a move which contains
   mutually exclusive axes programmed to move simultaneously and the controlling
   axis for this set moves in the positive direction.  The order in which you
   want the axes output, with each axis descriptor separated by a comma, should
   be entered.

   You can specify that certain axes be output in one block, while other axes
   are output in a separate block, by specifying the $ character in the axis
   description list.  Again, the $ character must be separated by commas.

   Example:

        X1,Y1,$,Z1,$,A1,A2

        In the above example the primary X and Y axes will be output in the
        first block, the primary Z axis in the second block, and rotary axes #1
        and #2 in the final block, as shown below.

        X1.34 Y8.5$
        Z6.3$
        A90.0 B100.83$

   In this example the $ character is assumed to be the End-of-block character,
   and may be different for your machine configuration.  Any remaining axes that
   are not contained in this list will be output in the final block.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.7
7.   Axes priority with negative axis move for 1st set:

   Enter the priority that will be used when breaking up a move which contains
   mutually exclusive axes programmed to move simultaneously and the controlling
   axis for this set moves in the negative direction.  The order in which you
   want the axes output, with each axis descriptor separated by a comma, should
   be entered.

   You can specify that certain axes be output in one block, while other axes
   are output in a separate block, by specifying the $ character in the axis
   description list.  Again, the $ character must be separated by commas.

   Example:

        X1,Y1,$,Z1,$,A1,A2

        In the above example the primary X and Y axes will be output in the
        first block, the primary Z axis in the second block, and rotary axes #1
        and #2 in the final block, as shown below.

        X1.34 Y8.5$
        Z6.3$
        A90.0 B100.83$

   In this example the $ character is assumed to be the End-of-block character,
   and may be different for your machine configuration.  Any remaining axes that
   are not contained in this list will be output in the final block.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.8
8.   Enter 2nd set of mutually exclusive axes:

   Enter the machine axes, linear and/or rotary, that cannot move simultaneous-
   ly.  You can enter from 2 to 4 mutually exclusive axis descriptors.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.9
9.   Controlling axis for 2nd set:

   When breaking a move, where 2 or more mutually exclusive axes were programmed
   to move together, into 2 or more motion blocks, PWORKS has the capability to
   determine how the move is to be broken up based on whether a specified axis
   moves in the positive or negative direction.

   Enter the axis descriptor whose direction will determine how a move will be
   broken up when 2 or more mutually exclusive axes are programmed to move
   simultaneously.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.10
10.   Axes priority with positive axis move for 2nd set:

   Enter the priority that will be used when breaking up a move which contains
   mutually exclusive axes programmed to move simultaneously and the controlling
   axis for this set moves in the positive direction.  The order in which you
   want the axes output, with each axis descriptor separated by a comma, should
   be entered.

   You can specify that certain axes be output in one block, while other axes
   are output in a separate block, by specifying the $ character in the axis
   description list.  Again, the $ character must be separated by commas.

   Example:

        X1,Y1,$,Z1,$,A1,A2

        In the above example the primary X and Y axes will be output in the
        first block, the primary Z axis in the second block, and rotary axes #1
        and #2 in the final block, as shown below.

        X1.34 Y8.5$
        Z6.3$
        A90.0 B100.83$

   In this example the $ character is assumed to be the End-of-block character,
   and may be different for your machine configuration.  Any remaining axes that
   are not contained in this list will be output in the final block.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.11
11.   Axes priority with negative axis move for 2nd set:

   Enter the priority that will be used when breaking up a move which contains
   mutually exclusive axes programmed to move simultaneously and the controlling
   axis for this set moves in the negative direction.  The order in which you
   want the axes output, with each axis descriptor separated by a comma, should
   be entered.

   You can specify that certain axes be output in one block, while other axes
   are output in a separate block, by specifying the $ character in the axis
   description list.  Again, the $ character must be separated by commas.

   Example:

        X1,Y1,$,Z1,$,A1,A2

        In the above example the primary X and Y axes will be output in the
        first block, the primary Z axis in the second block, and rotary axes #1
        and #2 in the final block, as shown below.

        X1.34 Y8.5$
        Z6.3$
        A90.0 B100.83$

   In this example the $ character is assumed to be the End-of-block character,
   and may be different for your machine configuration.  Any remaining axes that
   are not contained in this list will be output in the final block.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.12
12.   Enter 3rd set of mutually exclusive axes:

   Enter the machine axes, linear and/or rotary, that cannot move simultaneous-
   ly.  You can enter from 2 to 4 mutually exclusive axis descriptors.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.13
13.   Controlling axis for 3rd set:

   When breaking a move, where 2 or more mutually exclusive axes were programmed
   to move together, into 2 or more motion blocks, PWORKS has the capability to
   determine how the move is to be broken up based on whether a specified axis
   moves in the positive or negative direction.

   Enter the axis descriptor whose direction will determine how a move will be
   broken up when 2 or more mutually exclusive axes are programmed to move
   simultaneously.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.14
14.   Axes priority with positive axis move for 3rd set:

   Enter the priority that will be used when breaking up a move which contains
   mutually exclusive axes programmed to move simultaneously and the controlling
   axis for this set moves in the positive direction.  The order in which you
   want the axes output, with each axis descriptor separated by a comma, should
   be entered.

   You can specify that certain axes be output in one block, while other axes
   are output in a separate block, by specifying the $ character in the axis
   description list.  Again, the $ character must be separated by commas.

   Example:

        X1,Y1,$,Z1,$,A1,A2

        In the above example the primary X and Y axes will be output in the
        first block, the primary Z axis in the second block, and rotary axes #1
        and #2 in the final block, as shown below.

        X1.34 Y8.5$
        Z6.3$
        A90.0 B100.83$

   In this example the $ character is assumed to be the End-of-block character,
   and may be different for your machine configuration.  Any remaining axes that
   are not contained in this list will be output in the final block.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.15
15.   Axes priority with negative axis move for 3rd set:

   Enter the priority that will be used when breaking up a move which contains
   mutually exclusive axes programmed to move simultaneously and the controlling
   axis for this set moves in the negative direction.  The order in which you
   want the axes output, with each axis descriptor separated by a comma, should
   be entered.

   You can specify that certain axes be output in one block, while other axes
   are output in a separate block, by specifying the $ character in the axis
   description list.  Again, the $ character must be separated by commas.

   Example:

        X1,Y1,$,Z1,$,A1,A2

        In the above example the primary X and Y axes will be output in the
        first block, the primary Z axis in the second block, and rotary axes #1
        and #2 in the final block, as shown below.

        X1.34 Y8.5$
        Z6.3$
        A90.0 B100.83$

   In this example the $ character is assumed to be the End-of-block character,
   and may be different for your machine configuration.  Any remaining axes that
   are not contained in this list will be output in the final block.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.16
16.   Enter 4th set of mutually exclusive axes:

   Enter the machine axes, linear and/or rotary, that cannot move simultaneous-
   ly.  You can enter from 2 to 4 mutually exclusive axis descriptors.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.17
17.   Controlling axis for 4th set:

   When breaking a move, where 2 or more mutually exclusive axes were programmed
   to move together, into 2 or more motion blocks, PWORKS has the capability to
   determine how the move is to be broken up based on whether a specified axis
   moves in the positive or negative direction.

   Enter the axis descriptor whose direction will determine how a move will be
   broken up when 2 or more mutually exclusive axes are programmed to move
   simultaneously.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.18
18.   Axes priority with positive axis move for 4th set:

   Enter the priority that will be used when breaking up a move which contains
   mutually exclusive axes programmed to move simultaneously and the controlling
   axis for this set moves in the positive direction.  The order in which you
   want the axes output, with each axis descriptor separated by a comma, should
   be entered.

   You can specify that certain axes be output in one block, while other axes
   are output in a separate block, by specifying the $ character in the axis
   description list.  Again, the $ character must be separated by commas.

   Example:

        X1,Y1,$,Z1,$,A1,A2

        In the above example the primary X and Y axes will be output in the
        first block, the primary Z axis in the second block, and rotary axes #1
        and #2 in the final block, as shown below.

        X1.34 Y8.5$
        Z6.3$
        A90.0 B100.83$

   In this example the $ character is assumed to be the End-of-block character,
   and may be different for your machine configuration.  Any remaining axes that
   are not contained in this list will be output in the final block.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.19
19.   Axes priority with negative axis move for 4th set:

   Enter the priority that will be used when breaking up a move which contains
   mutually exclusive axes programmed to move simultaneously and the controlling
   axis for this set moves in the negative direction.  The order in which you
   want the axes output, with each axis descriptor separated by a comma, should
   be entered.

   You can specify that certain axes be output in one block, while other axes
   are output in a separate block, by specifying the $ character in the axis
   description list.  Again, the $ character must be separated by commas.

   Example:

        X1,Y1,$,Z1,$,A1,A2

        In the above example the primary X and Y axes will be output in the
        first block, the primary Z axis in the second block, and rotary axes #1
        and #2 in the final block, as shown below.

        X1.34 Y8.5$
        Z6.3$
        A90.0 B100.83$

   In this example the $ character is assumed to be the End-of-block character,
   and may be different for your machine configuration.  Any remaining axes that
   are not contained in this list will be output in the final block.

   Following is a list of acceptable axis designators.

          X1 = Primary X-axis.       X2 = Secondary X-axis.
          Y1 = Primary Y-axis.       Y2 = Secondary Y-axis.
          Z1 = Primary Z-axis.       Z2 = Secondary Z-axis.
          A1 = Rotary axis #1.       A2 = Rotary axis #2.
          A3 = Rotary axis #3.       A4 = Rotary axis #4.
~7.1.20
20.   Hold back motion where only 1 axis moves:

   Enter YES if you want to disable the output of any supported axis while it is
   the only axis moving, until another axis moves.  This feature is generally
   used when you have at least one rotary axis.  In some cases motion is gener-
   ated that will contain multiple points and tool axis vectors, though the
   output from the post-processor will only generate rotary axis movement.  In
   this case, the rotary axis movement will not be output until another axis
   moves or the rotary axis changes direction.  So instead of multiple blocks
   of rotary moves, you will only have one.
~7.2.1
1.   Default linearization tolerance:

   PWORKS has the capability to break up a move that consists of rotary angle
   changes, when a specified tolerance has been exceeded.  The move will be
   broken up into smaller moves in order to keep the tool end point on the same
   line as the previous and new positions.

   Enter the largest acceptable deviation from the programmed straight line move
   that can occur.  Linearization is recommended under certain conditions,
   because the tool end point will actually move in a circular fashion whenever
   a large rotary axis is programmed, while the linear machine slides make a
   linear move.  Linearization will cause the tool end point to move within the
   specified tolerance of a straight line, while the linear machine slides move
   in a circular fashion.

   The LINTOL command can be used within the part program to change the lineari-
   zation tolerance.  Enter a value of 0 to disable linearization.
~7.2.2
2.   Default rapid linearization tolerance:

   Moves programmed with RAPID in effect usually take place away from the part
   due to the inconsistency of axes movements during this mode.  Therefore,
   rapid moves are not normally linearized.  There are times when RAPID is
   used when the tool is in close proximity to the part, in this case enter
   the default tolerance to use for linearization when RAPID is in effect.
   Enter a value of 0 to disable linearization during rapid moves.

   The LINTOL/RAPID command can be used to change the linearization tolerance
   used with rapid moves from within the part program.
~7.2.3
3.   Adjust tool axis vector to minimize rotary movement:

   PostWorks has the capability of adjusting the tool axis vector by moving the
   ending position of the top of the tool back along the forward vector whenever
   the tool axis is near the apex point of an AC-style rotary axis.  This
   feature is used to keep the rotary axes from rotating excessively when the
   apex point is neared.  The tool tip will still move to the programmed
   position and the top of the tool will be within a user specified tolerance
   of the programmed position.

   Of the various "adjustments" that can be made to the tool axis when it is
   near the apex point, this is the recommended feature to use.
~7.2.4
4.   Linear tolerance to use for tool axis adjustment:

   Enter the tolerance value to use to position the top of the tool when tool
   axis adjustments to minimize rotary movement have been enabled.  The top of
   the tool will always remain within this tolerance of the programmed position.
~7.2.5
5.   Angular cone to consider for tool axis adjustment:

   Enter the angular distance that the tool axis vector must be within in
   reference to the apex point of an AC-style rotary axis before PostWorks will
   consider adjusting the tool axis.  This is typically a small value (less than
   5 degrees) since the further away the tool axis is from the apex point, the
   less noticeable the fluctuations in the rotary axes will be and the less
   benefit this feature will provide.
~7.2.6
6.   Minimum angular delta movement to consider for tool axis adjustment:

   Enter the minimum angular delta movement that the rotary axes must move
   prior to considering adjusting the tool axis vector.  This limit is used
   to keep from adjusting the tool axis vector when the rotary axes do not
   fluctuate greatly.  This is typically a higher value (10 degrees or more).
~7.2.7
7.   Default tool length to consider for tool axis adjustment:

   Enter the value to use for the tool length when an actual tool length has
   not been programmed.  The tool length is used to determine where the top of
   the tool is when performing tool axis adjustments.
~7.2.8
8.   Tolerance for truncating tool axis vector components:

   Enter the tolerance to use for the tool axis vector components (IJK) to
   determine when a component should be set to zero.  Whenever a tool axis
   component is less than this value, it will be set to zero.  This feature
   is useful for locking out a tool axis component during 4-axis motion.

   The PPTOL/VECTOR command can be used to change this value within the part
   program.
~7.2.9
9.   Retract tool when taking longest route:

   In many instances there is a possibility that two sets of rotary angles can
   satisfy the input tool axis vector.  Usually PWORKS will choose the set of
   angles that require the least amount of movement.  An exception to this rule
   is when the closest set of angles will cause the machine to exceed an axis
   travel limits.  In this case PWORKS will choose the rotary axis with the
   longest movement, as long as it keeps the machine within limits.

   When PWORKS chooses the set of rotary angles which require the longest
   movement you have the option of performing the following sequence.

        1) Optionally shift the tool.
        2) Retract the tool up the tool axis a specified distance or to a plane.
        3) Position to the new rotary angles in rapid mode.
        4) Plunge the tool back to its position prior to retraction.
        5) Optionally shift the tool back to its original position.

   Select DISTANCE at this prompt if you would like PWORKS to perform these
   functions and retract the tool to a defined distance whenever the rotary
   axes take the longest route.  This feature can save the part from being
   scrapped whenever radical movements in the rotary axes are output.

   Selecting PLANE will retract the tool to a predefined plane.  This plane is
   defined in the machine axes so that the tool end point will retract to this
   plane after being adjusted for any defined rotary tables.
   
   The RETRCT/TOOL command can be used to set the automatic retract options in
   the part program.
~7.2.10
10.  Allow tool retraction with linearization disabled:

   Enter YES to this prompt if you want PWORKS to perform the automatic tool
   retraction sequence described in the previous prompt when the rotary axes
   are taking the longest route and linearization is disabled.  Entering NO
   will only retract the tool when tool retraction is enabled and linearization
   is active.
~7.2.11
11.  Add tool length to retract distance:

   Enter YES to this prompt if you want the tool length used as part of the
   distance to retract the tool when the rotary axes take the longest route
   to fulfill the tool axis.  If you enter NO, then only the distance specified
   in the following prompt will be used for the retract distance.  This prompt
   will only be displayed when automatic tool retraction has been enabled.
~7.2.12
12.  Automatic retract distance in addition to tool length:

   The value entered at this prompt, added to the currently programmed tool
   length, is the distance the tool will retract when the rotary axes take the
   longest route to fulfill the tool axis.  Entering a value of 0 will cause
   only the tool length to be used as the retract distance.  This prompt will
   only be displayed when automatic tool retraction has been enabled.
~7.2.13
13.  Automatic retract plane:

   Enter the default clearance plane to use when automatically retracting the
   tool when the rotary axes take the longest route to fulfill the tool axis.
   The retract plane should be entered using the format 'i,j,k,d' or just 'd'.
   If only a single number is entered, 'd', then a plane vector of '0,0,1' will
   be used.

   This prompt will only be displayed when the default retract logic is set to
   PLANE.

~7.2.14
14.  Offset tool prior to retract:

   You have the option of shifting the tool away from the part prior to having
   it retracted when the rotary axes take the longest route.  The tool can be
   shifted either left or right of the forward direction, as specified by the
   user.  Since PostWorks does not have any information on where the part is,
   due care should be used when using this feature so that the tool does not
   violate the part when shifting the tool.  PostWorks will check for a closed
   angled wall situation and temporarily disable the tool offset feature when
   it determines that the tool will violate the part due to this condition.
   This is the only checking that is performed for part violation.

   UP disables the tool offset feature.  LEFT offsets the tool to the left of
   the tool path and RIGHT offsets it to the RIGHT of the tool path.  The
   RETRCT/TOOl,...,OFFSET command can be used to change this setting during the
   programming of the part.
~7.2.15
15.  Default offset distance:

   Enter the default distance for offsetting the tool when it is shifted prior
   to retracting when the rotary axes take the longest route.  It is recommended
   that a minimal distance be used, since the goal of this movement is only to
   minimize dwell marks.
~7.2.16
16.  Retract feedrate for automatic retract:

   Enter the feed rate, in Feed Per Minute, for retracting the tool when the
   rotary axes take the longest route to fulfill the tool axis.  Entering a
   value of 0 will cause the machine to retract the tool in rapid mode.  This
   prompt will only be displayed when automatic tool retraction has been
   enabled.
~7.2.17
17.  Plunge feedrate for automatic retract:

   Enter the feed rate, in Feed Per Minute, for plunging the tool back to its
   original position when the rotary axes take the longest route to fulfill the
   tool axis.  Entering a value of 0 will cause the machine to plunge the tool
   in rapid mode.  This prompt will only be displayed when automatic tool
   retraction has been enabled.
~7.2.18
18.  Blade positioning feedrate for automatic retract:

   Enter the feed rate, in Feed Per Minute, for rotating the blade to its
   calculated position when the tool is retracted due to the angular change of
   the blade direction exceeding the maximum specified.  A value of 0 will
   cause the blade to be positioned in rapid mode.  This prompt will only
   be displayed when the machine type is defined to be an Ultrasonic Cutter.
~7.2.19
19.  Offset feedrate for automatic retract:

   Enter the feed rate, in Feed Per Minute, for shifting the tool prior to tool
   retraction when the rotary axes take the longest route to fulfill the tool
   axis.  Entering a value of 0 will cause the machine to shift the tool in
   rapid mode.  This prompt will only be displayed when automatic tool
   retraction and tool offsetting have been enabled.
~7.2.20
20.  Enter the logic to use when determining the rotary shortest route:

   When two or more rotary axes are active there is a possibility that a tool
   axis vector can be satisfied using two or more different axis rotations.
   PostWorks will usually select the position which causes the least amount of
   rotary movement.  Selecting the shortest route can be accomplished in dif-
   ferent ways.  The user has control over how the determination is made.

   Enter the value which corresponds to the shortest route determination logic
   to use.

             1. Combination of all rotary axis movements.
             2. Comparison of largest rotary axis movements.
             3. Summation of all rotary movements.
             4. Using a specific rotary axis.

   Selection 1 will combine and average the movements of all active rotary axis
   and use this as the delta movement.  Selection 2 will compare the single
   largest movements from the different sets of rotary axis calculations. 
   Selection 3 will total all rotary axis movements.  Selection 4 will base the
   total rotary movement on a single user defined axis.

   Example:

      Let's assume the following delta movements for two different sets of
      rotary axes which satisfy the programmed tool axis.  The resultant delta
      movement calculated and the set chosen for each selection listed above
      are shown.

                 Deltas                 Delta used for comparison
             A-axis  B-axis       1         2           3          4 (B-axis)

      Set #1   50      90        103        90         140         90
      Set #2  110       0        110       110         110          0
                                 ---       ---         ---        ---
      Set chosen                  1         1           2          2

   The ROTABL/SHORT command can also be used to change the shortest route deter-
   mination logic anywhere within the part program.
~7.2.21
21.   Controlling axis for shortest route determination:

   Enter the rotary axis number whose delta movement alone will be used to de-
   termine the shortest route taken.  This prompt will only be displayed when
   'Using a specific rotary axis' was chosen at the previous prompt.
~7.3.1
1.   Does this machine require look-ahead positioning:

   Some rotary axis configurations are such that when the secondary rotary is
   at 0 degrees, the primary rotary axis can rotate to any position without
   affecting the tool axis orientation to the part.  An AC-style head is the
   most common rotary configuration with this feature and will be used as a
   reference in this documentation.

   PostWorks contains a look-ahead provision for these types of machines, where
   it will scan the clfile when the secondary axis (A-axis) is at zero looking
   for the next change in the primary axis (C-axis).  It will then position the
   C-axis during a move where the A-axis is at zero, so that it is in position
   for the next move.

   If this machine has this style of rotary axes, then enter YES at this prompt.
   The actual look-ahead scanning features are controlled by the remaining
   prompts in this section and with the ALIGN/AXIS command.  Entering AUTO will
   cause PostWorks to determine if the machine has AC-style rotaries.  This
   method is compatible with previous versions of PostWorks.

~7.3.2
2.   Rotary axes look-ahead mode:

   Select the look-ahead method to use by default for AC-style rotaries. OFF
   disables the look-ahead feature, AUTO will look for a change in the C-axis
   when the A-axis is at zero, and RAPID will only perform the look-ahead when
   the A-axis is at zero and a rapid move is in effect.

   AUTO is typically used with machines that have an AC-style rotary head.
   The RAPID look-ahead mode is typically used with machines with at least one
   rotary table or a nutating head.
~7.3.3
3.   Vector component deviation:

   Enter the tolerance to use for the I and J components of the tool axis vector
   to determine when the A-axis should be at zero.  Whenever both of these
   components are less than this value, they will be set to zero.  This feature
   can be used to help prevent the C-axis from swinging wildly as the A-axis
   is almost at zero.
~7.3.4
4.   Look-ahead for limit violations:

   Enter YES if the look-ahead feature should continue to scan the clfile until
   either the A-axis moves back to zero or an axis limit is reached.  Enabling
   this feature allows the C-axis to be optimally positioned nearest the limit
   that will allow it the greatest amount of movement before actually violating
   a limit.
~7.3.5
5.   Allow rotation of axis in single block:

   PostWorks will normally require that the previous move have the A-axis at
   zero along with the current move prior to scanning the clfile for the next
   C-axis movement.  This method ensures that the C-axis will be positioned
   during other axis movement and will not dwell in-place during positioning.

   Enter YES at this prompt if you require that the C-axis always positions
   itself while the A-axis is at zero, even in a single block without any other
   axis movement.  This will happen anyway if linearization is active, since
   it is necessary in keeping the tool within tolerance of the move, but by
   enabling it during look-ahead you have the option of retracting the tool
   during this positioning.
~7.3.6
6.   Retract tool when rotated in single block:

   This feature retracts the tool, positions the C-axis, and plunges the tool
   back to its original position when the C-axis is positioned in a single
   block during the look-ahead sequence.  The positioning method used is the
   same that is used when retracting the tool due to the longest route being
   taken.  The same distances and feed rates will be used.

   Enter YES at this prompt if you want the tool retracted during C-axis only
   positioning.  Entering NO will cause the C-axis to be positioned in-place.
~7.4.1
1.   Does the control support slowdown codes:

   Enter YES if the machine control will accept codes to enable and disable
   slowdown adjustements on the machine.  If the machine does not support these
   codes and you want PWORKS to generate slowdown blocks, then enter NO at this
   prompt.
~7.4.2
2.   Should slowdown codes replace linear/circular codes:

   If you enter YES to this prompt, then normal linear and circular interpola-
   tion codes (G01, G02 for example) will not be output when slowdowns are
   enabled.  The defined codes for the current slowdown mode will replace the
   normal interpolation codes.  Slowdown codes will usually be output in
   conjunction with the normal interpolation codes.

   This prompt will only be displayed when the machine supports slowdown codes.
~7.4.3
3.   Are slowdown codes required on every active motion block:

   Enter YES if the active slowdown code is non-modal and must be forced out in
   every motion block when slowdowns are enabled.  Slowdown enable codes are
   usually modal and need to be output only once when activated, with a slowdown
   off code being output when slowdowns are canceled.

   This prompt will only be displayed when the machine supports slowdown codes.
~7.4.4
4.   Number of slowdown modes supported:

   Enter the number of slowdown modes supported by the machine.  Various modes
   of slowdown support usually consist of various methods of acceleration at the
   start of the move and deceleration at the end of the move.  Some controls
   also support an automatic corner rounding mode, which should be considered
   a slowdown mode in PWORKS.  You can enter from 1 to 4 slowdown modes.  See
   the machine's programming guide for a description of the various slowdown
   modes that are supported.

   This prompt will only be displayed when the machine supports slowdown codes.
~7.4.5
5.   Minimum angular change to generate slowdown span:

   Enter the minimum angular change, in degrees, that is required for a slow-
   down block to be output when slowdowns are enabled.  Slowdowns will only be
   enabled when the directional angular change of a move is greater that the
   value entered here and SLOWDN/ON is in effect.  Enter a value of 0 to enable
   slowdown blocks on every move between SLOWDN/ON and SLOWDN/OFF.

   This prompt will only be displayed when the machine supports slowdown codes.
   The tolerance for slowdown spans will be used to determine when slowdown
   blocks need to be output, when PWORKS generates the slowdown blocks.
~7.4.6
6.   Linear slowdown span code #1:

   Enter the register and optional value that will enable slowdown mode #1 at
   the machine control.  This code will be output when slowdown mode #1 is
   enabled and a linear interpolation block is output.
~7.4.7
7.   Linear slowdown span code #2:

   Enter the register and optional value that will enable slowdown mode #2 at
   the machine control.  This code will be output when slowdown mode #2 is
   enabled and a linear interpolation block is output.
~7.4.8
8.   Linear slowdown span code #3:

   Enter the register and optional value that will enable slowdown mode #3 at
   the machine control.  This code will be output when slowdown mode #3 is
   enabled and a linear interpolation block is output.
~7.4.9
9.   Linear slowdown span code #4:

   Enter the register and optional value that will enable slowdown mode #4 at
   the machine control.  This code will be output when slowdown mode #4 is
   enabled and a linear interpolation block is output.
~7.4.10
10.   CLW Circular slowdown span code #1:

   Enter the register and optional value that will enable slowdown mode #1 when
   a circular interpolation move in the clockwise direction is output.  If the
   machine control does not require separate codes for linear and circular
   slowdown codes, then enter the same code that was used for linear interpola-
   tion slowdown blocks.
~7.4.11
11.   CCLW Circular slowdown span code #1:

   Enter the register and optional value that will enable slowdown mode #1 when
   a circular interpolation move in the counter-clockwise direction is output.
   If the machine control does not require separate codes for linear and cir-
   cular slowdown codes, then enter the same code that was used for linear
   interpolation slowdown blocks.
~7.4.12
12.   CLW Circular slowdown span code #2:

   Enter the register and optional value that will enable slowdown mode #2 when
   a circular interpolation move in the clockwise direction is output.  If the
   machine control does not require separate codes for linear and circular
   slowdown codes, then enter the same code that was used for linear interpola-
   tion slowdown blocks.
~7.4.13
13.   CCLW Circular slowdown span code #2:

   Enter the register and optional value that will enable slowdown mode #2 when
   a circular interpolation move in the counter-clockwise direction is output.
   If the machine control does not require separate codes for linear and cir-
   cular slowdown codes, then enter the same code that was used for linear
   interpolation slowdown blocks.
~7.4.14
14.   CLW Circular slowdown span code #3:

   Enter the register and optional value that will enable slowdown mode #3 when
   a circular interpolation move in the clockwise direction is output.  If the
   machine control does not require separate codes for linear and circular
   slowdown codes, then enter the same code that was used for linear interpola-
   tion slowdown blocks.
~7.4.15
15.   CCLW Circular slowdown span code #3:

   Enter the register and optional value that will enable slowdown mode #3 when
   a circular interpolation move in the counter-clockwise direction is output.
   If the machine control does not require separate codes for linear and cir-
   cular slowdown codes, then enter the same code that was used for linear
   interpolation slowdown blocks.
~7.4.16
16.   CLW Circular slowdown span code #4:

   Enter the register and optional value that will enable slowdown mode #4 when
   a circular interpolation move in the clockwise direction is output.  If the
   machine control does not require separate codes for linear and circular
   slowdown codes, then enter the same code that was used for linear interpola-
   tion slowdown blocks.
~7.4.17
17.   CCLW Circular slowdown span code #4:

   Enter the register and optional value that will enable slowdown mode #4 when
   a circular interpolation move in the counter-clockwise direction is output.
   If the machine control does not require separate codes for linear and cir-
   cular slowdown codes, then enter the same code that was used for linear
   interpolation slowdown blocks.
~7.4.18
18.   Slowdown off code:

   Enter the register and optional value that will disable all slowdown modes at
   the machine.  This prompt will only be displayed when the machine supports
   slowdown codes.
~7.4.19
19.   Default slowdown tolerance:

   Enter the cornering tolerance that should be maintained when PWORKS generates
   slowdown blocks.  Slowdown spans will be calculated by PWORKS and output at a
   feed rate that will keep the tool within this tolerance.

   When a move has a feed rate that is too fast to keep the tool within the
   specified tolerance, then PWORKS will output two motion blocks.  The first
   block will contain a calculated span at the programmed feed rate and the
   second block will contain the rest of the programmed move at a slower feed
   rate.

   This prompt will only be displayed when the machine does not support slowdown
   codes.
~7.4.20
20.   Default slowdown mode:

   Enter ON if you want slowdown blocks enabled by default at the start of the
   program, otherwise enter OFF.  On machines that support slowdown codes, you
   will normally enter OFF.  On machines that require post-processor generated
   slowdown spans, ON is the typical response.
~7.5.1
1.   Apply maximum axis departures during rapid moves:

   In most cases maximum axis departures are setup to deal with machine control
   limitations and therefore require even rapid moves to adhere to these
   maximum distances, but there are machine configurations that the departure
   distances are limited due to other circumstances and while only in cutting
   mode.  For example, a multi-axis machine with an AC style head.  Since
   rapid moves are not cutting moves, answering NO to this prompt will not
   apply the maximum axis departures during rapid moves.
~7.5.2
2.   Maximum axis departure allowed for Primary X-axis:

   Enter the maximum distance that the primary X-axis can move in a single
   block.  If the primary X-axis exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.5.3
3.   Maximum axis departure allowed for Secondary X-axis:

   Enter the maximum distance that the secondary X-axis can move in a single
   block.  If the secondary X-axis exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.5.4
4.   Maximum axis departure allowed for Primary Y-axis:

   Enter the maximum distance that the primary Y-axis can move in a single
   block.  If the primary Y-axis exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.5.5
5.   Maximum axis departure allowed for Secondary Y-axis:

   Enter the maximum distance that the secondary Y-axis can move in a single
   block.  If the secondary Y-axis exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.5.6
6.   Maximum axis departure allowed for Primary Z-axis:

   Enter the maximum distance that the primary Z-axis can move in a single
   block.  If the primary Z-axis exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.5.7
7.   Maximum axis departure allowed for Secondary Z-axis:

   Enter the maximum distance that the secondary Z-axis can move in a single
   block.  If the secondary Z-axis exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.5.8
8.   Maximum axis departure allowed for Rotary axis #1:

   Enter the maximum distance that the Rotary axis #1 can move in a single
   block.  If Rotary axis #1 exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.5.9
9.   Maximum axis departure allowed for Rotary axis #2:

   Enter the maximum distance that the Rotary axis #2 can move in a single
   block.  If Rotary axis #2 exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.5.10
10.   Maximum axis departure allowed for Rotary axis #3:

   Enter the maximum distance that the Rotary axis #3 can move in a single
   block.  If Rotary axis #3 exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.5.11
11.   Maximum axis departure allowed for Rotary axis #4:

   Enter the maximum distance that the Rotary axis #4 can move in a single
   block.  If Rotary axis #4 exceeds this movement, then the move will be
   broken up into multiple blocks.  Enter an extremely large number (99999999)
   if there is no such limitation.

   A negative value can be entered as the maximum axis departure.  In this case
   a warning message will be output whenever this distance is exceeded in a
   single block.  This is useful for notification when rotary axes move a
   large distance in a single block.
~7.6.1
1.   Does the control require acceleration spans:

   Acceleration blocks within PostWorks are used to limit the velocity of the
   tool when accelerating in order to keep the torque on the tool within an
   acceptable range.  They are not used to compensate for limitations of the
   machine control servos.  You should enable acceleration blocks if there is
   a possibility that undue pressure can be applied to the tool during machine
   acceleration.  Acceleration blocks are especially useful when transitioning
   from mult-axis moves, where the feed rates are slowed down dramatically due
   to the rotary axes speeds, to straight linear moves, where the feed rate is
   set back to the programmed feed rate.
~7.6.2
2.   Default mode for acceleration blocks.

   Acceleration blocks can be either enabled (On) or disabled (Off) by default
   at the start of the program.
~7.6.3
3.   Maximum vector velocity:

   Enter the maximum acceleration velocity of the machine.  This will be used
   by PostWorks as the vector velocity and not as the velocity of any single
   physical axis.  It is recommended that the velocity of the fastest axis be
   entered here as units per second.
~7.6.4
4.  Capped vector velocity:

   Enter the maximum acceleration velocity allowed for a move.  PostWorks will
   calculate acceleration blocks based on this velocity as compared to the
   physical vector velocity of the machine.  This value is entered in units
   per second.
~7.6.5
5.   Minimum feed rate step:

   Enter the minimum feed rate step that will be output in an acceleration
   block.  The feed rate in the acceleration block will be at least the previous
   feed rate value plus this amount.  This value is entered in units per minute.
~7.6.6
6.   Maximum feed rate step:

   Enter the maximum feed rate step that will be output in an acceleration
   block.  The feed rate in the acceleration block will not be over the previous
   feed rate value plus this amount.  This value is entered in units per minute.
~7.7.1
1.   Does the control support transformation codes:

   Enter Yes if the machine control can accept a transformation matrix that
   changes the default coordinate system.  Transformation matrices can be used
   on machines with a rotating head to align the current working plane with
   the standard XY-plane, thereby allowing automatic cycles, circular inter-
   polation, etc. to be output.

   When transformation codes are supported, the TRANS/mx and TRANS/TOOL commands
   are used to output the transformation matrix.
~7.7.2
2.   Are transformations based on active transformations:

   Some controls require that the transformation matrices be based on the
   default coordinate system, regardless if a modified coordinate system is
   in effect.  Enter No at this prompt in this case.

   Other machine controls will reference the transformation matrix based on
   the active coordinate system.  In this case, the matrices are considered
   accumulative in nature.  Enter Yes at this prompt, if the transformation
   matrix is based on the active coodinate system.
~7.7.3
3.   Enter transformation rotation output logic:

             1. Rotations are about a single vector.
             2. Rotations are about the major axes.
             3. Hybrid vector and major axes rotations.
             4. Use output rotary axes rotations.
             5. Rotations are output using Euler angles.

   PostWorks can output transformation matrices using different formats.
   The first (1) format will output the XYZ translations and a single rotation
   about a defined vector.  This format is typically used with the Fanuc
   controller.

   The second (2) format consists of XYZ translations combined with XYZ
   rotations.  The translations are applied first, with the rotations calculated
   around the XYZ axes second.  The order of the rotation calculations is
   defined in a following prompt.

   This format is typically used with the Siemens or Heidenhain controllers.

   The third (3) format consists of XYZ translations and with each axis
   rotation being output in a separate block containing the enable
   transformation rotations code, the IJK components of the major axis that
   the rotation is to occur about, and the actual rotation.  This is a hybrid
   of format (1) and format (2) in that a vector is output with the rotations,
   but the rotation must occur around a major axis.  This format is typically
   used with the Mazatrol controller.

   The fourth (4) format will use the active rotary axes positions as the
   transformation rotation values.  The transformation rotations will be the
   same as the output rotary axes (the rotation angles will match up with the
   axis that each rotary axis rotates about).

   The fifth (5) format will calculate the rotation values as Euler angles.
   The XYZ translations will be output along with the Euler rotation angles.
~7.7.4
4.   Order of rotation:

   This prompt is only displayed when the rotation values are calculated around
   the major axes.  Enter the order in which the rotations should be calculated,
   either Z first, Y second, and X last (ZXY), or X first, Y second, and Z
   last (XYZ).

   ZXY is typically supported by the Siemens controller and XYZ by the
   Heidenhain controller.
~7.7.5
5.   Rotations are output in opposite direction.

   Normally the rotations calculated for a transformation block will follow
   the right hand rule.  There are some controllers that require the rotaries
   moving in the opposite direction.  Enter Yes at this prompt if this
   controller requires the rotations to be output in the opposite direction.

   For most of the rotation output formats, this will simply reverse the sign
   of the rotation value.  For Euler angle output, the rotations will be
   calculated coming from the current tool plane to the tilted tool plane when
   Yes is specified at this prompt.
~7.7.6
6.   Use table rotations in transformation block calculation:

   Controllers that are able to perform their own machine axes rotation
   calculations when the rotary axes move typically require that the table
   rotations be included in the transformation block calculations.  Controllers
   that require that PostWorks perform the rotary axes adjustments for the
   linear axes will not typically require the table rotations in the
   transformation calculations, since these adjustments are already handled.
~7.7.7
7.   Use output rotary axis positions for coordinate transformations:

   This prompt will only be displayed when the transformation rotations are
   output using the rotary axes position values.  Entering Yes to this
   prompt will create an internal matrix that will match the rotary
   transformations as they are output to the transformation block, the same
   as the rotary axis positions.

   Entering No to this prompt will create an internal matrix that matches
   the standard method for calculating the transformation matrix when the
   rotary tranformations are output around the major axes or a single vector.
   The Heidenhain controller requires this calculation method.
~7.7.8
8.   Allow rotary axes movement when a transformation block is active:

   Answering No to this prompt will cause PostWorks to behave in the same
   manner as answering Yes to the previous prompt as described above when
   TRANS/TOOL,AUTO is in effect.  The positioning move will be output prior to
   the transformation block.  If a transformation block is already active when
   the tool axis changes, then the transformation block will be canceled, the
   positioning move made, and then the new transformation block will be
   activated.

   When TRANS/TOOL,NOW is in effect, then a warning message will be output
   whenever the tool axis changes and a transformation block is active.
~7.7.9
9.   Automatically cancel cutcom with enable transformations block:

   Enter Yes at this prompt if cutter compensation should be canceled prior
   to outputting an enable transformations block and immediately enabled after
   this block.
~7.7.10
10.   Automatically cancel transformations prior to motion block:

   Enter Yes at this prompt if the active transformation block should be
   canceled prior to outputting the programmed motion block when the
   transformation block is automatically calculated using the programmed
   tool end point and tool axis vector.  Enabling this option will cancel the
   active transformation, output the motion block, and enable the new
   transformations.

   Answer No at this prompt if the active transformation does not have to be
   deactivated or if code in the XFORM Macro will handle the canceling
   of the active transformation.
~7.7.11
11.   Use transformed coordinates for rapid move calculations:

   Typically transformation blocks will rotate the programmed coordinate
   system so that the tool axis is referenced as 0,0,1 and all motions,
   including circular interpolation and canned cycles, are referenced in the
   XY-plane.  Rapid motion adjustments can also be based on the current
   machine system when retracting along a major axis.

   If the rapid motion adjustments should be made along the major axis in
   the transformed system rather than the programmed system, then enter YES
   at this prompt.  This would be the typical answer here, since you would
   want the tool to retract along the transformed Z-axis rather than the
   Z-axis of the programmed system.  The only time you would want to answer
   NO to this prompt is when you may be posting for different machines, one
   of which does not support transformation blocks.  In this case, you would
   probably want the tool to retract/plunge along the tool axis, rather than
   along a major axis.
~7.8.1
1.   Enter enable translations code:

   Enter the register and its value that define a translation block.  The
   translation block will contain the XYZ translation values.  Typical codes
   are G(68) or ATRANS.
~7.8.2
2.   Enter enable rotations code:

   Enter the register and its value that define a rotation block.  The
   rotation block will contain the XYZ rotations or a vector definition and
   a single rotation.  It is possible that the translation block code and the
   rotation block code are the same.  In this case, the translations and
   rotations will be output in the same block.  Typical codes are G(68) or
   AROT.
~7.8.3
3.   Enter disable translations code:

   Enter the register and its value that will disable the translation values.
   This code can be the same as the "Enable Translations" code, in which case
   it will be output in a block by itself, without the translation values.
   Typical codes are G(69) or TRANS.
~7.8.4
4.   Enter disable rotations code:

   Enter the register and its value that will disable the rotation values.
   This code can be the same as the "Enable Rotations" code, in which case
   it will be output in a block by itself, without the rotation values.
   Typical codes are G(69) or ROT.
~7.8.5
5.   Enter X-transalation register:

   Enter the register that defines the X-translation value of a transformation
   matrix.
~7.8.6
6.   Enter Y-transalation register:

   Enter the register that defines the Y-translation value of a transformation
   matrix.
~7.8.7
7.   Enter Z-transalation register:

   Enter the register that defines the Z-translation value of a transformation
   matrix.
~7.8.8
8.   Enter X-rotation register:

   Enter the register that defines the X-rotation value of a transformation
   matrix.  This prompt will only be displayed when the rotations are not about
   a single vector.
~7.8.9
9.   Enter Y-rotation register:

   Enter the register that defines the Y-rotation value of a transformation
   matrix.  This prompt will only be displayed when the rotations are not about
   a single vector.
~7.8.10
10.  Enter Z-rotation register:

   Enter the register that defines the Z-rotation value of a transformation
   matrix.  This prompt will only be displayed when the rotations are not about
   a single vector.
~7.8.11
11.  Enter rotation vector I-component register:

   Enter the register that defines the I-component of the transformation
   matrix rotation vector.  This prompt will only be displayed when the
   rotations are about a single vector.
~7.8.12
12.  Enter rotation vector J-component register:

   Enter the register that defines the J-component of the transformation
   matrix rotation vector.  This prompt will only be displayed when the
   rotations are about a single vector.
~7.8.13
13.  Enter rotation vector K-component register:

   Enter the register that defines the K-component of the transformation
   matrix rotation vector.  This prompt will only be displayed when the
   rotations are about a single vector.
~7.8.14
14.  Enter rotation register:

   Enter the register that defines the rotation value about the transformation
   matrix vector.  This prompt will only be displayed when the rotations are
   about a single vector.
~7.8.15
15.  Enter non-positioning behavior code:

   Enter the register and its value that will be output to set the positioning
   behavior of the transformation matrix to keep the tool positioned at its
   current location.  This is the only mode currently supported.  The typical
   text of the register is 'STAY' for the Heidenhain controller.
~7.8.16
16.  Output XYZ translation registers when canceling translations:

   Some controllers handle translations in a more standard way (such as fixture
   offsets) than through the transformation process.  When output using a
   translation block rather than a transformation block, then it is usually
   required to output the XYZ translation registers with a value of 0 when
   canceling translations.  In this case, enter Yes at this prompt.  If
   translations are cancelled using a transformation cancel code and the XYZ
   translation registers are not required, then enter No.
~7.8.17
17.  Output transformation block in relation to current motion block:

      1. Output transformation block after motion block.
      1. Output transformation block prior to motion block.
      3. Transformation block is output prior to and after motion block output.

   This prompt determines when the transformation codes should be output or
   the XFORM Macro called in relation to when the motion block is output.

   Selecting 1 at this prompt will cause PostWorks to first output a
   positioning move when the tool axis changes and then output the
   transformation block when TRANS/TOOL,AUTO is in effect.  For example, in the 
   following sequence.

		N10 G01 X2.0 Y-2.0 Z3.0 B45.0 F100.0$
 		N20 G68 I0.0 J-1.0 K0.0 R-45.0$

   When selecting 2 at this prompt, the transformation block will be output
   first and then the positioning move, as follows.

		N10 G68 I0.0 J-1.0 K0.0 R-45.0$
 		N20 G01 X2.0 Y-2.0 Z3.0 F100.0$

   3 is typically only selected at this prompt when an XFORM Macro is defined.
   It causes the XFORM Macro to be called prior to the motion block and then
   again after the motion block.  This setting can be used to output the motion
   block in the middle of the transformation block output, such as when the
   transformation block needs to be canceled prior to outputting the motion
   block and then enabled after the motion block is output.
~8.0
0.   Walk through Milling Cycles.

   This selection will lead you through all of the sections used for defining
   milling cycles, including cycle definition codes, cycle parameter codes,
   positioning options, user defined blocks for cycles, and machining time cal-
   culations.

1.   Cycle definition codes.

   This section defines the cycle definition codes, for example, the codes
   output for CYCLE/OFF, CYCLE/DRILL, CYCLE/BORE, etc.

2.   Cycle parameter codes.

   This section defines the cycle parameter codes, for example the codes output
   for 'RAPTO,r', 'STEP,peck', etc.

3.   Cycle positioning parameters.

   This section contains support for unidirectional positioning, the format for
   certain positioning parameters, such as the final position and top of part
   modes, step parameter output, and defines the default rapid rate for cycles.

4.   Rapto and Retract parameters.

   This section defines the processing of the rapto and retract planes for
   automatic cycles.  It contains support for the output format for rapto/
   retract planes, the relationship of the rapto/retract planes to the top of
   the part, and when to retract the tool.

5.   Cycle block output.

   This section defines the output format for cycle blocks, including when to
   output the cycle parameters.

6.   Cycle User defined blocks.

   This section defines the User defined block to use for each supported
   automatic cycle sequence.

7.   Cycle machining times.

   This section defines the machining time calculation to use for each supported
   automatic cycle.  You can choose a separate machining estimation based on
   PWORKS generated cycles for each supported automatic cycle.

8.   Exit

   Exits the Milling Cycles section and returns you to the previous section.
~8.1.1
1.   Does this machine support automatic cycles:

   Enter YES if the machine control will accept automatic (canned) cycle blocks
   and will perform the cycle simulation itself.  An automatic cycle block
   usually contains a cycle definition code, cycle positions, and parameter
   codes, which will define the cycle to be performed.

   For example:

        G81 X1.0 Y2.0 Z-.3 R.1 F7.5$

   If you enter NO at this prompt, then PWORKS will output a series of linear
   moves that will simulate each cycle.
~8.1.2
2.   Automatic cycles are allowed in all 3 planes (XY,YZ,ZX):

   Enter NO if your machine only supports automatic cycles in the XY plane.  In
   this case, all cycle sequences in the YZ and ZX planes will be simulated by
   by outputting a series of linear moves.
~8.1.3
3.   Output cycles as Macro Call:

   Some machine controllers include support for automatic cycles as macros or
   subroutines, the most notable being the Siemens 840D controller.  Enter Yes
   to this prompt if your machine requires cycles to be called in the following
   format.

      MCALL CYCLE81 (p1,p2,...,pn)
~8.1.4
4.  Macro Call code:

   Enter the register and its value that is used to call modal automatic cycle
   macros.  The text 'MCALL' is usually used, so a register can be setup to
   have these characters as the starting string with no digits to the left or
   right of the decimal point (strictly text output).
~8.1.5
5.   Enter CYCLE/OFF code:

   Enter the register and its value that will cancel an automatic cycle
   sequence.  This code is usually G(80).
~8.1.6
6.   Enter CYCLE/BORE code:

   Enter the register and its value that will enable an automatic boring cycle
   at the machine.  This code will be output on CYCLE/BORE sequences.  If you
   do not enter a value here, then PWORKS will assume that the machine does not
   support a CYCLE/BORE automatic cycle and will simulate the cycle whenever
   a CYCLE/BORE command is programmed.

   The code most often used for CYCLE/BORE is G(86).
~8.1.7
7.   Enter CYCLE/BORE7 code:

   Enter the register and its value that will enable an automatic boring cycle
   at the machine.  This code will be output on CYCLE/BORE7 sequences.  If you
   do not enter a value here, then PWORKS will assume that the machine does not
   support a CYCLE/BORE7 automatic cycle and will simulate the cycle whenever
   a CYCLE/BORE7 command is programmed.

   The code most often used for CYCLE/BORE7 is G(87).
~8.1.8
8.   Enter CYCLE/BORE8 code:

   Enter the register and its value that will enable an automatic boring cycle
   at the machine.  This code will be output on CYCLE/BORE8 sequences.  If you
   do not enter a value here, then PWORKS will assume that the machine does not
   support a CYCLE/BORE8 automatic cycle and will simulate the cycle whenever
   a CYCLE/BORE8 command is programmed.

   The code most often used for CYCLE/BORE8 is G(88).
~8.1.9
9.   Enter CYCLE/BORE9 code:

   Enter the register and its value that will enable an automatic back boring
   cycle at the machine.  This code will be output on CYCLE/BORE9 sequences.
   If you do not enter a value here, then PWORKS will assume that the machine
   does not support a CYCLE/BORE9 automatic cycle and will simulate the cycle
   whenever a CYCLE/BORE9 command is programmed.

   The code most often used for CYCLE/BORE9 is G(89).
~8.1.10
10.   Enter CYCLE/DEEP code:

   Enter the register and its value that will enable an automatic chip breaking
   drill cycle at the machine.  This code will be output on CYCLE/DEEP
   sequences.  If you do not enter a value here, then PWORKS will assume that
   the machine does not support a CYCLE/DEEP automatic cycle and will simulate
   the cycle whenever a CYCLE/DEEP command is programmed.

   The code most often used for CYCLE/DEEP is G(83).
~8.1.11
11.   Enter CYCLE/DRILL code:

   Enter the register and its value that will enable an automatic drilling cycle
   at the machine.  This code will be output on CYCLE/DRILL sequences.  If you
   do not enter a value here, then PWORKS will assume that the machine does not
   support a CYCLE/DRILL automatic cycle and will simulate the cycle whenever
   a CYCLE/DRILL command is programmed.

   The code most often used for CYCLE/DRILL is G(81).
~8.1.12
12.   Enter CYCLE/FACE code:

   Enter the register and its value that will enable an automatic facing cycle
   at the machine.  This code will be output on CYCLE/FACE sequences.  If you
   do not enter a value here, then PWORKS will assume that the machine does not
   support a CYCLE/FACE automatic cycle and will simulate the cycle whenever
   a CYCLE/FACE command is programmed.

   The code most often used for CYCLE/FACE is G(82).
~8.1.13
13.   Enter CYCLE/MILL code:

   Enter the register and its value that will enable an automatic positioning
   cycle at the machine.  This code will be output on CYCLE/MILL sequences.  If
   you do not enter a value here, then PWORKS will assume that the machine does
   not support a CYCLE/MILL automatic cycle and will simulate the cycle whenever
   a CYCLE/MILL command is programmed.

   The code most often used for CYCLE/MILL is G(79), though CYCLE/MILL is not
   very commonly used.
~8.1.14
14.   Enter CYCLE/REAM code:

   Enter the register and its value that will enable an automatic reaming cycle
   at the machine.  This code will be output on CYCLE/REAM sequences.  If you
   do not enter a value here, then PWORKS will assume that the machine does not
   support a CYCLE/REAM automatic cycle and will simulate the cycle whenever
   a CYCLE/REAM command is programmed.

   The code most often used for CYCLE/REAM is G(85).
~8.1.15
15.   Enter CYCLE/REVERS code:

   Enter the register and its value that will enable an automatic left handed
   thread tapping cycle at the machine.  This code will be output on CYCLE/
   REVERS sequences.  If you do not enter a value here, then PWORKS will assume
   that the machine does not support a CYCLE/REVERS automatic cycle and will
   simulate the cycle whenever a CYCLE/REVERS command is programmed.

   The code most often used for CYCLE/REVERS is G(74), though CYCLE/REVERS is
   not very commonly used.
~8.1.16
16.   Enter CYCLE/SHIFT code:

   Enter the register and its value that will enable an automatic fine boring
   cycle at the machine.  This code will be output on CYCLE/SHIFT sequences.  If
   you do not enter a value here, then PWORKS will assume that the machine does
   not    support a CYCLE/SHIFT automatic cycle and will simulate the cycle
   whenever a CYCLE/SHIFT command is programmed.

   The code most often used for CYCLE/SHIFT is G(76), though CYCLE/SHIFT is not
   very commonly used.
~8.1.17
17.   Enter CYCLE/TAP code:

   Enter the register and its value that will enable an automatic right handed
   thread tapping cycle at the machine.  This code will be output on CYCLE/TAP
   sequences.  If you do not enter a value here, then PWORKS will assume that
   the machine does not support a CYCLE/TAP automatic cycle and will simulate
   the cycle whenever a CYCLE/TAP command is programmed.

   The code most often used for CYCLE/TAP is G(84).
~8.1.18
18.   Enter CYCLE/THRU code:

   Enter the register and its value that will enable an automatic deep hole
   drilling cycle at the machine.  This code will be output on CYCLE/THRU
   sequences.  If you do not enter a value here, then PWORKS will assume that
   the machine does not support a CYCLE/THRU automatic cycle and will simulate
   the cycle whenever a CYCLE/THRU command is programmed.

   The code most often used for CYCLE/THRU is G(87).
~8.1.19
19.   XY-plane selection code:

   Enter the register and its value that selects the XY automatic cycle plane.
   This is usually G(17).
~8.1.20
20.   ZX-plane selection code:

   Enter the register and its value that selects the ZX automatic cycle plane.
   This is usually G(18).
~8.1.21
21.   YZ-plane selection code:

   Enter the register and its value that selects the YZ automatic cycle plane.
   This is usually G(19).
~8.1.22
22.   Enter RAPID cycle interrupt code:

   A RAPID command programmed within any cycle sequence will suspend the cycle
   to output the RAPID move.  The move programmed with RAPID will be output as a
   positioning move and the cycle sequence will be reinstated immediately after
   this move.

   Some machines have a special code that supports this feature.  Enter the
   register and its value that will interrupt the active cycle for a single
   move.  If the machine does not support this feature, then leave this prompt
   blank and PWORKS will cancel the cycle and output the move using the rules
   governing RAPID moves.
~8.1.23
23.   Enter RETRCT/ON code:

   Enter the register and its value that will be output with the RETRCT/ON
   command.  RETRCT/ON specifies for the tool to fully retract to the level it
   was at prior to the cycle being activated.

   The RETRCT/ON code is usually G(98).  Please note that not all machines
   support this feature.
~8.1.24
24.   Enter RETRCT/OFF code:

   Enter the register and its value that will be output with the RETRCT/OFF
   command.  RETRCT/OFF specifies for the tool to retract to the rapto plane
   as defined by the 'RAPTO,r' cycle parameter.

   The RETRCT/OFF code is usually G(99).  Please note that not all machines
   support this feature.
~8.2.1
1.   Enter final depth register:

   Standard Register
   -----------------
   Enter the register that will contain the final depth for an automatic cycle.
   Normally you would leave this prompt blank and PWORKS will use the appropri-
   ate axis register for the final depth value.

   Some machines, though, require a value other than the final position to
   define the final cycle depth.  In this case enter a register other than an
   axis register that will contain the final depth value.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the final depth should be entered at this prompt.
   For example, in the following macro call, the final depth is the 4th
   parameter, so 4 should be entered at this prompt.

   CYCLE81 (x,x,x,DP,x)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.2
2.   Enter Top-of-part register:

   Standard Register
   -----------------
   Normally the position at the top of the part is not output in a cycle
   sequence.  Some machines, though, require this position in order to perform
   the cycle simulation.  In this case enter a register other than an axis
   register that will contain the position at the top of the part.

   If you do not enter a register at this prompt, then this position will not be
   output in a cycle sequence.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the top of part should be entered at this prompt.
   For example, in the following macro call, the top of part is the 2nd
   parameter, so 2 should be entered at this prompt.

   CYCLE81 (x,RFP,x,x,x)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.3
3.   Enter RAPTO plane register:

   Standard Register
   -----------------
   Enter the register that will contain the rapto plane value, as specified 
   using the 'RAPTO,r' cycle parameter.  This register is usually 'R'.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the rapto plane should be entered at this prompt.
   For example, in the following macro call, the rapto plane is the 3rd
   parameter, so 3 should be entered at this prompt.

   CYCLE81 (x,x,SDIS,x,x)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.4
4.   Enter Threads per Inch register:

   Standard Register
   -----------------
   Some machines allow for thread tapping cycles to contain the number of
   threads per inch/mm, instead of a feed rate, to control the tapping feed.
   If the machine has this feature, then enter the register that will contain
   the threads per inch/mm value for tapping cycles.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the thread size should be entered at this prompt.
   For example, in the following macro call, the thread size is the 8th
   parameter, so 8 should be entered at this prompt.

   CYCLE84 (x,x,x,x,x,x,x,MPIT)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.5
5.   Enter DWELL parameter 1 register:

   Standard Register
   -----------------
   Enter the register that will contain the dwell time specified by the
   'DWELL,dwl1' cycle parameter.  'dwl1' usually defines the machine dwell at
   the bottom of the hole.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the dwell value should be entered at this prompt.
   For example, in the following macro call, the dwell time is the 6th
   parameter, so 6 should be entered at this prompt.

   CYCLE85 (x,x,x,x,x,DTB)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.6
6.   Enter DWELL parameter 2 register:

   Standard Register
   -----------------
   Enter the register that will contain the dwell time specified by the
   'DWELL,dwl2' cycle parameter.  'dwl2' usually defines the machine dwell at
   the top of the hole for multiple pass cycles.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the second dwell value should be entered at this prompt.
   For example, in the following macro call, the dwell time is the 10th
   parameter, so 10 should be entered at this prompt.

   CYCLE83 (x,x,x,x,x,x,x,x,x,DTS)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.7
7.   Enter STEP parameter 1 register:

   Standard Register
   -----------------
   Enter the register that will contain the initial depth of cut as specified by
   the 'STEP,peck1' cycle parameter.  'peck1' usually defines either the depth
   of the first cut or the depth of all cuts in a multiple pass cycle.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the step value should be entered at this prompt.
   For example, in the following macro call, the step value is the 6th
   parameter, so 6 should be entered at this prompt.

   CYCLE83 (x,x,x,x,x,FDEP)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.8
8.   Enter STEP parameter 2 register:

   Standard Register
   -----------------
   Enter the register that will contain the final depth of cut as specified by
   the 'STEP,peck2' cycle parameter.  'peck2' usually defines the depth of the
   final cut in a multiple pass cycle.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the second step value should be entered at this prompt.
   For example, in the following macro call, the step value is the 8th
   parameter, so 8 should be entered at this prompt.

   CYCLE83 (x,x,x,x,x,x,x,DAM)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.9
9.   Enter single parameter OFFSET register:

   Standard Register
   -----------------
   Enter the register that will contain the offset value when the 'OFFSET,off1'
   cycle parameter is specified without 'off2'.  'off1' by itself usually
   defines the offset distance opposite the spindle orientation direction for
   shifting the tool in a fine boring or back boring cycle.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the offset value should be entered at this prompt.
   For example, in the following macro call, the offset value is the 8th
   parameter, so 8 should be entered at this prompt.

   CYCLE86 (x,x,x,x,x,x,x,RPA)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.10
10.   Enter X-axis OFFSET register:

   Enter the register that will contain the X-axis offset value as specified by
   the 'OFFSET' cycle parameter.  'off1' will contain the X-axis offset value
   when the cycle is programmed in the XY plane.  'off2' will contain the X-axis
   offset value when the cycle is programmed in the ZX plane.  This offset value
   will usually be used in a fine boring or back boring cycle.
~8.2.11
11.   Enter Y-axis OFFSET register:

   Enter the register that will contain the Y-axis offset value as specified by
   the 'OFFSET' cycle parameter.  'off2' will contain the Y-axis offset value
   when the cycle is programmed in the XY plane.  'off1' will contain the Y-axis
   offset value when the cycle is programmed in the YZ plane.  This offset value
   will usually be used in a fine boring or back boring cycle.
~8.2.12
12.   Enter Z-axis OFFSET register:

   Enter the register that will contain the Z-axis offset value as specified by
   the 'OFFSET' cycle parameter.  'off1' will contain the Z-axis offset value
   when the cycle is programmed in the ZX plane.  'off2' will contain the Z-axis
   offset value when the cycle is programmed in the YZ plane.  This offset value
   will usually be used in a fine boring or back boring cycle.
~8.2.13
13.   Should XY plane registers always be output as OFFSET registers:

   Enter YES if the offset registers for the X and Y axes contain the offset
   values, as specified in the 'OFFSET' cycle parameter, no matter what plane
   the cycle is activated in.  If you enter NO to this prompt, then the offset
   registers corresponding to the axes in the active cycle plane will be output.
~8.2.14
14.   Enter RTRCTO parameter 1 register:

   Standard Register
   -----------------
   Enter the register that will contain the value specified by the 'RTRCTO,ret'
   cycle parameter.  'ret' usually defines the level above each cut to retract
   to in a multiple pass cycle.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the retract plane should be entered at this prompt.
   For example, in the following macro call, the retract plane is the 1st
   parameter, so 1 should be entered at this prompt.

   CYCLE81 (RTP,x,x,x,x)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.15
15.   Enter RTRCTO parameter 2 register:

   Standard Register
   -----------------
   Enter the register that will contain the value specified by the 'RTRCTO,
   plng' cycle parameter.  'plng' usually defines the level above the previous
   cut to position at to after retracting the tool in a multiple pass cycle.

   Macro Parameter
   ---------------
   If automatic cycles are output as macro calls, then the macro parameter
   number that contains the retract value should be entered at this prompt.
   For example, in the following macro call, the retract value is the 15th
   parameter, so 15 should be entered at this prompt.

   CYCLE83 (x,x,x,x,x,x,x,x,x,x,x,x,x,x,VRT)

   There are some cases when the same cycle register will be in different
   parameter positions in different cycle macros.  You can use the User defined
   block definitions for each cycle to rearrange the order of the parameters.
~8.2.16
16.   Enter REPEAT parameter register:

   Enter the register that will contain the value specified by the 'REPEAT,rep'
   cycle parameter.  'rep' usually defines the number of repetitions for each
   cycle block to perform at equal increments.
~8.3.1
1.   Output a unidirectional positioning move prior to each cycle point:

   Enter YES if the machine requires the axes to always move in the same
   direction when positioning above the hole for a cycle operation.  When
   unidirectional positioning has been enabled, PWORKS will cancel the active
   cycle, move to a position at a specified distance and direction from the
   hole, move to the hole and enable the cycle.

   This feature is usually only required on older machines that require the 
   axes to always position in the same direction in order to hold tolerance.
~8.3.2
2.   Enter positioning direction vector:

   Enter the direction that the cycle axes must move when positioning above the
   hole for a cycle operation.  Enter the direction in the format of a 3 dimen-
   sional vector, 'i,j,k'.  This prompt will only be displayed when unidirec-
   tional positioning has been enabled.
~8.3.3
3.   Enter positioning distance:

   Enter the distance away from the hole that the tool should position at prior
   to moving to the hole and performing the cycle, when making a unidirectional
   positioning move.
~8.3.4
4.   Position above hole prior to issuing CYCLE/DEEP block:

   Some machines require that the tool already be positioned above the hole
   prior to programming a chip breaking cycle block.  If you enter YES at this
   prompt, then PWORKS will automatically cancel the cycle and position above
   the hole prior to outputting the CYCLE/DEEP parameter block.

   Enter NO to this prompt if your machine does not have this requirement.
   Machines that require this feature usually use some of the axis registers
   to specify cycle parameters.
~8.3.5
5.   Mode for final depth value:

   Enter the number that corresponds to the output format for the final depth
   value in a cycle block.

       1. Same as currently programmed mode.
       2. Always absolute.
       3. Always incremental.

   Some machines, though they support both absolute and incremental modes,
   require that the final depth in a cycle block be programmed in only one
   mode.  When this is the case, it is usually the incremental mode.
~8.3.6
6.   The final depth distance is relative to ...:

   Enter the number that corresponds to the plane which the final depth will
   reference when it is output in incremental mode.

       1  = The incremental final depth value will come from the rapto plane
            as defined by the 'RAPTO,r' cycle parameter.

       2  = The incremental final depth value will come from the clearance
            plane, defined as the tool position prior to activating the cycle.

       3  = The incremental final depth value will come from the top of the
            part, as defined in the GOTO point motion for this hole.  Only use
            this option if the top of the part is output in a cycle block.
~8.3.7
7.   Mode for Top-of-part:

   Enter the number that corresponds to the output format for the top of the
   part, when this value is output on a cycle block.

       1. Same as currently programmed mode.
       2. Always absolute.
       3. Always incremental.

   Some machines, though they support both absolute and incremental modes,
   require that the top of the part in a cycle block be programmed in only one
   mode.  This prompt will only be displayed when a register has been defined
   for the top of the part in a cycle block.
~8.3.8
8.   Output format for STEP (peck) parameters:

   Enter the number that corresponds to the output format to use with STEP cycle
   parameters.

       1  = The cycle STEP parameters will be output with the same sign
            (positive or negative) as they contained on the input CYCLE command.

       2  = The cycle STEP parameters will always be output as positive values.

       3  = The cycle STEP parameters will always be output as negative values.

       4  = PWORKS will calculate the number of cuts required to satisfy the
            depth of each cut as specified by the STEP cycle parameter(s).  The
            number of cuts required will be output in the cycle block.
~8.3.9
9.  Default rapid rate for cycles:

   Enter the feed rate in Feed Per Minute to use when calculating the machining
   time for rapid moves during a cycle sequence.  This feed will actually be
   used for rapid moves when PWORKS generated (manual) cycles are output.
   Specifying a value of 0 will cause the machine's rapid rate to be used.
~8.4.1
1.   Mode for rapto plane value:

   Enter the number that corresponds to the output format for the rapto plane
   value in a cycle block, as specified by the 'RAPTO,r' cycle parameter.

       1. Same as currently programmed mode.
       2. Always absolute.
       3. Always incremental.
       4. Incremental distance form Top-of-part.

   Some machines, though they support both absolute and incremental modes,
   require that the rapto plane in a cycle block be programmed in only one
   mode.  When this is the case, it is usually the absolute mode.
~8.4.2
2. Enter calculation type for rapto plane:

   Enter the number that corresponds to the calculation method for the cycle
   rapto plane when both primary and secondary axes are supported for any of
   the linear axes.

        1. Rapto plane is based on input coordinate.
        2. Rapto plane is based on active linear axis.

   Calculation method 1 will base the rapto plane value solely on the input
   coordinate with no consideration for the active linear axis or the position
   of the stable axis.

   Calculation method 2 bases the rapto plane value on the active linear axis
   taking into consideration the calculation method for the secondary axis and
   the position of the stable axis.
~8.4.3
3.   Enter gage height difference between rapto plane & top of part:

   Some machines, such as Cincinnatis, have an automatic rapto plane feature
   that will compensate for a clearance distance above the part when position-
   ing above the hole in a canned cycle sequence.

   Enter the automatic clearance value at this prompt.  PWORKS will use this
   value when calculating the rapto plane output.  The 'RAPTO,r' cycle parameter
   should still be specified as an incremental distance from the top of the
   part, without any consideration given to the automatic clearance value.

   Enter a value of 0 if the machine does not have an automatic rapto plane
   feature.
~8.4.4
4.   Mode for retract plane depth value:

   Enter the number that corresponds to the output format for the retract plane
   value in a cycle block.

       1  = Output the retract plane, as specified in the 'RTRCTO' cycle
            parameter, as an absolute position.

       2  = Output the retract plane as an incremental distance from the rapto
            plane.

       3  = Output the retract plane as an incremental distance from the top of
            the part.

   Some machines, though they support both absolute and incremental modes,
   require that the retract plane in a cycle block be programmed in only one
   mode.
~8.4.5
5. Enter calculation type for retract plane:

   Enter the number that corresponds to the calculation method for the cycle
   retract plane when both primary and secondary axes are supported for any of
   the linear axes.

        1. Retract plane is based on input coordinate.
        2. Retract plane is based on active linear axis.

   Calculation method 1 will base the retract plane value solely on the input
   coordinate with no consideration for the active linear axis or the position
   of the stable axis.

   Calculation method 2 bases the retract plane value on the active linear axis
   taking into consideration the calculation method for the secondary axis and
   the position of the stable axis.
~8.4.6
6.   Enter the final retract logic to use:

   Enter the number that corresponds to the retract positioning move that will
   be performed at the end of a cycle sequence.

       1. The RETRCT plane will be used.
       2. Always retract to the clearance plane.
       3. Always retract to the rapto plane.

   PWORKS always needs to know where the tool is positioned.  Since canned
   cycle motion is performed by the machine control and not by PWORKS, you must
   define the retract method that the machine will use.
~8.4.7
7.   Should the 1st RTRCTO value override the normal retract logic:

   Enter YES if the 'RTRCTO,ret' cycle parameter specifies the actual position
   that the tool will retract to after completing a cycle sequence.  In this
   case, PWORKS will use the 'ret' position as the final position in a cycle
   sequence.
~8.4.8
8.   Output a retract level code ...:

   Enter the number that cooresponds whan a retract level code should be

   Some machines will always retract to the rapto plane at the end of a canned
   cycle sequence, but will accept a code, as specified by the RTRCTO cycle
   parameter, to be output when a plane other than the rapto plane is used to
   retract the tool.  Other machines require a retract code on each cycle de-
   finition block.

   Enter the number of the choice which conforms to your machine.

        1.  when RTRCTO is specified or RETRCT/ON is in effect.
        2.  only when the RTRCTO parameter is specified.
        3.  always.

   A retract code will always be output whenever the RTRCTO parameter is speci-
   fied on the CYCLE command.  Selecting option 1 will also output a retract
   code whenever RETRCT/ON is in effect (the tool retracts to the clearance
   plane after each cycle).  Option 2 will ignore the status of the RETRCT com-
   mand when determining when to output a retract code.  Option 3 will output a
   retract code on the cycle definition block when RTRCTO is specified, RETRCT/
   ON is in effect, or RETRCT/OFF is in effect.

   Usage of option 3 allows machines which require retract codes to use source
   commands and resulting motion to be compatible with machines which use a
   modal setting for retraction to the clearance or rapto planes.
~8.4.9
9.   Output a retract block when the rapto plane increases:

   Enter YES if the machine will not automatically adjust for a rapto plane
   level that is greater than the previous level.  In this case, PWORKS will
   output a tool retract block whenever the rapto plane level increases.
~8.4.10
10.   Enter the format for a retract block:

   Enter the number that corresponds to the format of a tool retract block.  A
   tool retract block will be output whenever the rapto plane level increases
   and it was enabled in the previous prompt.

       1. The cycle will be canceled and a rapid move will be output.
       2. The cycle will be canceled and a new retract plane will be output.

   In both cases, the active cycle mode will be reinstated directly after the
   retract block.
~8.4.11
11.   Retract tool at each level of CYCLE/THRU:

   On some machines, the CYCLE/THRU canned cycle will generate motion to drill
   through multiple levels of a part, instead of performing a deep hole drilling
   cycle with multiple pecks.  On a multiple level drill cycle, the part will
   look something like pictured below.

                      |||   |||   |||
                      ---   ---   ---   <---  Multiple level hole to drill.
                      |||   |||   |||
                      |||||||||||||||
                      |||||||||||||||

   Enter NO if the CYCLE/THRU command will initiate a multiple level drill
   cycle.  In this case, PWORKS will leave the tool at the hole bottom and not
   retract it after the cycle sequence.
~8.4.12
12.   Enter motion alteration for cycle generated rapid moves:

   Enter the value that corresponds to the way you want the cycle generated
   rapid positioning moves output to the control tape.  The cycle positioning
   moves occur when transitioning between one cycle location and the next cycle 
   location.

       1. Use the default rapid alteration setting.
       2. Alter rapid moves along the X-axis.
       3. Alter rapid moves along the Y-axis.
       4. Alter rapid moves along the Z-axis.
       5. Alter rapid moves along major tool axis.

   The default rapid alteration setting is used for all other rapid moves and
   is defined in the Rapid Set-up section of the Feedrate and Rapid section of
   MakePost.
~8.4.13
13.   Retract/plunge rapid moves along tool axis:

   This prompt will only be display when cycle rapid moves are modified along
   the major tool axis.  Enter YES if you want rapid motion to retract or
   plunge (depending on the movement of the major axis) along the tool axis,
   instead of moving straight along the major axis.
~8.5.1
1.   Force cycle definition code on the initial cycle block:

   Enter YES if the first location in a canned cycle must contain the definition
   code for the active cycle sequence.  PWORKS will force out the cycle defini-
   tion code on the cycle block immediately following the CYCLE command.

   If you enter NO at this prompt, then the normal output control for the cycle
   definition register will be used to determine when it will be output.
~8.5.2
2.   Force active linear axes on the initial cycle block:

   Enter YES if the first location in a canned cycle must contain both of the
   positioning axis locations, even if the position has not changed.  PWORKS
   will force out both positioning axis registers on the cycle block immediately
   following the CYCLE command.

   If you enter NO at this prompt, then the normal output control for the 
   positioning axis registers will be used to determine when they will be
   output.
~8.5.3
3.   Force linear axes output on every cycle block:

   Enter YES if every location programmed during a cycle sequence must contain
   both of the positioning axis locations, even if the position has not
   changed.  PWORKS will force out both positioning axis registers on every
   positioning block during the cycle sequence.

   If you enter NO at this prompt, then the normal output control for the
   positioning axis registers will be used to determine when they will be
   output.
~8.5.4
4.   Force input cycle parameters on every cycle block:

   Enter YES if every location programmed during a cycle sequence should be a
   full cycle definition block.  A cycle definition block will contain the cycle
   definition code, axes position, final depth, feed rate, and the cycle regis-
   ters that were programmed on the CYCLE command.
~8.5.5
5.   Output a feedrate with cycle blocks:

   Enter YES if you can program a feed rate in a cycle sequence.  If you enter
   NO to this prompt, then a feed rate code will not be output with the cycle
   sequence and the last programmed feed rate will be used for the cycle motion.

   SEPARATE specifies that the feed rate should be output in a block prior to
   the actual cycle block.  This setting is only valid when cycles are output
   as a Macro call since they work a bit differently than standard blocks.  To
   force the feed rate out in a block prior to the cycle block with standard
   cycles define a User Defined Block with 'F,$' specified at the beginning of
   the block.
~8.5.6
6.   Force feedrate on the inital cycle block:

   Enter YES if the first location in a canned cycle must contain a feed rate
   code.  PWORKS will force out the feed rate code on the cycle block immediate-
   ly following the CYCLE command.

   If you enter NO at this prompt, then the normal output control for the feed
   rate register will be used to determine when it will be output.
~8.5.7
7.   Should TPI value be output as a negative number with CYCLE/REVERS:

   Enter YES if the machine control requires that reverse tapping cycles
   (CYCLE/REVERS) contain a negative value for the Threads Per Inch register.
   Most controls support a separate cycle code for reverse tapping.  In this
   case enter NO.
~8.5.8
8.   Should a full cycle block be output when the final depth changes:

   Enter YES if a full cycle defintion block should be output whenever the
   absolute final depth position changes.  A cycle definition block will contain
   the cycle definition code, axes position, final depth, feed rate, and the
   cycle registers that were programmed on the CYCLE command.
~8.5.9
9.   Automatically lock feedrate/spindle overrides with CYCLE/TAP:

   Enter YES if PWORKS should automatically output the disable feed rate and
   spindle override codes at the beginning of a manual thread tapping cycle.
   The overrides will be reenabled after the tapping motion is complete.

   This feature is used in order to prohibit the operator from changing the
   tool and spindle feeds at the machine.
~8.5.10
10.  Force linear interpolation code after CYCLE/OFF:

   Enter YES if the linear interpolation code should be forced out on the first
   motion block following a CYCLE/OFF comamnd.

   If you enter NO at this prompt, then the normal output control for the linear
   interpolation register will be used to determine when it will be output.
~8.6.1
1.   CYCLE/OFF User defined block:

   Enter the number of the User defined block you want to be output when the
   CYCLE/OFF command is programmed.  Enter a value of 0 if the cycle cancel-
   lation block does not require a special format, other than having a CYCLE/OFF
   code.
~8.6.2
2.   CYCLE/BORE User defined block:

   Standard Register
   -----------------
   Enter the number of the User defined block that defines the output format
   for the CYCLE/BORE definition block.  User defined blocks that are used for
   CYCLE statements differ from their normal usage.  The normal processing of a
   User defined block will force out each code defined as part of the block,
   whereas CYCLE User defined blocks only define the order of the codes to be
   output in multiple blocks.  The codes contained in a CYCLE User defined block
   will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G81 X__ Y__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = Both cycle positioning axis registers.
        Z  = Final depth register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.

   Macro Parameter
   ---------------
   User defined blocks for Macro Parameters differ from other User defined
   blocks, in that the order of the cycle macro parameters are entered in the
   User defined block rather than the registers.  For example, a user defined
   block for a cycle statement that is output as a macro call may read as
   follows.

      #4  1,2,3,4,5,8,12,7

   This will cause the cycle block to be output as follows.

      CYCLE83 (parm-1,parm-2,parm-3,parm-4,parm-5,parm-8,parm-12,parm-7)

   CYCLE83 (x,x,x,x,x,x,x,x,x,x,x,x,x,x,VRT)
~8.6.3
3.   CYCLE/BORE7 User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/BORE7 definition block.
~8.6.4
4.   CYCLE/BORE8 User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/BORE8 definition block.
~8.6.5
5.   CYCLE/BORE9 User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/BORE9 definition block.
~8.6.6
6.   CYCLE/DEEP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/DEEP definition block.
~8.6.7
7.   CYCLE/DRILL User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/DRILL definition block.
~8.6.8
8.   CYCLE/FACE User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/FACE definition block.
~8.6.9
9.   CYCLE/MILL User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/MILL definition block.
~8.6.10
10.   CYCLE/REAM User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/BORE definition block.
~8.6.11
11.   CYCLE/REVERS User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/REVERS definition block.
~8.6.12
12.   CYCLE/SHIFT User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/SHIFT definition block.
~8.6.13
13.   CYCLE/TAP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/TAP definition block.
~8.6.14
14.   CYCLE/THRU User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/THRU definition block.
~8.7.1
1.   Enter CYCLE/BORE time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/BORE sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.2
2.   Enter CYCLE/BORE7 time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/BORE7 sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.3
3.   Enter CYCLE/BORE8 time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/BORE8 sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.4
4.   Enter CYCLE/BORE9 time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/BORE9 sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.5
5.   Enter CYCLE/DEEP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/DEEP sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.6
6.   Enter CYCLE/DRILL time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/DRILL sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.7
7.   Enter CYCLE/FACE time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/FACE sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.8
8.   Enter CYCLE/MILL time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/MILL sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.9
9.   Enter CYCLE/REAM time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/REAM sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.10
10.   Enter CYCLE/REVERS time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/REVERS sequence.  You can enter any of the fol-
   lowing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.11
11.   Enter CYCLE/SHIFT time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/SHIFT sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.12
12.   Enter CYCLE/TAP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/TAP sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.13
13.   Enter CYCLE/THRU time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/THRU sequence.  You can enter any of the follow-
   ing manual cycle modes.

        BORE       BORE9      FACE       REVERS     THRU
        BORE7      DEEP       MILL       SHIFT
        BORE8      DRILL      REAM       TAP

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~8.7.14
14.   Use the first STEP parameter in time calculations:

   Enter YES if the 'STEP,peck1' parameter specifies the depth of the first cut
   for multiple pass cycles.  If 'peck1' specifies some other value, such as the
   number of cuts to make, then enter NO at this prompt, or else the machining
   time estimation for multiple pass cycles will be adversely effected.
~8.7.15
15.   Use the second STEP parameter in time calculations:

   Enter YES if the 'STEP,peck2' parameter specifies the depth of the final cut
   for multiple pass cycles.  If 'peck2' specifies some other value, such as a
   retract value, then enter NO at this prompt, or else the machining time
   estimation for multiple pass cycles will be adversely effected.
~8.7.16
16.  Estimate delta distances during automatic cycles:

   Normally PostWorks will only use the output blocks during automatic cycles
   to calculate the machining distances (axis delta movements), which can be
   useful when comparing the Slide Motion Recaps from one run to another, since
   the delta summations will be different when comparing automatic cycle output
   to simulated cycle output.  At times it is necessary to see a more exact
   estimate of the machining distances during automatic cycles, for example
   when estimating tool life.

   Enter YES at this prompt if the total machining distances during automatic
   cycles should be included in the axis delta summations kept by PostWorks.
   Please note that only the positioning move, feed in, and feed out motions
   will be included in the machining distance calculations.  Any peck and/or
   shift movement will not be included, since it is deemed only the cutting 
   movement of the automatic cycle is important and PostWorks cannot accurately
   estimate how the machine will perform the peck and/or shift sequences.
~9.0
0.   Walk through Lathe Cycles.

   This selection will lead you through all of the sections used for defining
   lathe cycles, including cycle definition codes, cycle parameter codes,
   positioning options, user defined blocks for cycles and machining time cal-
   culations.

1.   Cycle definition codes.

   This section defines the cycle definition codes, for example, the codes
   output for CYCLE/FACE, CYCLE/THREAD, CYCLE/TURN, etc.

2.   Cycle parameter codes.

   This section defines the cycle parameter codes, for example, the codes output
   for 'RAPTO,r', 'STEP,peck', etc.

3.   Cycle positioning parameters.

   This section contains support for the format for certain positioning parame-
   ters, such as the final position, step parameter output, and defines the
   default rapid rate for cycles.

4.   Cycle block output.

   This section defines the output format for cycle blocks, including when to
   output the cycle parameters.

5.   Cycle User defined blocks.

   This section defines the User defined block to use for each supported
   automatic cycle sequence.

6.   Cycle machining times.

   This section defines the machining time calculation to use for each supported
   automatic cycle.  You can choose a separate machining estimation based on
   PWORKS generated cycles for each supported automatic cycle.

7.   Exit

   Exits the Lathe Cycles section and returns you to the previous section.
~9.1.1
1.   Does this machine support automatic cycles:

   Enter YES if the machine control will accept automatic (canned) cycle blocks
   and will perform the cycle simulation itself.  An automatic cycle block
   usually contains a cycle definition code, cycle positions and parameter
   codes, that will define the cycle to be performed.

   For example:

        G75 X3.5 Z.12 I.8 K1.4 D2.5 F7.5$

   If you enter NO at this prompt, then PWORKS will output a series of blocks
   that will simulate each cycle.
~9.1.2
2.   Enter constant lead threadcutting code:

   Enter the register and its value that will enable a constant lead thread
   cutting sequence.  This code will be output using the THREAD command and is
   usually G(33).
~9.1.3
3.   Enter increasing variable lead threadcutting code:

   Enter the register and its value that will enable increasing variable lead
   thread cutting at the machine.  Increasing variable lead thread cutting will
   increase the lead of the thread by a specified amount across the length of
   the thread.  This code will be output using the THREAD/,INCR command.

~9.1.4
4.   Enter decreasing variable lead threadcutting code:

   Enter the register and its value that will enable decreasing variable lead
   thread cutting at the machine.  Decreasing variable lead thread cutting will
   decrease the lead of the thread by a specified amount across the length of
   the thread.  This code will be output using the THREAD/,DECR command.
~9.1.5
5.   Enter CYCLE/OFF code:

   Enter the register and its value that will cancel an automatic cycle
   sequence.  A cycle termination code is usually not required on lathes.
~9.1.6
6.   Enter CYCLE/DEEP code:

   Enter the register and its value that will enable an automatic grooving
   cycle at the machine.  This code will be output on CYCLE/DEEP sequences.  If
   you do not enter a value here, then PWORKS will assume that the machine does
   not support a CYCLE/DEEP automatic cycle and will simulate the cycle whenever
   a CYCLE/DEEP command is programmed.
~9.1.7
7.   Enter CYCLE/DEEP w/STEP code:

   Enter the register and its value that will enable an automatic multiple pass
   grooving cycle at the machine.  This code will be output on CYCLE/DEEP,STEP
   sequences.  If you do not enter a value here, then PWORKS will assume that
   the machine does not support a CYCLE/DEEP,STEP automatic cycle and will
   simulate the cycle whenever a CYCLE/DEEP,STEP command is programmed.

   The code most often used for CYCLE/DEEP,STEP is G(75).
~9.1.8
8.   Enter CYCLE/DRILL code:

   Enter the register and its value that will enable an automatic drilling
   cycle at the machine.  This code will be output on CYCLE/DRILL sequences.  If
   you do not enter a value here, then PWORKS will assume that the machine does
   not support a CYCLE/DRILL automatic cycle and will simulate the cycle when-
   ever a CYCLE/DRILL command is programmed.
~9.1.9
9.   Enter CYCLE/DRILL w/STEP code:

   Enter the register and its value that will enable an automatic multiple pass
   drilling cycle at the machine.  This code will be output on CYCLE/DRILL,STEP
   sequences.  If you do not enter a value here, then PWORKS will assume that
   the machine does not support a CYCLE/DRILL,STEP automatic cycle and will
   simulate the cycle whenever a CYCLE/DRILL,STEP command is programmed.
~9.1.10
10.   Enter CYCLE/FACE code:

   Enter the register and its value that will enable an automatic facing cycle
   at the machine.  This code will be output on CYCLE/FACE sequences.  If you do
   not enter a value here, then PWORKS will assume that the machine does not
   support a CYCLE/FACE automatic cycle and will simulate the cycle whenever a
   CYCLE/FACE command is programmed.

   The code most often used for CYCLE/FACE is G(94).
~9.1.11
11.   Enter CYCLE/FACE w/STEP code:

   Enter the register and its value that will enable an automatic multiple pass
   facing cycle at the machine.  This code will be output on CYCLE/FACE,STEP
   sequences.  If you do not enter a value here, then PWORKS will assume that
   the machine does not support a CYCLE/FACE,STEP automatic cycle and will
   simulate the cycle whenever a CYCLE/FACE,STEP command is programmed.
~9.1.12
12.   Enter CYCLE/ROUGH code:

   Enter the register and its value that will enable an automatic turning cycle
   at the machine.  This code will be output on CYCLE/ROUGH sequences.  If you
   do not enter a value here, then PWORKS will assume that the machine does not
   support a CYCLE/ROUGH automatic cycle and will simulate the cycle whenever
   a CYCLE/ROUGH command is programmed.
~9.1.13
13.   Enter CYCLE/ROUGH w/STEP code:

   Enter the register and its value that will enable an automatic multiple pass
   turning cycle at the machine.  This code will be output on CYCLE/ROUGH,STEP
   sequences.  If you do not enter a value here, then PWORKS will assume that
   the machine does not support a CYCLE/ROUGH,STEP automatic cycle and will
   simulate the cycle whenever a CYCLE/ROUGH,STEP command is programmed.
~9.1.14
14.   Enter CYCLE/THREAD code:

   Enter the register and its value that will enable an automatic thread cutting
   cycle at the machine.  This code will be output on CYCLE/THREAD sequences. If
   you do not enter a value here, then PWORKS will assume that the machine does
   not support a CYCLE/THREAD automatic cycle and will simulate the cycle when-
   ever a CYCLE/THREAD command is programmed.

   The code most often used for CYCLE/THREAD is G(92).
~9.1.15
15.   Enter CYCLE/THREAD w/STEP code:

   Enter the register and its value that will enable an automatic multiple pass
   thread cutting cycle at the machine.  This code will be output on CYCLE/
   THREAD,STEP sequences.  If you do not enter a value here, then PWORKS will
   assume that the machine does not support a CYCLE/THREAD,STEP automatic cycle
   and will simulate the cycle whenever a CYCLE/THREAD,STEP command is program-
   med.

   The code most often used for CYCLE/THREAD,STEP is G(76).
~9.1.16
16.   Enter CYCLE/THRU code:

   Enter the register and its value that will enable an automatic deep hole
   drilling cycle at the machine.  This code will be output on CYCLE/THRU
   sequences.  If you do not enter a value here, then PWORKS will assume that
   the machine does not support a CYCLE/THRU automatic cycle and will simulate
   the cycle whenever a CYCLE/THRU command is programmed.
~9.1.17
17.   Enter CYCLE/THRU w/STEP code:

   Enter the register and its value that will enable an automatic multiple pass
   deep hole drilling cycle at the machine.  This code will be output on CYCLE/
   THRU,STEP sequences.  If you do not enter a value here, then PWORKS will
   assume that the machine does not support a CYCLE/THRU,STEP automatic cycle
   and will simulate the cycle whenever a CYCLE/THRU,STEP command is programmed.

   The code most often used for CYCLE/THRU,STEP is G(74).
~9.1.18
18.   Enter CYCLE/TURN code:

   Enter the register and its value that will enable an automatic turning cycle
   at the machine.  This code will be output on CYCLE/TURN sequences.  If you do
   not enter a value here, then PWORKS will assume that the machine does not
   support a CYCLE/TURN automatic cycle and will simulate the cycle whenever a
   CYCLE/TURN command is programmed.

   The code most often used for CYCLE/TURN,STEP is G(90).
~9.1.19
19.   Enter CYCLE/TURN w/STEP code:

   Enter the register and its value that will enable an automatic multiple pass
   turning cycle at the machine.  This code will be output on CYCLE/TURN,STEP
   sequences.  If you do not enter a value here, then PWORKS will assume that
   the machine does not support a CYCLE/TURN,STEP automatic cycle and will
   simulate the cycle whenever a CYCLE/TURN,STEP command is programmed.
~9.2.1
1.   Enter Z-axis lead register:

   Enter the register that will contain the thread lead for the Z-axis as
   specified using the THREAD command and 'TPI,leadk' cycle parameter.  This
   register is usually 'F3'.
~9.2.2
2.   Enter X-axis lead register:

   Enter the register that will contain the thread lead for the X-axis as
   specified using the THREAD command and 'TPI,leadi' cycle parameter.
~9.2.3
3.   Enter increasing variable lead register:

   Enter the register that will contain the amount of increment for increasing
   variable lead thread cutting.  Increasing variable lead thread cutting is
   enabled using the THREAD/,INCR command.
~9.2.4
4.   Enter decreasing variable lead register:

   Enter the register that will contain the amount of decrement for decreasing
   variable lead thread cutting.  Decreasing variable lead thread cutting is
   enabled using the THREAD/,DECR command.
~9.2.5
5.   Enter final Z-axis position register:

   Enter the register that will contain the final Z-axis position for an auto-
   matic cycle.  Normally you would leave this prompt blank and PWORKS will use
   the appropriate Z-axis register for the final position value.

   Some machines, though, require a separate register for the Z-axis when pro-
   gramming an automatic cycle.  In this case enter a register other than an
   axis register that will contain the final Z-axis position.
~9.2.6
6.   Enter final X-axis position register:

   Enter the register that will contain the final X-axis position for an auto-
   matic cycle.  Normally you would leave this prompt blank and PWORKS will use
   the appropriate X-axis register for the final position value.

   Some machines, though, require a separate register for the X-axis when pro-
   gramming an automatic cycle.  In this case enter a register other than an
   axis register that will contain the final X-axis position.
~9.2.7
7.   Enter FEDTO parameter register:

   Enter the register that will contain the plunging axis offset value, as
   specified using the 'FEDTO,depth' cycle parameter.  This register is usually
   'K2'.
~9.2.8
8.   Enter OFFSET parameter 1 register:

   Enter the register that will contain the Z-axis offset value as specified by
   the 'OFFSET,off1' cycle parameter.  This register is usually 'I2'.
~9.2.9
9.   Enter OFFSET parameter 2 register:

   Enter the register that will contain the X-axis offset value as specified by
   the 'OFFSET,off2' cycle parameter.
~9.2.10
10.   Enter RAPTO parameter register:

   Enter the register that will contain the rapto distance, as specified using
   the 'RAPTO,r' cycle parameter.
~9.2.11
11.   Enter REPEAT parameter register:

   Enter the register that will contain the final pass count, as specified using
   the 'REPEAT,rep' cycle parameter.
~9.2.12
12.   Enter RTRCTO parameter 1 register:

   Enter the register that will contain the retract level, as specified using
   the 'RTRCTO,ret1' cycle parameter.
~9.2.13
13.   Enter RTRCTO parameter 2 register:

   Enter the register that will contain the retract level, as specified using
   the 'RTRCTO,ret2' cycle parameter.  This register is usually 'R'.
~9.2.14
14.   Enter STEP parameter 1 register:

   Enter the register that will contain the initial depth of cut as specified by
   the 'STEP,peck1' cycle parameter.  'peck1' usually defines either the depth
   of the first cut or the depth of all cuts in a multiple pass cycle.  This
   register is usually 'K2'.
~9.2.15
15.   Enter STEP parameter 2 register:

   Enter the register that will contain the final depth of cut as specified by
   the 'STEP,peck2' cycle parameter.  'peck2' usually defines the depth of the
   the final cut in a multiple pass cycle.  This register is usually 'I2'.
~9.2.16
16.   Enter TOOL parameter 1 register:

   Enter the register that will contain the angle of the cutting tool, as
   specified using the 'TOOL,t1' cycle parameter.  The angle of the cutting
   tool is usually used with thread cutting cycles.  This register is usually
   'D'.
~9.2.17
17.   Enter TOOL parameter 2 register:

   Enter the register that will contain the value specified by the 'TOOL,t2'
   cycle parameter.
~9.2.18
18.   Enter Chamfer ON code:

   Enter the register and its value that will enable automatic chamfering on
   thread cutting cycles.  The CYCLE/...,ON command will enable chamfering.
   M(23) is usually used.
~9.2.19
19.   Enter Chamfer OFF code:

   Enter the register and its value that will disable automatic chamfering on
   thread cutting cycles.  The CYCLE/...,OFF command will disable chamfering.
   M(24) is usually used.
~9.3.1
1.   Position to taper position prior to issuing CYCLE/THREAD,STEP block:

   Some machines require that the tool already be positioned at the initial cut
   prior to programming a multiple pass tapered thread cutting cycle.  If you
   enter YES at this prompt, then PWORKS will automatically cancel the cycle and
   position at the start of the tapered thread prior to outputting the CYCLE/
   THREAD,STEP parameter block.

   Enter NO to this prompt if your machine does not have this requirement.
   Machines that require this feature usually use some of the axis registers
   to specify cycle parameters.
~9.3.2
2.   Position to taper position prior to issuing CYCLE/TURN,STEP block:

   Some machines require that the tool already be positioned at the initial cut
   prior to programming a multiple pass tapered turning cycle.  If you enter YES
   at this prompt, then PWORKS will automatically cancel the cycle and position
   at the start of the tapered cut prior to outputting the CYCLE/TURN,STEP
   parameter block.

   Enter NO to this prompt if your machine does not have this requirement.
   Machines that require this feature usually use some of the axis registers
   to specify cycle parameters.
~9.3.3
3.   Mode for automatic cycles:

   Enter the number that corresponds to the output format for the automatic
   cycle block output.

       1. Same as currently programmed mode.
       2. Always absolute.
       3. Always incremental.

   Some machines, though they support both absolute and incremental modes,
   require that the automatic cycle position(s) be programmed in only one mode.
   When this is the case, it is usually the absolute mode.
~9.3.4
4.   Output format for STEP (peck) parameters:

   Enter the number that corresponds to the output format to use with STEP cycle
   parameters.

       1  = The cycle STEP parameters will be output with the same sign
            (positive or negative) as they contained on the input CYCLE command.

       2  = The cycle STEP parameters will always be output as positive values.

       3  = The cycle STEP parameters will always be output as negative values.
~9.3.5
5.  Default rapid rate for cycles:

   Enter the feed rate in Feed Per Minute to use when calculating the machining
   time for rapid moves during a cycle sequence.  This feed will actually be
   used for rapid moves when PWORKS generated (manual) cycles are output.
   Specifying a value of 0 will cause the machine's rapid rate to be used.
~9.4.1
1.   Force cycle definition code on the initial cycle block:

   Enter YES if the first location in a canned cycle must contain the definition
   code for the active cycle sequence.  PWORKS will force out the cycle defini-
   tion code on the cycle block immediately following the CYCLE command.

   If you enter NO at this prompt, then the normal output control for the cycle
   definition register will be used to determine when it will be output.
~9.4.2
2.   Force active linear axes on the initial cycle block:

   Enter YES if the first location in a canned cycle must contain both axis
   positions, even if the positions have not changed.  PWORKS will force out
   both the Z and X axis registers on the cycle block immediately following the
   CYCLE command.

   If you enter NO at this prompt, then the normal output control for the Z and
   X axis registers will be used to determine when they will be output.
~9.4.3
3.   Force input cycle parameters on every cycle block:

   Enter YES if every location programmed during a cycle sequence should be a
   full cycle definition block.  A cycle definition block will contain the cycle
   definition code, axes position, feed rate, and the cycle registers that were
   programmed on the CYCLE command.
~9.4.4
4.   Force feedrate on the inital cycle block:

   Enter YES if the first location in a canned cycle must contain a feed rate
   code.  PWORKS will force out the feed rate code on the cycle block immediate-
   ly following the CYCLE command.

   If you enter NO at this prompt, then the normal output control for the feed
   rate register will be used to determine when it will be output.
~9.4.5
5.   Force linear interpolation code after CYCLE/OFF:

   Enter YES if the linear interpolation code should be forced out on the first
   motion block following a CYCLE/OFF comamnd.

   If you enter NO at this prompt, then the normal output control for the linear
   interpolation register will be used to determine when it will be output.
~9.4.6
6.   Automatically cancel cycle after first move:

   Enter YES if cycles should be considered a one shot command and immediately
   canceled after a single cycle block.  If you enter NO, then the programmed
   cycle will remain active until explicitly canceled by the CYCLE/OFF command.
~9.5.1
1.   CYCLE/OFF User defined block:

   Enter the number of the User defined block you want to be output when the
   CYCLE/OFF command is programmed.  Enter a value of 0 if the cycle cancel-
   lation block does not require any special format, other having a CYCLE/OFF
   code.
~9.5.2
2.   CYCLE/DEEP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/DEEP definition block.  User defined blocks that are used for
   CYCLE statements differ from their normal usage.  The normal processing of a
   User defined block will force out each code defined as part of the block,
   whereas CYCLE User defined blocks only define the order of the codes to be
   output in multiple blocks.  The codes contained in a CYCLE User defined block
   will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.3
3.   CYCLE/DEEP w/STEP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/DEEP,STEP definition block.  User defined blocks that are used
   for CYCLE statements differ from their normal usage.  The normal processing
   of a User defined block will force out each code defined as part of the
   block, whereas CYCLE User defined blocks only define the order of the codes
   to be output in multiple blocks.  The codes contained in a CYCLE User defined
   block will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.4
4.   CYCLE/DRILL User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/DRILL definition block.  User defined blocks that are used for
   CYCLE statements differ from their normal usage.  The normal processing of a
   User defined block will force out each code defined as part of the block,
   whereas CYCLE User defined blocks only define the order of the codes to be
   output in multiple blocks.  The codes contained in a CYCLE User defined block
   will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.5
5.   CYCLE/DRILL w/STEP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/DRILL,STEP definition block.  User defined blocks that are used
   for CYCLE statements differ from their normal usage.  The normal processing
   of a User defined block will force out each code defined as part of the
   block, whereas CYCLE User defined blocks only define the order of the codes
   to be output in multiple blocks.  The codes contained in a CYCLE User defined
   block will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.6
6.   CYCLE/FACE User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/FACE definition block.  User defined blocks that are used for
   CYCLE statements differ from their normal usage.  The normal processing of a
   User defined block will force out each code defined as part of the block,
   whereas CYCLE User defined blocks only define the order of the codes to be
   output in multiple blocks.  The codes contained in a CYCLE User defined block
   will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.7
7.   CYCLE/FACE w/STEP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/FACE,STEP definition block.  User defined blocks that are used
   for CYCLE statements differ from their normal usage.  The normal processing
   of a User defined block will force out each code defined as part of the
   block, whereas CYCLE User defined blocks only define the order of the codes
   to be output in multiple blocks.  The codes contained in a CYCLE User defined
   block will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.8
8.   CYCLE/ROUGH User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/ROUGH definition block.  User defined blocks that are used for
   CYCLE statements differ from their normal usage.  The normal processing of a
   User defined block will force out each code defined as part of the block,
   whereas CYCLE User defined blocks only define the order of the codes to be
   output in multiple blocks.  The codes contained in a CYCLE User defined block
   will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.9
9.   CYCLE/ROUGH w/STEP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/ROUGH,STEP definition block.  User defined blocks that are used
   for CYCLE statements differ from their normal usage.  The normal processing
   of a User defined block will force out each code defined as part of the
   block, whereas CYCLE User defined blocks only define the order of the codes
   to be output in multiple blocks.  The codes contained in a CYCLE User defined
   block will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.10
10.   CYCLE/THREAD User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/THREAD definition block.  User defined blocks that are used for
   CYCLE statements differ from their normal usage.  The normal processing of a
   User defined block will force out each code defined as part of the block,
   whereas CYCLE User defined blocks only define the order of the codes to be
   output in multiple blocks.  The codes contained in a CYCLE User defined block
   will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.11
11.   CYCLE/THREAD w/STEP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/THREAD,STEP definition block. User defined blocks that are used
   for CYCLE statements differ from their normal usage.  The normal processing
   of a User defined block will force out each code defined as part of the
   block, whereas CYCLE User defined blocks only define the order of the codes
   to be output in multiple blocks.  The codes contained in a CYCLE User defined
   block will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.12
12.   CYCLE/THRU User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/THRU definition block.  User defined blocks that are used for
   CYCLE statements differ from their normal usage.  The normal processing of a
   User defined block will force out each code defined as part of the block,
   whereas CYCLE User defined blocks only define the order of the codes to be
   output in multiple blocks.  The codes contained in a CYCLE User defined block
   will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.13
13.   CYCLE/THRU w/STEP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/THRU,STEP definition block.  User defined blocks that are used
   for CYCLE statements differ from their normal usage.  The normal processing
   of a User defined block will force out each code defined as part of the
   block, whereas CYCLE User defined blocks only define the order of the codes
   to be output in multiple blocks.  The codes contained in a CYCLE User defined
   block will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.14
14.   CYCLE/TURN User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/TURN definition block.  User defined blocks that are used for
   CYCLE statements differ from their normal usage.  The normal processing of a
   User defined block will force out each code defined as part of the block,
   whereas CYCLE User defined blocks only define the order of the codes to be
   output in multiple blocks.  The codes contained in a CYCLE User defined block
   will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.5.15
15.   CYCLE/TURN w/STEP User defined block:

   Enter the number of the User defined block that defines the output format
   for the CYCLE/TURN,STEP definition block.  User defined blocks that are used
   for CYCLE statements differ from their normal usage.  The normal processing
   of a User defined block will force out each code defined as part of the
   block, whereas CYCLE User defined blocks only define the order of the codes
   to be output in multiple blocks.  The codes contained in a CYCLE User defined
   block will not necessarily be output.

   For example, when a cycle block needs to be output in the following format,
   then you would specify a User defined block as described.

        Cycle Block Format             User defined block description
        ------------------             ------------------------------

        G79 I1__ J1__ R__$             G(79),I1,J1,R,$
        G90 X__ Z__ F__$

   In the above example, a G79 cycle parameter definition block, containing
   for example, both 'STEP' cycle parameters and the 'RAPTO,r' cycle parameter,
   is required prior to the actual cycle block.  The User defined block for this
   example defines only the G79 block terminated with the End-of-block charac-
   ter.  All registers that are not in the User defined block, will be output in
   the following block.  If the I1, J1 and R registers are not output, then the
   entire G79 block will not be output.

   The following register descriptors have special meaning when used in a CYCLE
   User defined block.

        X  = X-axis final position register.
        Z  = Z-axis final position register.
        F  = Feed rate register.

   If the cycle definition block is not required to be output in more than a
   single block containing all of the cycle parameters, then enter a value of 0.
~9.6.1
1.   Enter CYCLE/DEEP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/DEEP sequence.  You can enter any of the follow-
   ing manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.2
2.   Enter CYCLE/DEEP w/STEP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/DEEP,STEP sequence.  You can enter any of the
   following manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.3
3.   Enter CYCLE/DRILL time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/DRILL sequence.  You can enter any of the follow-
   ing manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.4
4.   Enter CYCLE/DRILL w/STEP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/DRILL,STEP sequence.  You can enter any of the
   following manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.5
5.   Enter CYCLE/FACE time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/FACE sequence.  You can enter any of the follow-
   ing manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.6
6.   Enter CYCLE/FACE w/STEP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/FACE,STEP sequence.  You can enter any of the
   following manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.7
7.   Enter CYCLE/ROUGH time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/ROUGH sequence.  You can enter any of the follow-
   ing manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.8
8.   Enter CYCLE/ROUGH w/STEP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/ROUGH,STEP sequence.  You can enter any of the
   following manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.9
9.   Enter CYCLE/THREAD time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/THREAD sequence.  You can enter any of the fol-
   lowing manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.10
10.   Enter CYCLE/THREAD w/STEP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/THREAD,STEP sequence.  You can enter any of the
   following manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.11
11.   Enter CYCLE/THRU time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/THRU sequence.  You can enter any of the follow-
   ing manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.12
12.   Enter CYCLE/THRU w/STEP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/THRU,STEP sequence.  You can enter any of the
   following manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.13
13.   Enter CYCLE/TURN time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/TURN sequence.  You can enter any of the follow-
   ing manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~9.6.14
14.   Enter CYCLE/TURN w/STEP time calculations:

   Enter the manual cycle mode that should be used for estimating the machining
   time for an automatic CYCLE/TURN,STEP sequence.  You can enter any of the
   following manual cycle modes.

        DEEP     DRILL    FACE     ROUGH    THREAD   THRU     TURN

   See the PWORKS manual cycle commands for a description of the simulated
   motion that will be used to estimate the canned cycle time.
~10.1
1.   Output sequence numbers by default:

   Enter YES if you want sequence numbers output by default at the start of the
   part program.  You can enable and disable sequence numbers during the part
   program by using the SEQNO command.
~10.2
2.  Register for sequence numbers:

   Enter the register descriptor for sequence numbers.  This is usually 'N'.
~10.3
3.   Beginning sequence number:

   Enter the sequence number to output on the first block.  This value can be
   changed using the SEQNO/n command.
~10.4
4.   Sequence number increment:

   Enter the value to increment sequence numbers by.  This value will be added
   to the sequence number after each block.  You can change this value during
   the part program by using the SEQNO/n,INCR,i command.
~10.5
5.   Output sequence numbers every nth block:

   Enter the value that defines the increment of output blocks that will contain
   sequence numbers.  For example, if you enter 3, then every third block will
   contain a sequence number.  You can change this value during the part program
   by using the SEQNO/n,INCR,i,m command.
~10.6
6.   Maximum sequence number:

   Enter the maximum sequence number allowed.  The sequence number will reset to
   1 after this limit has been reached.
~10.7
7.   Register for alignment block number:

   Enter the register to output as an alignment block sequence number.  Align-
   ment blocks are output using the TMARK command.
~10.8
8.   User defined block for non-motion alignment blocks:

   Enter the number of the User defined block you want to be output for an
   alignment block that does not contain any motion.  A value of 0 can be
   entered, disabling any extra codes from being output.
~10.9
9.   User defined block for motion alignment blocks:

   Enter the number of the User defined block you want to be output for an
   alignment block that contains axes motion.  A value of 0 can be entered,
   disabling any extra codes from being output.
~10.10
10.   User defined block for automatic cycle blocks:

   Enter the number of the User defined block to output when an alignment block
   is output during a cycle sequence, because of the CYCLE/,START command.  If
   a value of 0 is entered, then only the alignment block register will be
   forced out in a cycle alignment block.
~11.0
0.   Walk through Spindle & Coolant parameters.

   This selection will lead you through all of the aspects of defining spindle
   speeds and coolant output.

1.   Spindle Set-up.

   This section defines the format for spindle speed output, surface speed per
   minute support, and the number of ranges that are supported.

2.   Spindle registers:

   This section defines the registers that are required for spindle speed
   output, including speeds, direction, range selections, and mode selections.

3.   Low range spindle speed table.

   This section sets up the low range spindle speed table.  Low range spindle
   speeds and their corresponding output values will be defined.  The low range
   spindle table can only be entered when either 2 or 3 spindle ranges are
   supported and the spindle speed is output using a table.

4.   Medium range spindle speed table.

   This section sets up the medium range spindle speed table.  Medium range
   spindle speeds and their corresponding output values will be defined.  The
   medimum range spindle table can only be entered when either 1 or 3 spindle
   ranges are supported and the spindle speed is output using a table.

5.   High range spindle speed table.

   This section sets up the high range spindle speed table.  High range spindle
   speeds and their corresponding output values will be defined.  The high range
   spindle table can only be entered when either 2 or 3 spindle ranges are
   supported and the spindle speed is output using a table.

6.   Coolant Set-up.

   Defines the codes required to turn the coolant on and off.  Also, defines
   combination spindle on and coolant on codes.

7.   Exit

   Exits the Spindle & Coolant section and returns you to the previous section.
~11.1.1
1.   Enter spindle speed output format:

   Enter the value that specifies the format for spindle speeds output to the
   control tape.

       1. Use the spindle speed as reference only.
       2. Output the spindle speed as a direct RPM/SFM value.
       3. Output using a predefined spindle table.
       4. Output as a percentage of the maximum spindle speed.

   All values, except for number 1, will cause the spindle speed to be output.
   Number 3 uses a spindle table that is defined in a following section.  Number
   4 will output a percentage of the spindle speed, from 1 to 99 percent.
~11.1.2
2.   Does the machine controller support SFM spindle control:

   Enter YES if the machine will accept codes that will control the spindle
   speed using Surface Feed per Minute speeds instead of Revolutions Per
   Minute speeds.  You can switch between SFM and RPM control by using the
   SPINDL command.

   If you enter NO, then PWORKS will calculate and output RPM spindle speeds
   when you request SFM speed control using the SPINDL/SFM command.
~11.1.3
3.   Enter number of spindle ranges:

   Enter the number of physical spindle speed ranges that the machine has.  You
   can enter from 1 to 3 ranges.  Following is a list of ranges supported,
   depending on the number entered.

       1 = Medium
       2 = Low, High
       3 = Low, Medium, High

   When multiple ranges are supported, you can select the range manually using
   the SPINDL/...,range command or PWORKS can automatically select the range
   when you use the SPINDLE/...,AUTO command.
~11.1.4
4.   Low range spindle speed limits [min,max]:

   Enter the minimum and maximum spindle speeds allowed for the low range.  This
   prompt will only be displayed when either 2 or 3 spindle ranges are support-
   ed.
~11.1.5
5.   Medium range spindle speed limits [min,max]:

   Enter the minimum and maximum spindle speeds allowed for the medium range.
   This prompt will only be displayed when either 1 or 3 spindle ranges are
   supported.
~11.1.6
6.   High range spindle speed limits [min,max]:

   Enter the minimum and maximum spindle speeds allowed for the high range.
   This prompt will only be displayed when either 2 or 3 spindle ranges are
   supported.
~11.1.7
7.   SFM spindle speed limits [min,max]:

   Enter the minimum and maximum Surface Feed per Minute speeds allowed.  This
   prompt will only be displayed when SFM control is supported by the machine.
~11.1.8
8.   Tolerance for RPM output when in SFM mode:

   This prompt will only be displayed when the machine does not support SFM
   spindle speed control and PWORKS converts SFM speeds to RPM speeds.  Enter
   the tolerance that will be used to determine when a new RPM speed should be
   output.  A new RPM speed will only be output when it changes by at least the
   tolerance entered.
~11.1.9
9.   Low range spindle speed limits for mill head [min,max]:

   Enter the minimum and maximum spindle speeds allowed for the low range of
   the milling attachment.  This prompt will only be displayed when either 2 or
   3 spindle ranges are supported and the machine type is a Mill/Turn.
~11.1.10
10.  Medium range spindle speed limits for mill head [min,max]:

   Enter the minimum and maximum spindle speeds allowed for the medium range
   of the milling attachment.  This prompt will only be displayed when either
   1 or 3 spindle ranges are supported and the machine type is a Mill/Turn.
~11.1.11
11.  High range spindle speed limits for mill head [min,max]:

   Enter the minimum and maximum spindle speeds allowed for the high range of
   the milling attachment.  This prompt will only be displayed when either 2 or
   3 spindle ranges are supported and the machine type is a Mill/Turn.
~11.2.1
1.  Spindle RPM speed register:

   Enter the register descriptor for RPM spindle speeds.  This is usually 'S'.
~11.2.2
2.  Spindle SFM speed register:

   Enter the regsiter description for SFM spindle speeds.  This prompt will only
   be displayed when the machine supports SFM speed control.  The register
   format for SFM speeds is usually different than for RPM spindle speeds.
~11.2.3
3.  Spindle CLW code:

   Enter the register and its value for turning on the spindle in a clockwise
   direction.  This is usually M(03).
~11.2.4
4.  Spindle CCLW code:

   Enter the register and its value for turning on the spindle in a counter-
   clockwise direction.  This is usually M(04).
~11.2.5
5.  Spindle OFF code:

   Enter the register and its value for turning the spindle off.  This is
   usually M(05).
~11.2.6
6.   Spindle ORIENT code:

   Enter the register and its value for stopping the spindle in its orientation
   location.  This is a fixed location on the spindle that the tool will always
   stop at.  Some machines do not have a spindle orientation position.
~11.2.7
7.   Spindle BOTH code:

   Enter the register and its value for turning on the spindle when the SPINDL/
   ...,BOTH command is encountered.  This code usually consists of a spindle CLW
   code, an optional skip character, and a spindle CCLW code (M03/M04).

   You can describe a register in this manner by using the text string 'M03/' as
   the beginning characters of the register and 'M04' as the ending characters.
   In this circumstance, enter only a register at this prompt, do not include a
   value.
~11.2.8
8.   Low range spindle code:

   Enter the register and its value that will activate the low speed spindle
   range.  This prompt will only be displayed when there are either 2 or 3
   spindle ranges supported.
~11.2.9
9.   Medium range spindle code:

   Enter the register and its value that will activate the medium speed spindle
   range.  This prompt will only be displayed when there are either 1 or 3
   spindle ranges supported.
~11.2.10
10.   High range spindle code:

   Enter the register and its value that will activate the high speed spindle
   range.  This prompt will only be displayed when there are either 2 or 3
   spindle ranges supported.
~11.2.11
11.   RPM spindle speed control code:

   Enter the register and its value that will activate Revolutions per Minute
   speed control.  Usually, an RPM speed control code is only used when both
   RPM and SFM spindle speed controls are supported.  The code normally used is
   G(97).
~11.2.12
12.   SFM spindle speed control code:

   Enter the register and its value that will activate Surface Feed per Minute
   speed control.  This prompt will only be displayed when the machine supports
   SFM spindle speed control.  The code normally used is G(96).
~11.2.13
13.   SFM maximum spindle speed control code:

   Enter the register and its value that defines a block which contains the
   maximum spindle revolutions per minute when the machine is in SFM speed
   control mode.  This prompt will only be displayed when the machine supports
   SFM spindle speed control.

   The maximum spindle RPM block is output using the SPINDL/MAXRPM command and
   contains a limit on how fast the spindle can rotate.  The code normally used
   is G(50).
~11.2.14
14.   SFM spindle radius register:

   Enter the register descriptor that will be output with the SPINDL/...,RADIUS
   command.  This command overrides the internally calculated radius used in
   SFM calculations.  This prompt will only be displayed when the machine
   supports SFM spindle speed control.
~11.2.15
15.   Disable spindle speed overrides code:

   Enter the register and its value that will disable the machine operator from
   overriding spindle speeds.  The disable spindle speed overrides code is
   output using the SPINDL/LOCK,ON command.
~11.2.16
16.   Enable spindle speed overrides code:

   Enter the register and its value that will enable the machine operator to
   override spindle speeds at the control.  The enable spindle speed overrides
   code is output using the SPINDL/LOCK,OFF command.
~11.2.17
17.   User defined block for spindle on blocks:

   PWORKS normally outputs the spindle on codes (direction and speed) on the
   block following the SPINDL/ON command.  If you require a special sequence for
   turning the spindle on or require that the spindle on codes be output in a
   block by themselves, then enter a predefined User defined block number here.

   If you do enter a value other than 0 (no User defined block), then you must
   include the spindle codes in the block definition, or else they will not be
   output.
~11.2.18
18.   Output spindle off codes in a block by themselves:

   Enter YES if you want the spindle off and orient codes output in a block by
   themselves.  Otherwise, they will be output in the following block.
~11.3.0
The Low Range Spindle Table form allows you to define the available spindle
speeds for the low range spindle and the actual value each speed will output.

The value to the left of the equals, under the heading 'Code,' is the value
that will be output when the spindle speed matches the value to the right of the
equals, under the 'Rpm' heading.

When using the 'mpost' interface, there are no headings or equals character.
The number in the left column of each section is the value that will be
output when the spindle speed matches the value in the right column of each
section.

The spindle speed table lookup will compare the programmed spindle speed to a
value in the table, if the speeds match exactly or the programmed speed is
greater than the table speed but less than the next speed in the table, then a
match will occur.

The spindle speed values must be entered in ascending order (from lowest to
highest).  The table is structured so that it ascends from left to right and
then from top to bottom (the same as a written page).
~11.4.0
The Medium Range Spindle Table form allows you to define the available spindle
speeds for the medium range spindle and the actual value each speed will output.

The value to the left of the equals, under the heading 'Code,' is the value
that will be output when the spindle speed matches the value to the right of the
equals, under the 'Rpm' heading.

When using the 'mpost' interface, there are no headings or equals character.
The number in the left column of each section is the value that will be
output when the spindle speed matches the value in the right column of each
section.

The spindle speed table lookup will compare the programmed spindle speed to a
value in the table, if the speeds match exactly or the programmed speed is
greater than the table speed but less than the next speed in the table, then a
match will occur.

The spindle speed values must be entered in ascending order (from lowest to
highest).  The table is structured so that it ascends from left to right and
then from top to bottom (the same as a written page).
~11.5.0
The High Range Spindle Table form allows you to define the available spindle
speeds for the high range spindle and the actual value each speed will output.

The value to the left of the equals, under the heading 'Code', is the value
that will be output when the spindle speed matches the value to the right of the
equals, under the 'Rpm' heading.

When using the 'mpost' interface, there are no headings or equals character.
The number in the left column of each section is the value that will be
output when the spindle speed matches the value in the right column of each
section.

The spindle speed table lookup will compare the programmed spindle speed to a
value in the table, if the speeds match exactly or the programmed speed is
greater than the table speed but less than the next speed in the table, then a
match will occur.

The spindle speed values must be entered in ascending order (from lowest to
highest).  The table is structured so that it ascends from left to right and
then from top to bottom (the same as a written page).
~11.6.1
1.   Coolant mist code:

   Enter the register and its value that will turn on the mist coolant at the
   machine.  The M(07) code is usually used.
~11.6.2
2.   Coolant flood code:

   Enter the register and its value that will turn on the flood coolant at the
   machine.  The M(08) code is usually used.
~11.6.3
3.   Coolant air code:

   Enter the register and its value that will turn on the air only coolant at
   the machine.
~11.6.4
4.  Coolant OFF code:

   Enter the register and its value for turning the coolant off.  This is
   usually M(09).
~11.6.5
5.   Combination spindle CLW and coolant mist code:

   Enter the register and its value that will turn the mist coolant on and the
   spindle on in the clockwise direction.  If your machine does not support this
   feature, then do not enter any code.  For machines that support combination
   spindle/on and coolant/on codes, the M(13) code is normally used.
~11.6.6
6.   Combination spindle CCLW and coolant mist code:

   Enter the register and its value that will turn the mist coolant on and the
   spindle on in the counter-clockwise direction.  If your machine does not
   support this feature, then do not enter any code.  For machines that support
   combination spindle/on and coolant/on codes, the M(14) code is normally used.
~11.6.7
7.   Combination spindle CLW and coolant flood code:

   Enter the register and its value that will turn the flood coolant on and the
   spindle on in the clockwise direction.  If your machine does not support this
   feature, then do not enter any code.  For machines that support combination
   spindle/on and coolant/on codes, the M(17) code is normally used.
~11.6.8
8.   Combination spindle CCLW and coolant flood code:

   Enter the register and its value that will turn the flood coolant on and the
   spindle on in the counter-clockwise direction.  If your machine does not
   support this feature, then do not enter any code.  For machines that support
   combination spindle/on and coolant/on codes, the M(18) code is normally used.
~11.6.9
9.   Combination spindle CLW and coolant air code:

   Enter the register and its value that will turn the air coolant on and the
   spindle on in the clockwise direction.  If your machine does not support this
   feature, then do not enter any code.
~11.6.10
10.   Combination spindle CCLW and coolant air code:

   Enter the register and its value that will turn the air coolant on and the
   spindle on in the counter-clockwise direction.  If your machine does not
   support this feature, then do not enter any code.

~11.6.11
11.   Output coolant on codes in a block by themselves:

   Enter YES if you want coolant on (MIST,FLOOD,AIR) codes output in a block by
   themselves.  Otherwise, they will be output in the following block.
~11.6.12
12.   Output coolant off codes in a block by themselves:

   Enter YES if you want coolant off codes output in a block by themselves.
   Otherwise, they will be output in the block following a COOLNT/OFF command.
~12.0
0.   Walk through Feedrate & Rapid parameters.

   This selection will lead you through all of the aspects of defining the
   supported feedrate and rapid formats, including FPM, FPR, 1/T and DPM feed
   rate modes, rapid motion adjustments, machine feedrate limits, etc.

1.   Miscellaneous Feedrate Set-up.

   This section defines which feedrate modes are supported by the machine, how
   the FEDRAT command is handled and which feedrate mode to output with rotary
   motion.

2.   Feed per Minute Feedrates.

   This section defines how FPM feedrates are output, including extended
   precision FPM feedrates.

3.   Feed per Revolution Feedrates.

   This section defines how FPR feedrates are output, including automatically
   setting the FPR feedrate mode under certain circumstances.

4.   Degrees per Minute Feedrates.

   This section defines how DPM feedrates are output, including the pulse weight
   to use for linear and rotary axes when calculating degrees per minute feed
   rates.  This section can only be entered when DPM feedrates are output with
   rotary motion.

5.   Inverse Time Feedrates.

   This section defines how 1/T feedrates are output, including extended
   precision 1/T feedrates.

6.   Feed per Minute feedrate table.

   This section sets up the FPM feedrate table.  FPM feedrates and their
   corresponding output values will be defined.  The FPM feedrate table form
   can only be entered when FPM feedrates are output using a table.

7.   Feed per Revolution feedrate table.

   This section sets up the FPR feedrate table.  FPR feedrates and their
   corresponding output values will be defined.  The FPR feedrate table form
   can only be entered when FPR feedrates are output using a table.

8.   Rapid Set-up.

   This section defines whether the machine supports rapid mode and how rapid
   motion should be modified prior to being output.

9.   Output feedrate limits.

   This section defines the minimum and maximum values that can be output in all
   feedrate modes.

10.   Machine feedrate limits.

   This section defines the maximum feedrate and rapid rate for each supported
   linear and rotary axis.  It also defines the minimum amount of time each move
   is allowed to take.

11.  Accel/Decel time adjustments.

   This section determines whether the machining time will be adjusted for the
   acceleration and deceleration of the machine axes.

12.   Exit

   Exits the Feedrate & Rapid section and returns you to the previous section.
~12.1.1
1.   Does the machine controller support FPM feedrates:

   Enter YES if the machine will accept Feed per Minute feedrate codes.
~12.1.2
2.   Does the machine controller support FPR feedrates:

   Enter YES if the machine will accept Feed per spindle Revolution feedrate
   codes.
~12.1.3
3.   Does the machine controller support DPM feedrates:

   Enter YES if the machine will accept Degrees per Minute feedrate codes.  DPM
   feedrates are only used with rotary axis movement.
~12.1.4
4.   Does the machine controller support Inverse Time feedrates:

   Enter YES if the machine will accept 1 / Time feedrate codes.
~12.1.5
5.   Default feedrate mode:

   Enter the default input feedrate mode, you may choose one of the following
   modes.

       FPM    = Feed per minute.
       FPR    = Feed per spindle revolution.
       INVERS = Inverse time.
~12.1.6
6.   Force current feed output after FEDRAT statement:

   Enter YES if you want to force the output of the current feedrate after a
   FEDRAT command is processed.  Normally, PWORKS uses the Register Control
   logic to determine if the feedrate code should be output.
~12.1.7
7.   Force current feed output after feedrate mode change:

   Enter YES if you want to force the output of the current feedrate after an
   output feedrate mode change, for example from FPM to Inverse time.  Normally,
   PWORKS uses the Register Control logic to determine if the feedrate code
   should be output.
~12.1.8
8.   Feedrate mode for rotary axes movement:

   Enter the value that corresponds to the feedrate mode that the machine
   expects to see when one or more rotary axes move.

       1. Feed per Minute.
       2. Feed per Revolution.
       3. Degrees per Minute.
       4. Inverse time.
       5. Combination feed per Minute and Degrees per Minute.
       6. Feed per Minute when linear motion is greater than rotary motion.
          Degrees per Minute when rotary motion is greater than linear motion.
       7. Feed rate control point.

   If you select FPM feedrates (1), then the output feedrates will be for the
   machine linear slides, not the programmed feedrate.  PWORKS will calculate
   the linear axis feeds using the programmed feedrate and feed control point.

   Combination FPM and DPM feedrates (5) require a pulse weight to be defined
   for the linear and rotary axes.  The pulse weight is usually the minimum
   increment that each axis can move and is usually different for the linear
   and rotary axes.  The pulse weights are defined in the Degrees Per Minute
   section.

   Control point feed rates (7) are usually the same as the input feed rate.
   Though, there are times when they will be lower than the programmed feed
   rate, such as when PWORKS slows the feed rate down due to one of the
   supported axes moving faster than its maximum limit.

   This prompt will only be displayed when at least one rotary axis is
   supported.
~12.1.9
9.   Output average rotary axes radius with feedrate:

   Enter YES if a rotary axis radius code is required when the feed rate control
   point is output with rotary axes movement.  Machines which accept the actual
   programmed feed rate with rotary axes movement either support the program-
   ming of the rotary axes as linear axes (the circumference of the rotary axis
   is output instead of degrees), or they will require the average radius of all
   combined rotary axes which move to be output whenever it changes.

   PWORKS will calculate the average combined radius of each rotary axis which
   moves, based on the radii at the start and end of the move.
~12.1.10
10.   Rotary axis #1 radius register:

   Enter the register that will contain the average radius for rotary axis #1,
   when the programmed feed rate is output with rotary axes movement and the
   radius is required for the machine control to calculate the actual feed rate
   at the machine.
~12.1.11
11.   Rotary axis #2 radius register:

   Enter the register that will contain the average radius for rotary axis #2,
   when the programmed feed rate is output with rotary axes movement and the
   radius is required for the machine control to calculate the actual feed rate
   at the machine.

   If the control only requires one radius code for all rotary axes, then leave
   this prompt blank.
~12.1.12
12.   Rotary axis #3 radius register:

   Enter the register that will contain the average radius for rotary axis #3,
   when the programmed feed rate is output with rotary axes movement and the
   radius is required for the machine control to calculate the actual feed rate
   at the machine.

   If the control only requires one radius code for all rotary axes, then leave
   this prompt blank.
~12.1.13
13.   Rotary axis #4 radius register:

   Enter the register that will contain the average radius for rotary axis #4,
   when the programmed feed rate is output with rotary axes movement and the
   radius is required for the machine control to calculate the actual feed rate
   at the machine.

   If the control only requires one radius code for all rotary axes, then leave
   this prompt blank.
~12.1.14
14.   Disable feedrate overrides code:

   Enter the register and its value that will disable the machine operator from
   overriding programmed feedrates.  The disable feedrate overrides code is
   output using the FEDRAT/LOCK,ON command and is usually M(49).
~12.1.15
15.   Enable feedrate overrides code:

   Enter the register and its value that will enable the machine operator to
   override the programmed feedrates at the control.  The enable feedrate
   overrides code is output using the FEDRAT/LOCK,OFF command and is usually
   M(48).
~12.2.1
1.   Output FPM feedrates as FPR/INVERS:

   This prompt will only be displayed when FPM feedrates are not supported by
   the machine.  Enter the mode that you want input FPM feedrates output as,
   either FPR (Feed per Revolution) or INVERS (Inverse time).
~12.2.2
2.   Output FPM feedrates using a predefined table:

   Enter YES if the FPM feedrates are output as an entry in a table.  The FPM
   feedrate table is defined in a following section.  Enter NO if FPM feedrates
   are output as a direct value.

~12.2.3
3.   Output FPM feedrates based on the control point:

   FPM feed rates are calculated using a feed rate control point, which is
   normally the tool end point, but can be changed using the FEDRAT/LENGTH
   command.  The output feed rate is usually based on the physical linear axes.
   When an output axis is adjusted separately from the tool end point, or it
   does not track along the standard axis line, such as a Z-axis that moves
   with the spindle, then the feed rate values output on the motion block can
   differ from the input values due to the difference in the machine axis
   slides distance traveled as compared to the tool end point.

   Enter YES to this prompt if the above scenario matches your machine layout
   and the controller will compensated automatically for the difference in the
   tool end point feed rate as compared to the machine slides feed rate.
   Entering NO to this prompt will output the feed rate based on the physical
   linear axes.
~12.2.4
4.   FPM register:

   Enter the register descriptor for FPM feedrate values, for example, F1.
~12.2.5
5.   Set FPM mode register and value:

   Enter the register and its value that will activate Feed per Minute feedrate
   control.  This code is usually only used when more than one feedrate mode is
   supported and is normally G(94).
~12.2.6
6.   Pulse weight for linear axes:

   Combination FPM and DPM feedrates require a pulse weight to be defined
   for the linear and rotary axes.  The pulse weight is usually the minimum
   increment that each axis can move and is usually different for the linear
   and rotary axes.  For example, if the minimum increment for linear axes is
   .0001, then the pulse weight will usually be .0001.
~12.2.7
7.   Pulse weight for rotary axes:

   Combination FPM and DPM feedrates require a pulse weight to be defined
   for the linear and rotary axes.  The pulse weight is usually the minimum
   increment that each axis can move and is usually different for the linear
   and rotary axes.  For example, if the minimum increment for rotary axes is
   .001, then the pulse weight will usually be .001.
~12.2.8
8.   Are extended precision FPM feedrates supported:

   Extended precision feedrates, when supported by a machine, are used to obtain
   greater accuracy to the right of the decimal point for the feedrate number.
   A predefined code is usually output with extended precision feedrates and the
   feedrate itself is multiplied by a constant.  PWORKS will automatically
   switch between standard FPM mode and extended precision FPM mode, depending
   on the output feedrate.

   Enter YES if your machine has this capability.
~12.2.9
9.   Multiplication constant for extended precision FPM feedrates:

   This prompt will only be displayed if extended precision FPM feedrates are
   supported.  Enter the value to multiply extended precision feedrates by prior
   to their being output.  This is usually a multiple of 10.
~12.2.10
10.  Extended precision FPM register:

   This prompt will only be displayed if extended precision FPM feedrates are
   supported.  Enter the register description for extended precision feedrates.
   This register can usually be the same as the standard FPM register.
~12.2.11
11.  Set extended precision FPM mode register and value:

   Enter the register and its value that will activate extended precision FPM
   feedrate control.  This code is usually different and in a separate group
   than the set standard FPM feedrates code.
~12.3.1
1.   Output FPR feedrates as FPM/INVERS:

   This prompt will only be displayed when FPR feedrates are not supported by
   the machine.  Enter the mode that you want input FPR feedrates output as,
   either FPM (Feed per Minute) or INVERS (Inverse time).
~12.3.2
2.   Output FPR feedrates using a predefined table:

   Enter YES if the FPR feedrates are output as an entry in a table.  The FPR
   feedrate table is defined in a following section.  Enter NO if FPR feedrates
   are output as a direct value.
~12.3.3
3.   FPR register:

   Enter the register descriptor for FPR feedrate values, for example, F2.
~12.3.4
4.   Set FPR mode register and value:

   Enter the register and its value that will activate Feed per Revolution
   feedrate control.  This code is usually only used when more than one feedrate
   mode is supported and is normally G(95).
~12.3.5
5.   Should FPR feedrates be forced when the Z-axis moves:

   Some older machines require that Feed per Revolution feedrates be in effect
   on every motion block where the Z-axis moves.  Enter YES if your machine has
   this requirement.
~12.3.6
6.   Force FPR feedrate when FPM feedrate is less than:

   Some older machines, essentially lathes, require that Feed per Revolution
   feedrates be in effect on every motion block with a programmed feedrate in
   a certain cutting range.  If your machine has this requirement, then enter
   the minimum FPM feedrate that can be output.  All feedrates below this value
   will be output in the FPR mode.

   If your machine does not have this requirement, then enter 0.
~12.4.1
1.   DPM register:

   Enter the register descriptor for DPM feedrate values, for example, F3.
~12.4.2
2.   Set DPM mode register and value:

   Enter the register and its value that will activate Degrees per Minute feed
   rate  control.  This code is usually only used when more than one feedrate
   mode is supported.
~12.4.3
3.   Should DPM mode register override linear motion register:

   Some machines use the Linear interpolation register to set Feed per Minute
   feedrates and the DPM mode register to set Degrees per Minute feedrates.  In
   this case the DPM mode register belongs to the same group as the Linear mode
   register, not feedrate mode registers.

   If you enter YES at this prompt, then when Degrees per Minute feedrates are
   in effect the DPM mode register will be output instead of the Linear mode
   register.  If you enter NO, then the DPM mode register will be output along
   with the Linear mode register.
~12.5.1
1.   How should inverse time feedrates be calculated:

   Enter the value that corresponds to the calculation that should be used when
   generating inverse time feedrates.

       1. 1 / Time
       2. (Constant * 2n * Feed) / (60 * Distance)
       3. Machining time
       4. Vector speed
       5. (Linear + Rotary) / Time
       6. Feed / (Linear + Rotary)

   1/Time is the normal method for calculating inverse time feed rates.  Cal-
   culation type (2) is usually used by older Bendix controls.  Selection (3)
   will output the calculated machining time without any modifications.

   The vector speed calculation (4) will base the feedrate number on the
   following calculation and is typically used with Toshiba machine controls.

       F = feed * sqrt(      linear**2 + rotary**2      )
                      (---------------------------------)
                      (linear**2 + (pi*radius*rotary)**2)

   The combination linear and rotary delta over time calculation (5) uses the
   linear delta movement at the tool tip combined with the rotary axes delta
   movement (as if the rotary axes were extra linear axes) divided by the
   machining time for the move.  This feed rate calculation is typically used
   with Okuma controllers and uses the following calculation.

       F = sqrt(linear**2 + rotary**2)
                ---------------------
                         time

   The Option (6) calculation will base the feedrate number on the following
   calculation and is used by some Okuma controllers.  The d- values depict
   the delta values (A and B are the rotary axes).  It is possible that a
   scale factor needs to be applied to the rotary delta values for the Okuma
   controller.  These scale factors are defined at the end of this section.

       F = feed / sqrt(dX**2 + dY**2 + dZ**2 + dA**2 + dB**2)

   
~12.5.2
2.   Inverse time feedrate calculation for circular interpolation:

   Enter the value that corresponds to the calculation that should be used when
   inverse time feedrates are output on circular interpolation blocks.

       1. 1 / Time
       2. Feed / Radius
       3. Machining time.

   This prompt will only be displayed when 1/Time inverse time calculations were
   selected for linear motion.  Selection (3) will output the calculated
   machining time without any modifications.
~12.5.3
3.   Enter Constant for inverse time calculations:

   This prompt will only be displayed when Bendix inverse time feedrate calcula-
   tions are supported.  Enter the value for the Constant variable in the cal-
   culation.  This value is usually .2453.
~12.5.4
4.   Enter command pulse weight for inverse time calculations:

   This prompt will only be displayed when Bendix inverse time feedrate calcula-
   tions are supported.  The command pulse weight is used in the calculation to
   generate the 2n variable and is usually .0002.
~12.5.5
5.   Unit of time for inverse time feedrates:

   Enter the unit of time, either MINUTES or SECONDS, to use when calculating
   inverse time feedrates.  MINUTES is normally used.
~12.5.6
6.   Inverse time feedrate register:

   Enter the register descriptor for inverse time feedrate values, for example,
   F3.
~12.5.7
7.   Set inverse time mode register and value:

   Enter the register and its value that will activate inverse time feedrate
   control.  This code is usually only used when more than one feedrate mode is
   supported and is normally G(93).
~12.5.8
8.   Are extended precision inverse time feedrates supported:

   Extended precision feedrates, when supported by a machine, are used to obtain
   greater accuracy to the right of the decimal point for the feedrate number.
   The feedrate values are usually multiplied by a constant prior to being
   output and are output with more digits to the right of the decimal point.
   PWORKS will automatically switch between standard inverse time mode and
   extended precision inverse time mode, depending on the output feedrate.

   Enter YES if your machine has this capability.
~12.5.9
9.   Multiplication constant for extended precision 1/T feedrates:

   This prompt will only be displayed if extended precision inverse time feed
   rates are supported.  Enter the value to multiply extended precision feed
   rates by prior to their being output.  This is usually -1.024.
~12.5.10
10.   Extended precision inverse time register:

   This prompt will only be displayed if extended precision inverse time feed
   rates are supported.  Enter the register description for extended precision
   feedrates.  This register is usually different than the standard inverse
   time feedrate register.
~12.5.11
11.   Set extended precision inverse time mode register and value:

   Enter the register and its value that will activate extended precision
   inverse time feedrate control.  This code is usually the same as the code
   that sets standard inverse time feedrates.
~12.5.12
12.   Enter Constant for rotary delta movement in Inches:

   Some controllers, such as the Okuma, require a scale factor to be applied to
   the rotary axis travel distance when calculating the feedrate number.  When
   a scale factor is applied it is usually to convert millimeters to inches or
   vice versa.  In the case of the Okuma controller, a value of 25.4 is
   typically used when a scale factor is required when the output is in Inch
   mode.  Most controls do not require a scale factor, in which case 1. should
   be entered at this prompt.
~12.5.13
13.   Enter Constant for rotary delta movement in Millimeters:

   Some controllers, such as the Okuma, require a scale factor to be applied to
   the rotary axis travel distance when calculating the feedrate number.  When
   a scale factor is applied it is usually to convert millimeters to inches or
   vice versa.  In the case of the Okuma controller, a value of .03937 could
   be used when a scale factor is required when the output is in Millimeter
   mode.  Most controls do not require a scale factor, in which case 1. should
   be entered at this prompt.
~12.6.0
The Feed per Minute Table form allows you to define the available FPM feedrates
and the actual value each feed will output.

The value to the left of the equals, under the heading 'Code,' is the value
that will be output when the FPM feedrate matches the value to the right of the
equals, under the 'Feed' heading.

When using the 'mpost' interface, there are no headings or equals character.
The number in the left column of each section is the value that will be
output when the feedrate matches the value in the right column of each section.

The feedrate table lookup will compare the programmed feedrate to a value in
the table, if the feeds match exactly or the programmed feed is greater than
the table speed but less than the next speed in the table, then a match will
occur.

The feedrate values must be entered in ascending order (from lowest to highest).
The table is structured so that it ascends from left to right and then from top
to bottom (the same as a written page).
~12.7.0
The Feed per Revolution Table form allows you to define the available FPR feed
rates and the actual value each feed will output.

The value to the left of the equals, under the heading 'Code', is the value
that will be output when the FPR feedrate matches the value to the right of the
equals, under the 'Feed' heading.

When using the 'mpost' interface, there are no headings or equals character.
The number in the left column of each section is the value that will be
output when the feedrate matches the value in the right column of each section.

The feedrate table lookup will compare the programmed feedrate to a value in
the table, if the feeds match exactly or the programmed feed is greater than
the table speed but less than the next speed in the table, then a match will
occur.

The feedrate values must be entered in ascending order (from lowest to highest).
The table is structured so that it ascends from left to right and then from top
to bottom (the same as a written page).
~12.8.1
1.   Does the machine controller support rapid mode:

   Enter YES if the machine will accept a code that will put it in rapid
   traverse positioning mode.  If you enter NO, then PWORKS will output rapid
   moves with a feedrate equal to the rapid rate, as defined in the Machine
   Feedrate Limits section.
~12.8.2
2.   Enter codes for setting rapid mode:

   This prompt will only be displayed when the machine supports rapid traverse
   positioning mode.  You can enter up to 5 codes, separated by commas, that
   will be output each time rapid mode is entered.  Usually the G(00) code is
   used.
~12.8.3
3.   Does the machine controller support rapid mode in LMFP mode:

   Enter YES if the machine will accept a code that will put it in rapid
   traverse positioning mode while in polar interpolation mode on a Mill/Turn
   type machine.  If you enter NO, then PWORKS will output rapid moves with a
   feedrate equal to the rapid rate, as defined in the Machine Feedrate Limits
   section.
~12.8.4
4.   Enter code for setting rapid in LMFP mode:

   Enter the rapid traverse code to use while in polar interpolation mode on a
   Mill/Turn type machine.  Usually the D(10) code is used.
~12.8.5
5.   Does the machine controller support rapid mode in LMDP mode:

   Enter YES if the machine will accept a code that will put it in rapid
   traverse positioning mode while in cylindrical interpolation mode on a
   Mill/Turn type machine.  If you enter NO, then PWORKS will output rapid
   moves with a feedrate equal to the rapid rate, as defined in the Machine
   Feedrate Limits section.
~12.8.6
6.   Enter code for setting rapid in LMDP mode:

   Enter the rapid traverse code to use while in cylindrical interpolation mode
   on a Mill/Turn type machine.
~12.8.7
7.   Output linear interpolation code on rapid block:

   This prompt will only be displayed when the code for setting rapid traverse
   mode is not a G-code.  Enter YES to this prompt if the rapid traverse code
   must be accompanied by a positioning code (either linear or circular).

   If you enter NO, then PWORKS will not attempt to output a positioning code
   when rapid is in effect.
~12.8.8
8.   Reset the programmed feedrate after a rapid move:

   Enter YES if you wish the last programmed feedrate output on the motion
   block following a rapid move, regardless if it is the same value or not.
~12.8.9
9.   Reset the feedrat mode after a rapid move:

   Enter YES if you require the currently active feedrate mode output on the
   motion block following a rapid move.
~12.8.10
10.   Enter motion alteration for rapid moves:

   Enter the value that corresponds to the way you want rapid moves output to
   the control tape.

       1. Do not alter rapid moves.
       2. Alter rapid moves along the X-axis.
       3. Alter rapid moves along the Y-axis.
       4. Alter rapid moves along the Z-axis.
       5. Alter rapid moves along major tool axis.

   If you select any of the options other than 1, then rapid motion will be
   altered as follows.

       If the selected axis move is in the positive direction, then PWORKS will
       move in this axis first and then move in the other 2 axes.

       If the selected axis move is in the negative direction, then PWORKS will
       move in the other 2 axes first and then in the selected axis.

  PWORKS will determine the selected axis depending on the tool axis vector of
  each point, if option 5 is selected.  For example, if the tool axis is 1,0,0,
  then the major axis for this move will be the X-axis.

  The option selected here is only the default option, you can override it at
  any time during the part program using the RAPID command.
~12.8.11
11.   Retract/plunge rapid moves along tool axis:

   This prompt will only be display when rapid moves are modified along the
   major tool axis.  Enter YES if you want rapid motion to retract or plunge
   (depending on the movement of the major axis) along the tool axis, instead
   of moving straight along the major axis.  You can use the RAPID/TOOL command
   to accomplish this same feature anywhere within the part program.
~12.8.12
12.   Retract to clearance plane on rapid moves:

   Answering YES to this question causes the tool to retract to the defined
   clearance plane prior to positioning to the programmed location at the
   rapid rate.  This feature can also be utilized by using the RAPID/RTRCTO
   command.
~12.8.13
13.   Mode for rapid moves:

   Enter the number that corresponds to the output format for rapid motion.

       1. Same as currently programmed mode.
       2. Always absolute.
       3. Always incremental.

   Some machines, though they support both absolute and incremental modes,
   require that rapid motion be output in only one mode.  When this is the case,
   it is usually the absolute mode.
~12.8.14
14.   Modify Rapid moves to complete fastest axis first during simulation:

   Enter YES if the machine enters positioning mode during rapid moves.  This
   means that the machine will position each axis as fast as they move, with
   the axis with the shortest move time reaching its destination first, and
   each of the other axes reaching their final destination in the subsequent
   blocks.  The move will not be in a straight line to the destination.

   The rapid moves will only be modified during machine simulation output, this
   option will not affect the moves output to the MCD file.
~12.9.1
1.   FPM feedrate limits [min,max]:

   Enter the minimum and maximum FPM feedrate output values allowed.  These
   limits affect only the output feedrate number and do not define the maximum
   feedrate allowed for each axis, which are defined in the Machine Feedrate
   Limits section.
~12.9.2
2.   FPR feedrate limits [min,max]:

   Enter the minimum and maximum FPR feedrate output values allowed.  These
   limits affect only the output feedrate number and do not define the maximum
   feedrate allowed for each axis, which are defined in the Machine Feedrate
   Limits section.
~12.9.3
3.   DPM feedrate limits [min,max]:

   Enter the minimum and maximum DPM feedrate output values allowed.  These
   limits affect only the output feedrate number and do not define the maximum
   feedrate allowed for each axis, which are defined in the Machine Feedrate
   Limits section.
~12.9.4
4.   Inverse time feedrate limits [min,max]:

   Enter the minimum and maximum inverse time feedrate output values allowed.
   These limits affect only the output feedrate number and do not define the
   maximum feedrate allowed for each axis, which are defined in the Machine
   Feedrate Limits section.
~12.9.5
5.   Extended precision FPM feedrate limits [min,max]:

   Enter the minimum and maximum extended precision FPM feedrate output values
   allowed.  These limits affect only the output feedrate number and do not
   define the maximum feedrate allowed for each axis, which are defined in the
   Machine Feedrate Limits section.
~12.9.6
6.   Extended precision inverse time feedrate limits [min,max]:

   Enter the minimum and maximum extended precision inverse time feedrate output
   values allowed.  These limits affect only the output feedrate number and do
   not define the maximum feedrate allowed for each axis, which are defined in 
   the Machine Feedrate Limits section.
~12.9.7
7.   Enter Unit scale factor for feedrate limit values:

   Enter the scale factor to be applied to the output feedrate limit values
   when switching between Inches and Millimeters.  This scale will normally be
   10, since the feedrate registers typically differ by an accuracy of one
   digit between Inches and Millimeters.  On some machines though, it is
   desirable to have this value be the standard units conversion factor of 25.4.
~12.10.1
1.   Maximum Primary X-axis feedrate:

   Enter the maximum feedrate of the primary X-axis.  PWORKS will check the
   actual feedrate of this axis against the maximum allowed and slow down the
   feedrate if it goes above this limit.
~12.10.2
2.   Maximum Secondary X-axis feedrate:

   Enter the maximum feedrate of the secondary X-axis.  PWORKS will check the
   actual feedrate of this axis against the maximum allowed and slow down the
   feedrate if it goes above this limit.
~12.10.3
3.   Maximum Primary Y-axis feedrate:

   Enter the maximum feedrate of the primary Y-axis.  PWORKS will check the
   actual feedrate of this axis against the maximum allowed and slow down the
   feedrate if it goes above this limit.
~12.10.4
4.   Maximum Secondary Y-axis feedrate:

   Enter the maximum feedrate of the secondary Y-axis.  PWORKS will check the
   actual feedrate of this axis against the maximum allowed and slow down the
   feedrate if it goes above this limit.
~12.10.5
5.   Maximum Primary Z-axis feedrate:

   Enter the maximum feedrate of the primary Z-axis.  PWORKS will check the
   actual feedrate of this axis against the maximum allowed and slow down the
   feedrate if it goes above this limit.
~12.10.6
6.   Maximum Secondary Z-axis feedrate:

   Enter the maximum feedrate of the secondary Z-axis.  PWORKS will check the
   actual feedrate of this axis against the maximum allowed and slow down the
   feedrate if it goes above this limit.
~12.10.7
7.   Maximum Rotary axis #1 DPM feedrate:

   Enter the maximum Degrees per Minute that Rotary axis #1 can move.  PWORKS
   will check the actual feedrate of this axis against the maximum allowed and
   slow down the feedrate if it goes above this limit.
~12.10.8
8.   Maximum Rotary axis #2 DPM feedrate:

   Enter the maximum Degrees per Minute that Rotary axis #2 can move.  PWORKS
   will check the actual feedrate of this axis against the maximum allowed and
   slow down the feedrate if it goes above this limit.
~12.10.9
9.   Maximum Rotary axis #3 DPM feedrate:

   Enter the maximum Degrees per Minute that Rotary axis #3 can move.  PWORKS
   will check the actual feedrate of this axis against the maximum allowed and
   slow down the feedrate if it goes above this limit.
~12.10.10
10.   Maximum Rotary axis #4 DPM feedrate:

   Enter the maximum Degrees per Minute that Rotary axis #4 can move.  PWORKS
   will check the actual feedrate of this axis against the maximum allowed and
   slow down the feedrate if it goes above this limit.
~12.10.11
11.   Primary X-axis rapid rate:

   Enter the rapid traverse rate for the primary X-axis.  This is usually, but
   not always, the same value as the maximum feedrate allowed.  The rapid
   traverse rate is used for calculating machining time when in rapid mode.
~12.10.12
12.   Secondary X-axis rapid rate:

   Enter the rapid traverse rate for the secondary X-axis.  This is usually, but
   not always, the same value as the maximum feedrate allowed.  The rapid
   traverse rate is used for calculating machining time when in rapid mode.
~12.10.13
13.   Primary Y-axis rapid rate:

   Enter the rapid traverse rate for the primary Y-axis.  This is usually, but
   not always, the same value as the maximum feedrate allowed.  The rapid
   traverse rate is used for calculating machining time when in rapid mode.
~12.10.14
14.   Secondary Y-axis rapid rate:

   Enter the rapid traverse rate for the secondary Y-axis.  This is usually, but
   not always, the same value as the maximum feedrate allowed.  The rapid
   traverse rate is used for calculating machining time when in rapid mode.
~12.10.15
15.   Primary Z-axis rapid rate:

   Enter the rapid traverse rate for the primary Z-axis.  This is usually, but
   not always, the same value as the maximum feedrate allowed.  The rapid
   traverse rate is used for calculating machining time when in rapid mode.
~12.10.16
16.   Secondary Z-axis rapid rate:

   Enter the rapid traverse rate for the secondary Z-axis.  This is usually, but
   not always, the same value as the maximum feedrate allowed.  The rapid
   traverse rate is used for calculating machining time when in rapid mode.
~12.10.17
17.   Rotary axis #1 rapid rate:

   Enter the rapid traverse rate, in Degrees per Minute, for Rotary axis #1.
   This is usually, but not always, the same value as the maximum DPM feedrate
   allowed.  The rapid traverse rate is used for calculating machining time when
   in rapid mode.
~12.10.18
18.   Rotary axis #2 rapid rate:

   Enter the rapid traverse rate, in Degrees per Minute, for Rotary axis #2.
   This is usually, but not always, the same value as the maximum DPM feedrate
   allowed.  The rapid traverse rate is used for calculating machining time when
   in rapid mode.
~12.10.19
19.   Rotary axis #3 rapid rate:

   Enter the rapid traverse rate, in Degrees per Minute, for Rotary axis #3.
   This is usually, but not always, the same value as the maximum DPM feedrate
   allowed.  The rapid traverse rate is used for calculating machining time when
   in rapid mode.
~12.10.20
20.   Rotary axis #4 rapid rate:

   Enter the rapid traverse rate, in Degrees per Minute, for Rotary axis #4.
   This is usually, but not always, the same value as the maximum DPM feedrate
   allowed.  The rapid traverse rate is used for calculating machining time when
   in rapid mode.
~12.10.21
21.   Minumum amount of time allowed per move in seconds:

   Enter the minimum amount of time, in seconds, that any given move is allowed
   to take.  This feature is usually used on older machines with paper tape
   readers.  It allows for the average time it takes to read a single block of
   information, thereby eliminating reader dwells during the cutting of the
   part.
~12.10.22
22.   Adjust output feedrates for maximum axes feedrates:

   The post-processor will always calculate the actual feedrate based on the
   input feedrate, the maximum feedrate for each supported axis, the minimum
   move time allowed, and other factors.  It is also standard procedure to
   output the feedrate adjusted for any of these limits that may be reached, so
   that the output feedrate exactly matches the feedrate on the machine and
   the machine is prevented from attempting to move an axis faster than it is
   capable of.

   There are some controllers that will automatically slow down the feedrate
   based on the maximum axis speeds, but still require the programmed feedrate
   be output to the MCD block.  Enter NO at this prompt if this describes your
   machine controller.  The calculated machining times will still be adjusted
   for the limits of the machine.

   Enter YES if the feedrate adjusted for the machine limits should be output.
   This is the actual feedrate that the machine will be moving.
~12.11.1
1.   Adjust machining time for acceleration/deceleration spans:

   The standard method of calculating the machining time of each move is to
   simply take the distance of the move and divide it by the programmed feed
   rate.  The resulting time would be correct if the machine axes did not have
   to accelerate to obtain a higher speed or decelerate when moving into a
   corner.

   Answering Yes to this prompt will cause PostWorks to take into account the
   acceleration rate of each axis and whether the axis has to decelerate when
   moving into a corner when calculating the machining time of each move.
   Allowing PostWorks to include acceleration/deceleration calculations in the
   machining time calculations should result in a much more accurate estimate
   of the time required to machine the part.
~12.11.2
2.   Maximum velocity for Primary X-axis:

   Enter the maximum acceleration velocity of the primary X-axis in units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~12.11.3
3.   Maximum velocity for Secondary X-axis:

   Enter the maximum acceleration velocity of the secondary X-axis in units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~12.11.4
4.   Maximum velocity for Primary Y-axis:

   Enter the maximum acceleration velocity of the primary Y-axis in units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~12.11.5
5.   Maximum velocity for Secondary Y-axis:

   Enter the maximum acceleration velocity of the secondary Y-axis in units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~12.11.6
6.   Maximum velocity for Primary Z-axis:

   Enter the maximum acceleration velocity of the primary Z-axis in units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~12.11.7
7.   Maximum velocity for Secondary Z-axis:

   Enter the maximum acceleration velocity of the secondary Z-axis in units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~12.11.8
8.   Maximum velocity for Rotary axis #1:

   Enter the maximum acceleration velocity of the rotary axis #1 units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~12.11.9
9.   Maximum velocity for Rotary axis #2:

   Enter the maximum acceleration velocity of the rotary axis #2 units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~12.11.10
10.  Maximum velocity for Rotary axis #3:

   Enter the maximum acceleration velocity of the rotary axis #3 units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~12.11.11
11.  Maximum velocity for Rotary axis #4:

   Enter the maximum acceleration velocity of rotary axis #4 in units per
   second.  This value will be used as both the acceleration and deceleration
   rate of this axis.  If a value of 0 is entered at this prompt, then the
   average velocity of the move will be used for the entire move.
~13.0
0.   Walk through Tool Change Sequence.

   This selection will lead you through all of the subsections of defining the
   tool change sequence.  Automatic/manual tool changes, loading and unloading
   of the tool, tool change codes, and tool length offsets are contained in
   these sections.

1.   Tool change support.

   This section defines the ability of the machine to handle a tool change
   sequence.  It defines the machine's support for automatic tool changes,
   preselecting the tool, size of tool grippers, number of spindles, number
   of turrets (for lathes), etc.

2.   Loading the tool.

   This section defines the basic format of a tool change block.  Whether the
   current tool needs to be unloaded first, if alignment blocks are required,
   amount of time to consider for a tool change, etc.

3.   Tool change codes.

   This section defines the codes that need to be output in order to perform a
   tool change sequence.  The tool number register, tool change code, tool
   selection code, turret direction codes, etc. are contained in this section.

4.   Tool length offsets.

   This section describes the support for tool length offsets.  It includes
   the register description for tool length offset blocks and whether or not to
   add the tool length to the output axes.

5.   Exit

   Exits the Tool Change Sequence section and returns you to the previous sec-
   tion.
~13.1.1
1.   Maximum tool number allowed:

   Enter the maximum tool number allowed for this machine.  PWORKS will output
   a warning message whenever a tool number greater than this value is encoun-
   tered.  The tool number encountered will not be changed, only a warning mes-
   sage will be output.
~13.1.2
2.   Does the machine support a "Select Tool" sequence:

   Enter YES if the machine is capable of selecting the next tool to be loaded
   while it has a tool already loaded in the spindle.  A tool selection sequence
   usually entails positioning the tool magazine to the selected tool and
   picking it up with the tool gripper.  If you enter NO to this prompt, then
   the SELCTL and UNLOAD commands will be disabled.
~13.1.3
3.   Does the machine have both a SMALL and LARGE gripper:

   Enter YES if the machine has two sizes of grippers that are used to load and
   unload the tool.  The grippers are of different sizes to allow for tool
   holders of different sizes.  Most machines usually only have one size grip-
   per.  The SELCTL and LOADTL commands reference the different size grippers.
~13.1.4
4.   Does the machine have both a MAIN and AXIAL spindle:

   Enter YES if the machine has a choice of two spindles to load the tool into.
   The spindles usually have two different RPM ranges, with the main spindle
   capable of higher speeds than the axial spindle.  Most machines usually only
   have a single spindle.  The SELCTL and LOADTL commands reference the differ-
   ent speed range spindles.
~13.1.5
5.   Support SELECT/TOOL and LOAD/TOOL commands:

   Enter YES if the SELECT/TOOL command is to be treated as a SELCTL command
   and the LOAD/TOOL command is to be treated as a LOADTL command.  The syntax
   of these two commands after the TOOL parameter is identical to the SELCTL
   and LOADTL commands respectively.

   Entering NO to this command will cause PWORKS to report an error whenever
   either of these commands are encountered.
~13.1.6
6.   Number of turrets:

   Enter the number of turrets that this lathe has.  You can enter either 1 or
   2.  If you enter 2, then the lathe supports both a Front and Rear turret.
   You can switch between the turrets using the TURRET command.
~13.1.7
7.   Distance between turrets:

   Enter the distance between the Front and Rear turret.  This distance will be
   added to the X-axis radius whenever the Rear turret is activated.  A value
   of other than 0 must be entered if the lathe is always oriented using the
   Front turret and PWORKS must compensate when using the Rear turret.  This
   prompt will only be displayed when the machine type is a lathe and it
   supports 2 turrets.
~13.1.8
8.   Default turret at beginning of program:

   Enter either FRONT or REAR, depending on the turret you wish to be active
   at the start of the program.  You can switch between the turrets using the
   TURRET command.  This prompt will only be displayed when the machine type is
   a lathe and it supports 2 turrets.
~13.2.1
1.   Should the tool to unload be output with a tool change:

   Enter YES if the tool number that is currently in the spindle should be out-
   put with a tool change code, instead of the tool number to place in the spin-
   dle.  In this case, the tool to load (place in the spindle) will be output
   with the tool selection code and the tool to unload (place back in the tool
   magazine) will be output with the tool change sequence.  This prompt will
   only be displayed when a tool selection sequence is supported.

   Example:

          Input               Output
          -----               ------

          SELCTL/2            T02$
          LOADTL/2            T01 M06$ (assuming tool #1 is currently in the
                                        spindle)
~13.2.2
2.   Should an unload code be output for a tool change:

   Enter YES if the control does not support a single tool change code that will
   automatically perform the following sequence.

        1. Pick up the next tool to be loaded.
        2. Remove the current tool from the spindle.
        3. Place the current tool back in the tool magazine.
        4. Place the selected tool in the spindle.

   Most machines accept a single code, such as M06, that will perform the above
   functions.  In this case enter NO to this prompt.  This prompt will only be
   displayed when a tool selection sequence is supported.

   Example:

          SELCTL/2            G25 T02$
          LOADTL/2            G27 T01$ (assuming tool #1 is currently in the
                                        spindle)
~13.2.3
3.   Output tool number with a tool unload block:

   Enter YES if your machine supports a code to unload the tool from the spindle
   without loading another tool and you are able to select the tool magazine
   location to place this tool.  If your machine does not allow you to specify
   the tool magazine location when unloading a tool, then enter NO to this
   prompt.  This prompt will only be displayed when a tool selection sequence is
   supported.
~13.2.4
4.   Output an alignment block on tool change blocks:

   Enter YES if you want every tool change block to be an alignment block.  The
   tool change block will be in the same format as a non-motion type alignment
   block.
~13.2.5
5.   Output an alignment block after a tool change block:

   Enter YES if you want the Control Tape block directly following a tool change
   sequence to contain an alignment block.  The alignment block number will
   follow the normal numbering scheme for sequence numbers.
~13.2.6
6.   Turn off tool length compensation prior to a tool change:

   Enter YES if you want PWORKS to automatically cancel tool length compensation
   prior to outputting a tool change block.  All of the codes necessary to can-
   cel tool length compensation will be output.
~13.2.7
7.   Turn on tool length compensation after a tool change:

   Enter YES if you want PWORKS to automatically turn on tool length compensa-
   tion after outputting a tool change block.  All of the codes necessary to
   enable tool length compensation will be output.
~13.2.8
8.   Is a tool change considered an End-of-Sequence:

   An End-of-sequence will reset the sequence delta movements for each axis and
   the sequence machining time.  It will also internally turn the coolant and
   spindle off.  Enter YES if you want a tool change sequence to perform these
   functions.
~13.2.9
9.   Look ahead for LOADTL when PPRINT encountered:

   Enter YES if PWORKS should look to see if the next command is a LOADTL or
   LOAD/TOOL command whenever a PPRINT command is processed.  If the next
   command is a LOADTL command then the %ARG(2) variable passed to the PPRINT
   Macro will be set to 1, otherwise %ARG(2) will be set to 0.

   From this description you can see that a PPRINT Macro is mandatory in order
   to take advantage of this feature.  It is typically used to store the text
   of the PPRINT statement so it can be referenced and/or output in the
   LOADTL Macro.

   Entering NO at this prompt will disallow PWORKS from looking for a LOADTL
   command.  The PPRINT Macro variable %ARG(2) will always be set to 0 in this
   case.
~13.2.10
10.  Calculate separate times for each instance the same tool is loaded:

   Typically Pworks will search the previous loaded tools each time a new tool
   is loaded and if there is a match it will treat this instance of the tool
   as a continuation of the previously loaded tool and the machining time will
   be added to the previously loaded tool.

   If you would like for duplicate tool numbers to maintain their own separate
   tool times, then enter YES at this prompt.  In this case each time a tool
   is loaded the previously loaded tools will not be checked for a match and
   the machining times will be calculated separately.

   You can use the TOOLNO/TIMES command to change this setting in the part
   program.
~13.2.11
11.  Amount of time for tool change sequence in seconds:

   Enter the amount of time to add to the total sequence time and machining
   time whenever a tool change sequence is output.  Enter the average amount
   of time it takes the machine to change the tool only if you want this time
   taken into consideration for the total machining times.
~13.3.1
1.   Pick up tool (with small gripper) code:

   Enter the register and optional value that will pick up the tool from the
   tool storage (the small gripper will be used when 2 sizes of grippers are
   supported).  This prompt will only be displayed when a "Select Tool" sequence
   is supported and should be left blank if the machine does not require a
   special code other than the tool number to select the next tool.
~13.3.2
2.   Pick up tool with large gripper code:

   Enter the register and optional value that will pick up the tool from the
   tool storage using the large gripper.  This prompt will only be displayed
   when a "Select Tool" sequence is supported and the machine has 2 sizes of
   grippers.  Machines having 2 sizes of grippers usually require a unique
   code to pick up the tool with the specified gripper.
~13.3.3
3.   Select tool register:

   Enter the register for tool selection numbers.  Leave this prompt blank if
   tool numbers should not be output to the Control Tape.  The tool selection
   register is usually the same as the tool number register used for loading the
   tool.  You can specify only a portion of a register, for example only the 1st
   and 2nd digits of the T register, by entering a real number with the regis-
   ter.  The number to the left of the decimal point is the beginning digit
   within the register for the tool number and the number to the right of the
   decimal point is the ending digit.

   Examples:

               T           Use all digits of the T register.

               T(7.8)      Use the 7th and 8th digits of the T register.  The
                           1st thru 6th digits will be used for other values,
                           such as the tool length offset register and/or the
                           cutter compensation register.
~13.3.4
4.   Tool number register:

   Enter the register for tool numbers.  Leave this prompt blank if tool numbers
   should not be output to the control tape.  You can specify only a portion of
   a register, for example only the 1st and 2nd digits of the T register, by
   entering a real number with the register.  The number to the left of the
   decimal point is the beginning digit within the register for the tool number
   and the number to the right of the decimal point is the ending digit.  The T
   register is usually used.

   Examples:

               T           Use all digits of the T register.

               T(7.8)      Use the 7th and 8th digits of the T register.  The
                           1st thru 6th digits will be used for other values,
                           such as the tool length offset register and/or the
                           cutter compensation register.
~13.3.5
5.   Output the tool register on a block by itself:

   Enter YES if you want the tool number register output in a block by itself,
   without any other codes, not even the tool change code.  Normally the tool
   number register and the tool change code can be in a block together.
~13.3.6
6.   Tool change code:

   Enter the register and optional value that will perform an automatic tool
   change.  You can leave this prompt blank, in which case a code will not be
   output with an automatic tool change.  M(06) is usually used for automatic
   tool changes.
~13.3.7
7.   Manual tool change code:

   Enter the register and optional value that will perform a manual tool change.
   You can leave this prompt blank, in which case a code will not be output with
   a manual tool change.  M(00) is usually used for manual tool changes.
~13.3.8
8.   Unload tool (with small gripper) from main spindle code:

   Enter the register and optional value that will unload the tool from the
   spindle and place it back in the tool magazine (the small gripper will be
   used when 2 sizes of grippers are supported, likewise the high speed spindle
   will be used when 2 spindles are supported).  This prompt will only be
   displayed when a "Select Tool" sequence is supported and should be left blank
   if the machine does not have a special code, other than the tool change code,
   to unload a tool.
~13.3.9
9.   Unload tool (with small gripper) from axial spindle code:

   Enter the register and optional value that will unload the tool from the
   low speed spindle and place it back in the tool magazine (the small gripper
   will be used when 2 sizes of grippers are supported).  This prompt will only 
   be displayed when a "Select Tool" sequence is supported and the machine has 2
   spindles.  Machines with 2 spindles usually support a tool unload code.
~13.3.10
10.   Unload tool with large gripper from main spindle code:

   Enter the register and optional value that will unload the tool from the
   spindle using the large gripper and place it back in the tool magazine (the
   high speed spindle will be used when the machine supports 2 spindles).  This
   prompt will only be displayed when a "Select Tool" sequence is supported and
   the machine has 2 sizes of grippers.  Machines having 2 sizes of grippers
   usually require a unique code to unload the tool with the specified gripper.
~13.3.11
11.   Unload tool with large gripper from axial spindle code:

   Enter the register and optional value that will unload the tool from the
   low speed spindle using the large gripper and place it back in the tool
   magazine.  This prompt will only be displayed when a "Select Tool" sequence
   is supported, the machine has 2 sizes of grippers and 2 spindles.  Machines
   having 2 sizes of grippers usually require a unique code to unload the tool
   with the specified gripper.
~13.3.12
12.   Force turret CLW code:

   Enter the register and optional value that will force the turret to rotate
   clockwise when selecting the requested tool.  This code will be output with
   the TURRET/...,CLW command.
~13.3.13
13.   Force turret CCLW code:

   Enter the register and optional value that will force the turret to rotate
   counter-clockwise when selecting the requested tool.  This code will be
   output with the TURRET/...,CCLW command.
~13.3.14
14.   User defined block for tool changes:

   Enter the User defined block to use for tool change blocks.  A User defined
   block is not normally needed for a tool change block, unless the machine
   requires codes other than the tool number and tool change code to perform
   the tool change.

   Some machines, for example, may require a dwell after each tool change.  In
   this case you would enter a User defined block number which would output the
   tool change codes in one block and machine dwell codes in the following
   block.
~13.4.1
1.   Add tool lengths to output axes:

   Enter YES if you want the tool length programmed in the LOADTL command to be
   added to the output axes.  The tool length will be added to the axes along
   the spindle vector of the machine.  It is usually not necessary to add the
   tool length to the output axes, unless the machine has at least one rotary
   spindle (HEAD) axis.  Most of today's machines will compensate for the tool
   length.

   This setting can be changed using the TOOLNO/OFSETL command.
   
~13.4.2
2.   Register for tool length offsets:

   Enter the register for tool length offsets.  Leave this prompt blank if tool
   length offset registers are not supported by the machine control.  You can
   specify only a portion of a register, for example only the 1st and 2nd digits
   of the T register, by entering a real number with the register.  The number
   to the left of the decimal point is the beginning digit within the register
   for the tool offset register and the number to the right of the decimal point
   is the ending digit.  The H register is usually used.

   Examples:

               H           Use all digits of the H register.

               T(1.4)      Use the 1st thru the 4th digits of the T register.
                           The 5th thru nth digits will be used for other
                           values, such as the tool number and/or the cutter
                           compensation register.
~13.4.3
3.   Base number for tool length offsets:

   Enter a value that should be added to the tool length offset register number
   prior to output.  A value other than 0 is usually entered only when the
   register used for tool length offsets is used for another offset, such as
   fixture offsets.  For example, registers 0-99 may be used for fixture off-
   sets, while 100-199 will be used for tool length offsets.  In this case,
   enter 100 at this prompt and PWORKS will automatically add 100 to the input
   tool length offset register.
~13.4.4
4.   Code for enabling tool length offsets:

   Enter the register and its value that will activate tool length offsets at
   the machine control.  If the machine does not support tool length offsets,
   then leave this prompt blank.
~13.4.5
5.   Code for disabling tool length offsets:

   Enter the register and its value that will turn off tool length offsets at
   the machine control.  If the machine does not support tool length offsets,
   then leave this prompt blank.
~13.4.6
6.   Code for PLUS tool length offsets:

   Enter the code that will enable tool length offsets in the positive direction
   at the machine control.  This code can be output using the TOOLNO/ADJUST,PLUS
   command.  If the machine does not support tool length offsets or does not
   allow a direction for offsets, then leave this prompt blank.
~13.4.7
7.   Code for MINUS tool length offsets:

   Enter the code that will enable tool length offsets in the negative direction
   at the machine control.  This code can be output using the TOOLNO/ADJUST,
   MINUS command.  If the machine does not support tool length offsets or does
   not allow a direction for offsets, then leave this prompt blank.
~13.4.8
8.   Output MINUS offsets as negative values:

   Enter YES if your machine requires the tool length offset register to be
   output as a negative value when tool length offsets are enabled in the
   negative direction.  Negative direction tool length offsets can be enabled
   using the TOOLNO/ADJUST,MINUS command.

   If the machine does not support tool length offsets in the negative direction
   or a specific code, such as G44, is used to enable negative offsets, then
   enter NO to this prompt.
~13.4.9
9.   XAXIS tool offset register:

   Enter the register to use for output with the TOOLNO/ADJUST,n,XAXIS command.
   It is recommended that you do not use the same register that is used for the
   absolute X-axis, unless the axis value output in the tool length offset block
   is the actual X-axis position.  PWORKS uses the absolute X-axis position
   register to calculate incremental moves, machining times, etc.

   When the X-axis contained on the tool length offset block is an arbitrary
   number, such as always being X0, then specify a previously unused register at
   this prompt.  For example, U1.
~13.4.10
10.   YAXIS tool offset register:

   Enter the register to use for output with the TOOLNO/ADJUST,n,YAXIS command.
   It is recommended that you do not use the same register that is used for the
   absolute Y-axis, unless the axis value output in the tool length offset block
   is the actual Y-axis position.  PWORKS uses the absolute Y-axis position
   register to calculate incremental moves, machining times, etc.

   When the Y-axis contained on the tool length offset block is an arbitrary
   number, such as always being Y0, then specify a previously unused register at
   this prompt.  For example, V1.
~13.4.11
11.   ZAXIS tool offset register:

   Enter the register to use for output with the TOOLNO/ADJUST,n,ZAXIS command.
   It is recommended that you do not use the same register that is used for the
   absolute Z-axis, unless the axis value output in the tool length offset block
   is the actual Z-axis position.  PWORKS uses the absolute Z-axis position
   register to calculate incremental moves, machining times, etc.

   When the Z-axis contained on the tool length offset block is an arbitrary
   number, such as always being Z0, then specify a previously unused register at
   this prompt.  For example, W1.
~13.4.12
12.   Output plane selection code with tool length offset register:

   Enter YES if the machine control requires plane selection code (G17,G18,G19,
   for example) on a tool length offset block.  Most controls do not require the
   plane selection code to be output on a tool length offset block.
~13.4.13
13.   Output tool offset on codes in a block by themselves:

   Enter YES if the machine control requires that the codes enabling tool length
   offsets be output in a block by themselves.  If you enter NO to this prompt,
   then the TOOLNO/ADJUST command will determine how the enable tool length
   offsets codes will be output.
~13.4.14
14.   Output tool offset off codes in a block by themselves:

   Enter YES if the machine control requires that the codes disabling tool
   length offsets be output in a block by themselves.  If you enter NO to this
   prompt, then the TOOLNO/ADJUST command will determine how the disable tool
   length offsets codes will be output.
~13.4.15
15.   User defined block for tool length offsets:

   Enter the User defined block to use for tool length offset blocks.  A User
   defined block is not normally needed for a tool length offset block, unless
   the machine requires codes other than the tool offset codes defined in this
   section on the tool length offset block.

   Some machines, for example, may require a rapid code to be output in each
   tool length offset block.  In this case you would enter a User defined block
   number that would output the tool length offset code(s) along with a rapid
   code.

   This User defined block will be used for both enable and disable tool length
   offset blocks.
~14.0
0.   Walk through Cutter/Fixture Compensation.

   This selection will lead you through all of the subsections of defining
   cutter compensation support and fixture compensation registers.  Cutcom
   support at the control, including cutcom vectors and fixture compensation
   codes are contained in these sections.

1.   Cutter compensation support.

   This section defines the ability of the machine to handle cutter compensa-
   tion.  It contains support for cutcom vectors and valid compensation planes.

2.   Cutter compensation control.

   This section describes how cutter compensation codes are output to the Con-
   trol Tape.

3.   Cutter compensation codes.

   This section defines the codes that will be output with cutter compensation,
   including direction codes, vector registers, and departure codes.

4.   Fixture offsets.

   This section describes the support for fixture offsets.  It includes the
   register description for fixture offsets and the codes to enable/disable
   fixture offsets.

5.   Exit

   Exits the Cutter/Fixture Compensation section and returns you to the previous
   section.
~14.1.1
1.   Cutter compensation output format:

   Enter the number corresponding to the type of cutter compensation which is
   supported by the machine.

   0 = The machine will calculate the cutter compensation vector based on the
       previous position, current position and next position.  It does not
       require an input cutcom vector to determine the offset direction.

   1 = A cutter compensation vector in the direction of compensation will be
       output on each move between CUTCOM/ON and CUTCOM/OFF.  This is the
       Cincinnati PQR cutcom vector format.  Cutter compensation will usually
       be performed on every motion block that contains a cutcom vector, cutcom
       on and off codes are normally not required.

   2 = A cutter compensation vector in the same direction as the next move will
       be output on each move between CUTCOM/ON and CUTCOM/OFF.  This format
       usually contains the cutcom vector on a motion block as IJK's and does
       not support cutter compensation vectors on circular blocks.

   3 = A cutter compensation vector in the same direction as the current move
       will be output on each move between CUTCOM/ON and CUTCOM/OFF.  This
       format usually contains a cutcom vector in a block by itself with a
       cutcom vector definition code, such as G39.  The cutcom vector will
       precede the motion block.

   4 = The angle of the next move will be output on each motion block between
       CUTCOM/ON and CUTCOM/OFF.  This format is usually used with machines that
       support polar coordinate programming, such as the SHARNOA control.  Moves
       preceding a circular interpolation record will usually contain a code
       that states the direction of the circular move.
~14.1.2
2.   Unitize cutcom vector:

   Enter YES if the cutcom vector should be unitized to a length of 1.0 prior to
   being output.  If you enter NO, then the cutcom vector components will be the
   delta distance of the current/next move.  This prompt will only be displayed
   when the cutcom vector contains the direction of either the current or next
   move.
~14.1.3
3.   Is cutter compensation allowed in all 3 planes:

   Enter YES if cutter compensation is supported in all three machining planes,
   XY, ZX and YZ.  If cutcom is only valid in the XY machining plane, then enter
   NO.  An error message will be output when cutcom is only allowed in the XY
   plane and you specify either the ZXPLAN or the YZPLAN parameter on a CUTCOM
   command.
~14.1.4
4.   Is 3-dimensional cutter compensation supported:

   3-dimensional cutter compensation is usually used to offset the tool with
   a defined corner radius along the normal of either the part or drive
   surface.  Enter YES if the machine controller supports 3-dimensional cutter
   compensation.
~14.1.5
5.   Is 5-axis cutter compensation allowed:

   Enter YES if 5-axis cutter diameter compensation is supported. 5-axis cutter
   compensation will output a three dimensional offset vector in the direction
   of compensation whenever the tool axis is at an angle to any of the standard
   machining planes. A two dimensional vector will still be output when the tool
   axis is normal to a machining plane. This prompt will only be displayed when
   the cutter compensation output format is 1.
~14.1.6
6.   Are approach/departure codes supported:

   Enter YES if your machine allows you to specify an entry and/or exit method
   for cutter compensation.  The approach/departure codes can be output using
   the CUTCOM/...,MODIFY command.
~14.1.7
7.   Maximum angular change when cutcom is active:

   Enter the maximum angular change for axes motion that is allowable when
   cutter compensation is active.  An error message will be output when a move
   changes direction by more than this amount.  The error message is intended to
   let the programmer know when the tool reverses direction and the cutter com-
   pensation direction has not been changed.  Enter 180 (degrees) to disable
   this checking.
~14.1.8
8.   Maximum vector component value allowed:

   Enter the maximum value that is allowed for each cutcom vector component.
   An error message will be output and the cutcom vector component value will be
   reduced to the maximum value allowed when this value is exceeded.
~14.2.1
1.   Output cutcom on codes in a block by themselves:

   Enter YES if the enable cutter compensation codes should be output in a block
   by themselves.  Usually, cutter compensation enable codes are output in the
   next motion block.
~14.2.2
2.   Output cutcom off code in a block by itself:

   Enter YES if the disable cutter compensation code should be output in a
   block by itself.  Usually, the cutter compensation disable code is output
   in the next motion block.

~14.2.3
3.   Output directional vector on initial cutcom on block:

   Enter YES if the machine requires a cutcom vector on the initial cutcom on
   motion block.  If you enter NO, then the initial motion block following the
   CUTCOM command will not contain a cutcom vector.  This prompt will only be
   displayed when cutter compensation vectors in the direction of the current
   move are supported.
~14.2.4
4.   Output directional vector on circular block:

   Enter YES if a cutter compensation vector should be output on a circular
   interpolation block.  Some machines require that you always enter tangent
   to a circle when cutter compensation is in effect and do not allow you to
   specify a direction for cutcom.  This prompt will only be displayed when
   cutter compensation vectors in the direction of either the current or next
   move are supported.
~14.2.5
5.   Output directional vector between multiple circular blocks:

   Enter YES if a cutter compensation vector should be output on a circular
   interpolation block when transitioning to another circle.  Some machines
   require that circular interpolation records be tangent when cutter compen-
   sation is in effect and do not allow you to specify a direction for cutcom.
   This prompt will only be displayed when cutter compensation vectors in the
   direction of either the current or next move are supported and cutcom vectors
   are allowed on circular interpolation blocks.
~14.2.6
6.   Output an offset register with a value of 0 with cutcom off:

   Enter YES if the machine requires a cutter compensation register of 0 to be
   output when cutcom is disabled.  Usually, no cutter compensation register is
   required when turning cutcom off.
~14.2.7
7.   Output an error message with move in non-cutcom axis:

   Enter YES if you want an error message output whenever a move is made in the
   non-cutter compensation axis, with no movement in either of the cutter com-
   pensation axes.
~14.3.1
1.   Cutcom LEFT code:

   Enter the code that will enable cutter compensation to the left of the tool
   path at the machine control.  This code can be output using the CUTCOM/LEFT
   command.  If the machine does not support cutter compensation or allow for a
   directional code (such as the Cincinnati PQR format), then leave this prompt
   blank.
~14.3.2
2.   Cutcom RIGHT code:

   Enter the code that will enable cutter compensation to the right of the tool
   path at the machine control.  This code can be output using the CUTCOM/RIGHT
   command.  If the machine does not support cutter compensation or allow for a
   directional code (such as the Cincinnati PQR format), then leave this prompt
   blank.
~14.3.3
3.   Cutcom OFF code:

   Enter the code that will disable cutter compensation at the machine control.
   This code can be output using the CUTCOM/OFF command.  If the machine does
   not support cutter compensation or allow for a code to turn cutcom off, then
   leave this prompt blank.
~14.3.4
4.   Cutter compensation offset register:

   Enter the register that contains the offset values for cutter compensation.
   Leave this prompt blank if the machine does not accept a user specified
   register for cutcom offset amounts.  You can specify only a portion of a
   register, for example only the 1st and 2nd digits of the T register, by
   entering a real number with the register.  The number to the left of the
   decimal point is the beginning digit within the register for the cutcom
   register and the number to the right of the decimal point is the ending
   digit.  The D register is usually used.

   Examples:

               D           Use all digits of the D register.

               T(7.8)      Use the 7th thru the 8th digits of the T register.
                           The 1st thru 6th digits will be used for other
                           values, such as the tool number and/or the tool
                           length offset register.
~14.3.5
5.   Base number for cutter compensation register:

   Enter a value that should be added to the cutter compensation register number
   prior to output.  A value other than 0 is usually entered only when the
   register used for cutter compensation is used for another offset, such as
   tool length offsets.  For example, registers 0-99 may be used for tool length
   offsets, while 100-199 will be used for cutter compensation.  In this case,
   enter 100 at this prompt and PWORKS will automatically add 100 to the input
   cutter compensation register.
~14.3.6
6.   Cutcom vector definition code:

   Enter the register and optional value that defines a block containing a
   cutter compensation vector.  This prompt will only be displayed when cutter
   compensation vectors in the direction of the current move are supported.
   The cutter compensation vector definition block will be output prior to the
   motion block.  The code normally used is G(39).
~14.3.7
7.   X-axis vector component register:

   Enter the register to be used for the X-axis component of the cutcom vector.
   This prompt will only be displayed when cutter compensation vectors are
   supported.  Either the P or I2 register is usually used.
~14.3.8
8.   Y-axis vector component register:

   Enter the register to be used for the Y-axis component of the cutcom vector.
   This prompt will only be displayed when cutter compensation vectors are
   supported.  Either the Q or J2 register is usually used.
~14.3.9
9.   Z-axis vector component register:

   Enter the register to be used for the Z-axis component of the cutcom vector.
   This prompt will only be displayed when cutter compensation vectors are
   supported.  Either the R or K2 register is usually used.
~14.3.10
10.   Cutcom angular direction register:

   Enter the register to be used for the angular direction of the next move
   while cutter compensation is in effect.  This prompt will only be displayed
   when the machine requires the angular direction of the next move while in
   cutter compensation.  The P register is usually used.
~14.3.11
11.   CLW circular cutcom direction code:

   Enter the register and optional value for specifying that the next move is a
   circular interpolation move in the clockwise direction.  This prompt will
   only be displayed when the machine requires the angular direction of the next
   move while in cutter compensation.  The E(2) code is usually used.
~14.3.12
12.   CCLW circular cutcom direction code:

   Enter the register and optional value for specifying that the next move is a
   circular interpolation move in the counter-clockwise direction.  This prompt
   will only be displayed when the machine requires the angular direction of the
   next move while in cutter compensation.  The E(3) code is usually used.
~14.3.13
13.   Approach/departure code #1:

   Enter the code that will specify the first entry/exit method for cutter
   compensation.  This code will be output with the CUTCOM/...,MODIFY,1 command.
   This prompt will only be displayed when cutter compensation approach and
   departure codes are supported by the machine.
~14.3.14
14.   Approach/departure code #2:

   Enter the code that will specify the second entry/exit method for cutter
   compensation.  This code will be output with the CUTCOM/...,MODIFY,2 command.
   This prompt will only be displayed when cutter compensation approach and
   departure codes are supported by the machine.
~14.3.15
15.   Approach/departure code #3:

   Enter the code that will specify the third entry/exit method for cutter
   compensation.  This code will be output with the CUTCOM/...,MODIFY,3 command.
   This prompt will only be displayed when cutter compensation approach and
   departure codes are supported by the machine.
~14.3.16
16.   Approach/departure distance register:

   Enter the register that will contain the distance/radius for the entry/exit
   method for cutter compensation.  This register will be output with the
   CUTCOM/...,MODIFY command.  This prompt will only be displayed when cutter
   compensation approach and departure codes are supported by the machine.
~14.3.17
17.  3-D cutter compensation code:

   Enter the code that will enable 3-dimensional cutter compensation along the
   part/drive surface normal.  This code can be output using the CUTCOM/ENDPT
   command.
~14.3.18
18.  Tool radius register:

   Enter the register that will contain the tool radius for 3-dimensional
   cutter compensation.  If the machine control does not require the tool
   radius to be programmed with 3-D cutter compensation, then leave this prompt
   blank.
~14.3.19
19.  Tool corner radius register:

   Enter the register that will contain the tool corner radius for 3-dimensional
   cutter compensation.  If the machine control does not require the tool corner
   radius to be programmed with 3-D cutter compensation, then leave this prompt
   blank.
~14.3.20
20.  Rotary axis position mode register:

   Enter the register that contains the rotary axis movement method during
   3-dimensional cutter compensation.  If the machine control does not support
   this rotary axis setting, then leave this prompt blank.
~14.3.21
21.  Maximum feed rate register:

   Enter the register that contains the feed rate limitation value during
   3-dimensional cutter compensation.  On highly curved parts, it is possible
   that the machine will accelerate quickly on certain moves while 3-D cutter
   compensation is in effect.  The maximum feed rate register can be used on
   some machine controls to limit the feed rate to the value programmed into
   this register.  If the machine control does not support a maximum feed rate
   setting during 3-D cutter compensation, then leave this prompt blank.
~14.4.1
1.   Register for fixture offsets:

   Enter the register for controlling fixture offsets.  Leave this prompt blank
   if fixture offset registers are not supported by the machine control.  The H
   register is usually used.  The CUTCOM/ADJUST command controls the output of
   fixture offsets.
~14.4.2
2.   Base number for fixture offsets:

   Enter a value that should be added to the fixture offset register number
   prior to output.  A value other than 0 is usually entered only when the
   register used for fixture offsets is used for another offset, such as tool
   length offsets.  For example, registers 0-99 may be used for tool length
   offsets, while 100-199 will be used for fixture offsets.  In this case, enter
   100 at this prompt and PWORKS will automatically add 100 to the input fixture
   offset register.
~14.4.3
3.   Code for enabling fixture offsets:

   Enter the register and its value that will activate fixture offsets at the
   machine control.  If the machine does not support fixture offsets, then leave
   this prompt blank.
~14.4.4
4.   Code for disabling fixture offsets:

   Enter the register and its value that will turn off fixture offsets at the
   machine control.  If the machine does not support fixture offsets, then leave
   this prompt blank.
~14.4.5
5.   Code for PLUS fixture offsets:

   Enter the code that will enable fixture offsets in the positive direction at
   the machine control.  This code can be output using the CUTCOM/ADJUST,PLUS
   command.  If the machine does not support fixture offsets or does not allow
   a direction for offsets, then leave this prompt blank.
~14.4.6
6.   Code for MINUS fixture offsets:

   Enter the code that will enable fixture offsets in the negative direction at
   the machine control.  This code can be output using the CUTCOM/ADJUST,MINUS
   command.  If the machine does not support fixture offsets or does not allow
   a direction for offsets, then leave this prompt blank.
~14.4.7
7.   Output MINUS offsets as negative values:

   Enter YES if your machine requires the fixture offset register to be output
   as a negative value when fixture offsets are enabled in the negative direc-
   tion.  Negative direction fixture offsets can be enabled using the CUTCOM/
   ADJUST,MINUS command.

   If the machine does not support fixture offsets in the negative direction or
   a specific code, such as G46, is used to enable negative offsets, then enter
   NO to this prompt.
~14.4.8
8.   XAXIS fixture offset register:

   Enter the register to use for output with the CUTCOM/ADJUST,n,XAXIS command.
   It is recommended that you do not use the same register that is used for the
   absolute X-axis, unless the axis value output in the fixture offset block
   is the actual X-axis position.  PWORKS uses the absolute X-axis position
   register to calculate incremental moves, machining times, etc.

   When the X-axis contained on the fixture offset block is an arbitrary number,
   such as always being X0, then specify a previously unused register at this
   prompt.  For example, U1.
~14.4.9
9.   YAXIS fixture offset register:

   Enter the register to use for output with the CUTCOM/ADJUST,n,YAXIS command.
   It is recommended that you do not use the same register that is used for the
   absolute Y-axis, unless the axis value output in the fixture offset block
   is the actual Y-axis position.  PWORKS uses the absolute Y-axis position
   register to calculate incremental moves, machining times, etc.

   When the Y-axis contained on the fixture offset block is an arbitrary number,
   such as always being Y0, then specify a previously unused register at this
   prompt.  For example, V1.
~14.4.10
10.   ZAXIS fixture offset register:

   Enter the register to use for output with the CUTCOM/ADJUST,n,ZAXIS command.
   It is recommended that you do not use the same register that is used for the
   absolute Z-axis, unless the axis value output in the fixture offset block
   is the actual Z-axis position.  PWORKS uses the absolute Z-axis position
   register to calculate incremental moves, machining times, etc.

   When the Z-axis contained on the fixture offset block is an arbitrary number,
   such as always being Z0, then specify a previously unused register at this
   prompt.  For example, W1.
~14.4.11
11.   Output fixture offset on codes in a block by themselves:

   Enter YES if the machine control requires that the codes enabling fixture
   offsets be output in a block by themselves.  If you enter NO to this prompt,
   then the CUTCOM/ADJUST command will determine how the enable fixture offset
   codes will be output.
~14.4.12
12.   Output fixture offset off codes in a block by themselves:

   Enter YES if the machine control requires that the codes disabling fixture
   offsets be output in a block by themselves.  If you enter NO to this prompt,
   then the CUTCOM/ADJUST command will determine how the disable fixture offset
   codes will be output.
~15.0
0.   Walk through Misc Post commands.

   This selection will lead you through all of the subsections of the miscel-
   laneous post-processor commands.  The handling of INSERT, messages, OPSKIP,
   OPSTOP, STOP, DELAY, GOHOME, and POSTN is contained in these sections.
 
1.   Messages & INSERT.

   This section defines how message and INSERT blocks should be output, includ-
   ing whether they contain sequence numbers and End-of-block characters.

2.   OPSKIP, OPSTOP & STOP.

   This section defines how the OPSKIP, OPSTOP and STOP commands are handled,
   including the codes that are output with the OPSTOP and STOP commands, the
   User defined block for each command, and whether OPSTOP and STOP are con-
   sidered an End-of-sequence.

3.   DELAY.

   This section defines the output for machine dwell blocks, including the dwell
   block definition code and register, unit of time for dwell blocks, and how
   they should be output.

4.   GOHOME.

   This section defines the output codes for automatic return from/to the home
   position.  The home position for PWORKS generated moves to home is defined in
   the "Define Machine Configuration" section.

5.   POSTN.

   This section defines the output codes for the identifying program number and
   absolute/incremental preset axis registers blocks.
~15.1.1
1.   Add sequence numbers to Message blocks:

   Enter YES if you want PWORKS to generate a sequence number for message
   blocks.  If you enter NO, then message blocks will not contain a sequence
   number.
~15.1.2
2.   Add sequence numbers to INSERT blocks:

   Enter YES if you want PWORKS to generate a sequence number for INSERT blocks.
   If you enter NO, then INSERT blocks will not contain a sequence number,
   unless the text of the INSERT statement contains one.
~15.1.3
3.   Output an End-of-Block on Message blocks:

   Enter YES if you want message blocks terminated with the End-of-block charac-
   ter(s).  If you enter NO, then the message block will be added to the begin-
   ning of the next output block.
~15.1.4
4.   Output an End-of-Block on INSERT blocks:

   Enter YES if you want INSERT blocks terminated with the End-of-block charac-
   ter(s).  If you enter NO, then the INSERT block will be added to the begin-
   ning of the next output block, unless the INSERT text is terminated with the
   End-of-block character(s).
~15.1.5
5.   Convert message Spaces to Tabs:

   Normally, spaces in a message block will be output as spaces, which at the
   machine control is the same as leader.  Some machines will remove these
   spaces and compress the text within the message.  If you enter YES to this
   prompt, the spaces in the message block will be converted to the tab charac-
   ter, which will display as spaces on the machine control.
~15.1.6
6.   Align Message blocks at column:

   Enter a value between 1 and 66 to cause all output message blocks to be
   output at the same length.  The value entered at this prompt defines the
   minimum length of the actual message (text between the message start and
   message end characters).  Any messages less than this length will have
   spaces added to end of them so that they are output using this length.
   Any messages longer than this length will not be modified.

   Enter a value of 0 if the output message blocks should not be aligned.  No
   spaces will be added to the message text.

   The DISPLY/ALIGN command can be used to change this value in the part
   program.
~15.1.7
7.   Process PPRINT IPV statements normally:

   Enter YES if PPRINT IPV statements should be processed as simple PPRINT
   statements (output to the print file and as message blocks).  Answering
   NO will cause Pworks to ignore PPRINT IPV statements, except when creating
   a simulation file.

   PPRINT IPV statements are used to pass commands to NCLIPV.
~15.2.1
1.   Enter code for OPSTOP:

   Enter the register and optional value you want output with the OPSTOP com-
   mand.  You can leave this prompt blank, in which case a code will not be
   output with OPSTOP.  M(01) is usually output as the optional stop code.
~15.2.2
2.   Enter code for STOP:

   Enter the register and optional value you want output with the STOP command.
   You can leave this prompt blank, in which case a code will not be output
   with STOP.  M(00) is usually output as the hard stop code.
~15.2.3
3.   User defined block after OPSKIP/OFF:

   Enter the number of the User defined block you want to be output after an
   OPSKIP/OFF command.  The User defined block will usually contain the axes
   position and the current feed rate.  A value of 0 will disable this feature.
~15.2.4
4.   User defined block after OPSTOP:

   Enter the number of the User defined block you want to be output after an
   OPSTOP command.  The User defined block will usually contain the axes
   position and the current feed rate.  A value of 0 will disable this feature.
~15.2.5
5.   User defined block after STOP:

   Enter the number of the User defined block you want to be output after a
   STOP command.  The User defined block will usually contain the axes
   position and the current feed rate.  A value of 0 will disable this feature.
~15.2.6
6.   Should OPSTOP be considered an End-of-Sequence:

   An End-of-sequence will reset the sequence delta movements for each axis and
   the sequence machining time.  Enter YES if you want the OPSTOP command to
   perform these functions.
~15.2.7
7.   Should STOP be considered an End-of-Sequence:

   An End-of-sequence will reset the sequence delta movements for each axis and
   the sequence machining time.  Enter YES if you want the STOP command to
   perform these functions.
~15.3.1
1.   Enter delay definition code:

   Enter the register and its value which defines a machine dwell block.  This
   code is usually G(04).  Machine dwell blocks can be output using the DELAY
   command.
~15.3.2
2.   Enter delay time register:

   Enter the register that will contain the dwell value when machine dwells are
   output in units of time (seconds, minutes, etc.).
~15.3.3
3.   Enter spindle revolution delay register:

   Enter the register that will contain the dwell value when machine dwells are
   output in number of spindle revolutions.  If the machine does not support
   dwell time in spindle revolutions, then leave this prompt blank.
~15.3.4
4.   Enter output format for time delay blocks:

   Enter the number that corresponds to the format of dwell blocks that the
   machine expects to see.

        1 = Dwell blocks will always be output in units of time.

        2 = Dwell blocks will always be output as the number of spindle revolu-
            tions  to dwell.

        3 = Dwell blocks will be output in units of time when the feed rate
            mode is in Feed per Minute, or in spindle revolutions when the feed
            rate mode is in Feed per Revolution.

        4 = Dwell blocks will be output in units of time when specified as
            seconds on the DELAY command, or in spindle revolutions when the REV
            parameter is specified on the DELAY command.

        5 = Multiple dwell blocks, containing only the delay definition code,
            will be output, causing the machine to dwell for the requested
            amount of time.  Use this option only if the machine does not allow
            for a dwell time to be programmed, but will rather perform a fixed
            amount of dwell for each delay definition code programmed.

        6 = Dwell blocks will always be output in inverse time format.
~15.3.5
5.   Unit to output for time delays:

   Enter the number that corresponds to the unit of time that the machine
   expects to see in a dwell block.  The DELAY command will always expect to see
   the delay time in seconds, reqardless of the output format.

        1. Milliseconds
        2. Seconds
        3. Minutes
~15.3.6
6.   Enter time interval in seconds for each delay block:

   Enter the amount of time, in seconds, that the machine will dwell per each
   delay definition code programmed.  This time will be used by PWORKS to cal-
   culate the number of delay definition codes to output.  This prompt will only
   be displayed when multiple dwell blocks are output to satisfy the programmed 
   dwell time.
~15.3.7
7.   Does the X-axis need to be output in a delay block:

   Some machines require dwell blocks to include at least one of the program-
   mable axes.  PWORKS will always include the X-axis in this case.  Enter YES
   if the machine has this requirement.
~15.3.8
8.   Reset the programmed feed rate after a delay block:

   Enter YES if the current feed rate should be reinstated after a dwell block.
   The feed rate should usually be reinstated on machines that use the same
   register for feed rates and dwell times.
~15.4.1
1.   Enter code for GOHOME/CHECK:

   Enter the register and its value that will perform a return to home position
   and a verification by the control that the machine has actually reached this
   position.  This code is usually G(27) on machines that support this feature.
~15.4.2
2.   Enter code for GOHOME/AUTO:

   Enter the register and its value that will perform an automatic return to
   home position at the machine.  This code is usually G(28) on machines that
   support this feature.
~15.4.3
3.   Enter code for GOHOME/FROM:

   Enter the register and its value that will perform an automatic return from
   home position at the machine.  This code is usually G(29) on machines that
   support this feature.
~15.4.4
4.   Enter code for GOHOME/NEXT:

   Enter the register and its value that will perform an automatic return to
   the secondary reference position at the machine.  This code is usually G(30)
   on machines that support this feature.
~15.4.5
5.   Enter register for GOHOME/XAXIS,1:

   Enter the register to use for output as the primary X-axis on the GOHOME/mode
   command.  It is recommended that you do not use the same register that is
   used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machin-
   ing times, etc.

   It is usually acceptable to use the axis incremental register, such as X2,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.4.6
6.   Enter register for GOHOME/XAXIS,2:

   Enter the register to use for output as the secondary X-axis on the GOHOME/
   mode command.  It is recommended that you do not use the same register that
   is used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machining
   times, etc.

   It is usually acceptable to use the axis incremental register, such as U2,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.4.7
7.   Enter register for GOHOME/YAXIS,1:

   Enter the register to use for output as the primary Y-axis on the GOHOME/mode
   command.  It is recommended that you do not use the same register that is
   used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machin-
   ing times, etc.

   It is usually acceptable to use the axis incremental register, such as Y2,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.4.8
8.   Enter register for GOHOME/YAXIS,2:

   Enter the register to use for output as the secondary Y-axis on the GOHOME/
   mode command.  It is recommended that you do not use the same register that
   is used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machining
   times, etc.

   It is usually acceptable to use the axis incremental register, such as V2,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.4.9
9.   Enter register for GOHOME/ZAXIS,1:

   Enter the register to use for output as the primary Z-axis on the GOHOME/mode
   command.  It is recommended that you do not use the same register that is
   used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machin-
   ing times, etc.

   It is usually acceptable to use the axis incremental register, such as Z2,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.4.10
10.   Enter register for GOHOME/ZAXIS,2:

   Enter the register to use for output as the secondary Z-axis on the GOHOME/
   mode command.  It is recommended that you do not use the same register that
   is used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machining
   times, etc.

   It is usually acceptable to use the axis incremental register, such as W2,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.4.11
11.   Enter register for GOHOME/AXIS,1:

   Enter the register to use for output as Rotary axis #1 on the GOHOME/mode
   command.  It is recommended that you do not use the same register that is
   used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machin-
   ing times, etc.

   It is usually acceptable to use the axis incremental register, such as A3,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.4.12
12.   Enter register for GOHOME/AXIS,2:

   Enter the register to use for output as Rotary axis #2 on the GOHOME/mode
   command.  It is recommended that you do not use the same register that is
   used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machin-
   ing times, etc.

   It is usually acceptable to use the axis incremental register, such as B3,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.4.13
13.   Enter register for GOHOME/AXIS,3:

   Enter the register to use for output as Rotary axis #3 on the GOHOME/mode
   command.  It is recommended that you do not use the same register that is
   used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machin-
   ing times, etc.

   It is usually acceptable to use the axis incremental register, such as C3,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.4.14
14.   Enter register for GOHOME/AXIS,4:

   Enter the register to use for output as Rotary axis #4 on the GOHOME/mode
   command.  It is recommended that you do not use the same register that is
   used for the absolute axis, unless the axis value output in the automatic
   move to/from home position block is the actual axis position.  PWORKS uses
   the absolute axis position register to calculate incremental moves, machin-
   ing times, etc.

   It is usually acceptable to use the axis incremental register, such as C6,
   since automatic move to/from home position blocks are normally output in the 
   incremental mode.
~15.5.1
1.   Enter register for POSTN program number:

   Enter the register that will contain the identifying program number.  The
   program number can be output using either the POSTN/n command or the MACHIN/
   PWORKS,OPTION,4,n command.
~15.5.2
2.   Enter code for POSTN/NORMAL:

   Enter the register and its value that defines an absolute preset axis regis-
   ters block.  A preset axis registers block is usually used to enter offsets
   into registers at the control that will perform a linear compensation for the
   differences in the part program origin as compared to the origin on the
   machine.

   G(92) is usually used to define an absolute preset axis registers block.
~15.5.3
3.   Enter code for POSTN/INCR:

   Enter the register and its value that defines an incremental preset axis
   registers block.  A preset axis registers block is usually used to enter
   offsets into registers at the control that will perform a linear compensation
   for the differences in the part program origin as compared to the origin on
   the machine.

   G(93) is usually used to define an incremental preset axis registers block on
   machines that support this feature.
~15.5.4
4.   Enter code for POSTN/OFF:

   Enter the register and its value that will cancel any previously defined
   preset axis registers block.  G(99) is usually used to cancel a preset axis
   registers block on machines that support this feature.
~15.5.5
5.   Output POSTN/OFF code in a block by itself:

   Enter YES if the machine control requires that the code canceling any pre-
   viously defined preset axis registers block be output in a block by itself.
   If you enter NO to this prompt, then the code output with POSTN/OFF code will
   be output in the next block, along with any other codes that need to be out-
   put.
~15.5.6
6.   Enter register for POSTN/XAXIS,1:

   Enter the register to use for output as the primary X-axis in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~15.5.7
7.   Enter register for POSTN/XAXIS,2:

   Enter the register to use for output as the secondary X-axis in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~15.5.8
8.   Enter register for POSTN/YAXIS,1:

   Enter the register to use for output as the primary Y-axis in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~15.5.9
9.   Enter register for POSTN/YAXIS,2:

   Enter the register to use for output as the secondary Y-axis in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~15.5.10
10.   Enter register for POSTN/ZAXIS,1:

   Enter the register to use for output as the primary Z-axis in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~15.5.11
11.   Enter register for POSTN/ZAXIS,2:

   Enter the register to use for output as the secondary Z-axis in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~15.5.12
12.   Enter register for POSTN/AXIS,1:

   Enter the register to use for output as Rotary axis #1 in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~15.5.13
13.   Enter register for POSTN/AXIS,2:

   Enter the register to use for output as Rotary axis #2 in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~15.5.14
14.   Enter register for POSTN/AXIS,3:

   Enter the register to use for output as Rotary axis #3 in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~15.5.15
15.   Enter register for POSTN/AXIS,4:

   Enter the register to use for output as Rotary axis #4 in a preset axis
   registers block.  Since the axis values output in an absolute preset block
   are used to store the actual positions on the machine, it is acceptable to
   use the same register that is used for the absolute axis output.
~16.0
0.   Walk through Ultrasonic Blade Configuration.

   This selection will lead you through all of the subsections of the Ultra-
   sonic Blade configuration menus.  All aspects of defining the Ultrasonic
   Blade machine is covered in these sections, including Vacuum Pods.

1.   Ultrasonic Blade Cutter set-up.

   This section defines the configuration of an Ultrasonic Blade machine,
   mainly dealing with the attributes of the blade axis; registers, direction
   vector, retract logic, etc.

2.   Ultrasonic Blade Alignment.

   Defines the controlling parameters for blade alignment during cutting
   motion.  Automatic cutting alignment mode, alignment spans, and minumum
   angle change for blade alignment values can be set.

3.   Ultrasonic Blade Positioning.

   Defines the controlling parameters for blade alignment for positioning
   moves.  Blade alignment positioning mode, alignment position, and positioning
   feed rates are set-up in this section.

4.  Curve Blending Set-up.

   This section defines the codes and parameters to be used with the curve
   blending command (SMOOTH).

5.   Vacuum Pods.

   This section defines the codes which control the Vacuum Pods on Ultrasonic
   Cutter type machines.

6.   Exit

   Exits the Ultrasonic Blade Configuration section and returns you to the
   previous section.
~16.1.1
1.   Enter default Blade direction vector:

   Enter the vector (i,j,k) which defines the direction of the blade when the
   blade axis is at 0 degrees.  PostWorks assumes that the blade is double
   edged, so a vector of 1,0,0 is equivalent to a vector of -1,0,0.
~16.1.2
2.   Register for internal Blade Rotary axis:

   Enter the register descriptor which will be used internally by PWORKS to keep
   track of the absolute position of the blade rotary axis.  This register will
   not be output and is used by PWORKS to keep track of the blade axis on a
   linear scale of 360 degrees, no matter how the axis is actually output.

   This register must be unique (not used as an output register for any other
   address).  The A1,B1,C1 and C4 registers have initially been reserved as the
   internal rotary axis registers.
~16.1.3
3.   Register for absolute Blade Rotary axis:

   Enter the register descriptor for the absolute blade rotary axis, for example
   A2, B2, etc.  You must enter a register even if the machine only supports
   incremental mode, as this register is used internally by PWORKS in calculat-
   ing the incremental value for the blade axis.  The A2,B2,C2 and C5 registers
   have initially been reserved as the absolute rotary axis registers.
~16.1.4
4.   Register for incremental Blade Rotary axis:

   Enter the register descriptor to use for incremental positioning of the blade
   rotary axis, for example A3, B3, etc.  You do not need to enter a register
   if the machine does not support incremental mode.  The A3,B3,C3 and C6 regis-
   ters have initially been reserved as the incremental rotary axis registers.

   DO NOT enter the same register for absolute and incremental positions, as
   PWORKS uses the absolute positioning register to calculate the incremental
   move.
~16.1.5
5.   Blade Rotary axis is output on a Linear/Rotary scale:

   The blade rotary axis moves on a linear scale when a value of 720 degrees
   will move the axis 2 revolutions from 0 degrees.  A rotary scale will always
   be output between 0 and 360 degrees, usually with the sign (+-) of the value 
   determining the direction.  Enter either LINEAR or ROTARY.
~16.1.6
6.   Current position for Blade Rotary axis:

   Enter the default position for the blade rotary axis at the start of the
   program.  This location is input as the actual machine position.
~16.1.7
7.   Maximal change of Blade Rotary axis:

   Enter the maximum angular change, in degrees, that the blade rotary axis can
   move while cutting.  If the direction of the blade changes by more than this
   amount, the tool will be retracted, the blade will be rotated to the new
   direction, and the tool will be plunged back into the part.  You can disable
   this feature by specifying a value of 90 degrees or more.

   The Retract Tool prompts in the Motion Adjustments/Rotary axes linearization
   section can be used to set the retract distances and feed rates.  The RETRCT/
   TOOL,ATANGL,a command can be used to change this value anywhere in the part
   program.
~16.1.8
8.   Blade Rotary axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the blade rotary axis.  These
   limits can be changed using the CHECK/AXIS,4 command.
~16.2.1
1.   Automatic blade alignment mode:

   Enter either ON or OFF to enable or disable automatic blade alignment mode
   at the beginning of the program.  Automatic blade alignment mode is used to
   align the blade within a defined span when making long moves with directional
   changes.  When this mode is enabled, directional change moves will be broken
   up so that the blade will be aligned with the move within a user definable
   distance.  On multi-axis moves, the move may be broken up into multiple
   blocks containing directional changes, as the blade can change directions
   multiple times if there is a lot of rotary axis motion.

   You can use the ALIGN/CUT command to enable/disable the automatic blade
   alignment mode at any time within the part program.
~16.2.2
2.   Minimum span to apply Align alteration:

   Enter the minimum move distance allowed for the automatic blade alignment
   feature.  When the distance of a move is less than the value entered here,
   then the move will be output as a single move and will not be broken up into
   multiple moves.  This value can be changed in the part program by using the
   ALIGN/CUT command.
~16.2.3
3.   Minimum blade angle which will have Align alteration:

   Enter the minimum change of direction of the blade angle that will have the
   automatic blade alignment applied.  When the directional change is less than
   the angle entered at this prompt, then the move will be output as a single
   move and will not be broken up into multiple moves.  This value can be
   changed in the part program by using the ALIGN/CUT command.
~16.2.4
4.   Span distance at which to align blade:

   Enter the span distance to be used when breaking up a move to align the blade
   direction.  This distance is the length of the alignment span output at the
   beginning of the move and contains the blade direction for the entire move.
   This value can be changed in the part program by using the ALIGN/CUT command.
~16.2.5
5.   Blade alignment direction:

   Most Ultrasonic blades are V-shaped and will cut in either direction, but
   there are blades that have a flat edge on one side and an angled side on the
   other.  When using this style of blade it is usually desirable to maintain
   the flat side of the blade against the part.  This prompt lets you define
   the default leading edge of the blade.

   'FRONT' specifies the front of the blade should always be pointed in the
   forward direction.  'REAR' specifies that the back of the blade should
   always be pointed in the forward direction.  'BOTH' specifies that either
   blade edge can be pointed in the forward direction.

   The front of the blade is defined as the blade edge that points in the
   direction of the default blade direction vector when the blade axis is at
   0 degrees, as defined in the previous section.  This setting can be changed
   in the part program by using the MODE/BLADE,ON,dir command.
~16.3.1
1.   Blade alignment positioning mode:

   Enter either ON or OFF to enable or disable blade alignment positioning mode
   at the beginning of the program.  Blade positioning mode is used to align the
   blade during a RAPID move according to the direction of the next cutting
   move.  This places the blade in the proper orientation at the beginning of 
   the move to make the next cut.
   
   You can use the ALIGN/MOVE command to enable/disable the blade positioning
   alignment mode at any time within the part program.
~16.3.2
2.   Distance above location to Align blade:

   Enter the distance above the next cutting location at which to align the
   blade during a RAPID move.  The blade will be positioned to this location
   aligned to the angle required by the next cut.  This value can be changed 
   in the part program by using the ALIGN/MOVE command.
~16.3.3
3.   Enter feed rate to position the tool:

   Enter the feed rate to use when positioning the blade above the next cutting
   location when in blade alignment positioning mode.  Entering a value of zero 
   will cause the blade to be positioned in RAPID mode.  This value can be
   changed in the part program by using the ALIGN/MOVE command.
~16.3.4
4.   Enter feed rate to plunge the tool:

   Enter the feed rate to use when plunging the blade from the alignment posi-
   tion location to the cutting position.  Entering a value of zero will cause
   the blade to be positioned in RAPID mode.  This value can be changed in the
   part program by using the ALIGN/MOVE command.
~16.4.1
1.  Smooth on code:

   Enter the register and its value which will enable basic spline interpolation
   mode at the machine.  This code is usually G(36).
~16.4.2
2.  Smooth off code:

   Enter the register and its value which will terminate basic spline interpola-
   tion mode at the machine.  This code is usually G(37).
~16.4.3
3.  Enable curve blending codes:

   Enter the registers and their values that enable curve blending mode.  Curve
   blending on the control will interpolate a smooth spline through the loca-
   tions between the SMOOTH/ATANGL and SMOOTH/ATANGL,OFF commands.  PWORKS will
   output a directional move tangent to the beginning of the curve prior to
   initiating curve blending mode.

   The curve blending enable code usually consists of a single register with no
   value which is set up using the following example:

         Begin      Format     Left     Right     Min     End     Format

         (SMOO    DECIMAL      0        0        0        TH_SP   SET
~16.4.4
4.  Disable curve blending codes:

   Enter the registers and their values that terminate curve blending mode.
   Curve blending on the control will interpolate a smooth spline through the
   locations between the SMOOTH/ATANGL and SMOOTH/ATANGL,OFF commands.

   The curve blending off codes usually consist of two registers with no
   values which are set up using the following example:

         Begin      Format     Left     Right     Min     End     Format

         (SMOO      DECIMAL      0        0        0      TH_SP   SET
         )          DECIMAL      0        0        0              SET
~16.4.5
5.  Curve blending limit angle register:

   Enter the register to use as the limiting angle for curve blending mode.
   This register sets the maximum angular change allowed during curve blending.
   If a move changes direction by more than this angle while in curve blending
   mode, then curve blending mode will be disabled for this set of locations.

   This register is usually coupled tightly with the curve blending enable
   codes and is set up using the following example:

         Begin      Format     Left     Right     Min     End     Format

         :          FLOATING     3        3        1      )       SET
~16.4.6
6.  Maximal curve blending direction change:

   During curve blending mode, the control will interpolate a spline through
   a series of locations which in essence generates a much smoother path than
   pure linear interpolation will achieve.  Large direction changes during
   curve blending mode will generate greater deviations from the programmed
   tool path, sometimes creating undesirable results.

   You can control the maximum angular change of direction for curve blending
   mode by either entering a default angle at this prompt, or by placing the
   maximal angular change in the SMOOTH/ATANGL,ang command.  The value entered
   at this prompt will become the default angle for the SMOOTH/ATANGL command.
~16.4.7
7.  Initial span for initiating curve blending mode:

   Curve blending mode requires a short span in the direction of the spline
   be output prior to the initiating codes for curve blending.  Enter the
   default distance of this span at this prompt.  PWORKS will look ahead to
   the first few moves of the intended spline and output a span at the speci-
   fied distance that is tangent to the calculated spline prior to outputting
   the curve blending enable codes.  You can also specify this distance in the
   part program by using the SMOOTH/ATANGL,ang,dis command.
~16.5.1
1.   Pod vacuum pump off code:

   Enter the register and its value that will turn the vacuum pump off.  M(40)
   is usually used to turn off the vacuum pump on machines which support Vacuum
   Pods.

   This code can be output using the POD/AIR,OFF command.
~16.5.2
2.   Pod vacuum pump on code:

   Enter the register and its value that will turn the vacuum pump on.  M(41) is
   usually used to turn on the vacuum pump on machines which support Vacuum
   Pods.

   This code can be output using the POD/AIR,ON command.
~16.5.3
3.   Pod vacuum off code:

   Enter the register and its value that will turn the vacuum to the pods off.
   M(140) is usually used to turn the vacuum off on machines which support
   Vacuum Pods.

   This code can be output using the POD/AIR,NOMORE command.
~16.5.4
4.   Disable Pod vacuum off code:

   Enter the register and its value that will disable the operator from using
   the foot switch to turn off the vacuum to the pods.  This code is usually
   M(141).

   This code can be output using the POD/LOCK,ON command.
~16.5.5
5.   All Pods down code:

   Enter the register and its value that will cause all pods to unclamp, move
   down to their rest stop, clamp, and turn the vacuum to the pods off.  This
   code is usually M(142).

   This code can be output using the POD/DOWN command.
~16.5.6
6.   All Pods low pressure code:

   Enter the register and its value that selects a low pressure vacuum to all
   pods.  This code is usually M(148).

   This code can be output using the POD/AIR,LOW command.
~16.5.7
7.   All Pods high pressure code:

   Enter the register and its value that selects a high pressure vacuum to all
   pods.  This code is usually M(149).

   This code can be output using the POD/AIR,HIGH command.
~16.5.8
8.   Pod row address register:

   Ultrasonic Cutter type machines which support Vacuum Pods can usually address
   each pod individually to move them up and down, apply vacuum pressure, etc.
   An individual pod is addressed by a row and column position.

   Enter the register to use as the row position for individually addressed
   pods.  Rows are normally counted along the X-axis.
~16.5.9
9.   Pod column address register:

   Ultrasonic Cutter type machines which support Vacuum Pods can usually address
   each pod individually to move them up and down, apply vacuum pressure, etc.
   An individual pod is addressed by a row and column position.

   Enter the register to use as the column position for individually addressed
   pods.  Columns are usually counted along the Y-axis.
~16.5.10
10.  Address single Pod code:

   Enter the register and its value which defines a block as addressing a single
   Vacuum Pod.  This block will contain this code (usually G(140)), the row and
   column position of the addressed pod, and the operation to perform on the
   pod.
~16.5.11
11.   Addressed Pod unclamp code:

   Enter the register and its value which will unclamp the addressed Vacuum Pod.
   This code is usually M(143) and is output using the POD/row,col,CLAMP,OFF
   command.
~16.5.12
12.   Addressed Pod clamp code:

   Enter the register and its value which will clamp the addressed Vacuum Pod.
   This code is usually M(144) and is output using the POD/row,col,CLAMP,ON
   command.
~16.5.13
13.   Addressed Pod no pressure code:

   Enter the register and its value which will turn off the vacuum at the
   addressed pod.  This code is usually M(145) and is output using the
   POD/row,col,AIR,OFF command.
~16.5.14
14.   Addressed Pod up code:

   Enter the register and its value which will raise the addressed Vacuum Pod.
   This code is usually M(146) and is output using the POD/row,col,UP command.
~16.5.15
15.   Addressed Pod up/clamp code:

   Enter the register and its value which will unclamp the addressed Vacuum Pod,
   then raise it and clamp it.  This code is usually M(147) and is output using
   the POD/row,col,UP,CLAMP command.
~17.0
0.   Walk through Stringer Drilling Configuration.

   This selection will lead you through all of the subsections of the Stringer
   Drilling Machine configuration menus.  All aspects of defining this style
   of machine is covered in these sections.

1.   Stringer Drill set-up.

   This section defines the configuration of a Stringer Drilling machine,
   including the default head at the start of the program and various axis
   offset values.

2.   Axes register description.

   Defines the output registers for each of the axes located on heads 2, 3,
   and 4.  The head 1 axes registers are defined in the normal section for
   defining the machine axes registers.

3.   Stringer codes.

   Defines the user defined blocks to output when activating the various heads
   and special codes relevant to the Stringer Drilling machine.

4.  Current axes position.

   This section defines the default position at the beginning of the program
   for each of the linear and rotary axes located on heads 2, 3, and 4.

5.   Home position.

   This section defines the machine Home position, for use by the HEAD/n,home
   command.

6.   Machine limits.

   This section defines the axes travel limits of the axes located on heads 2,
   3, and 4.

7.   Exit

   Exits the Ultrasonic Blade Configuration section and returns you to the
   previous section.
~17.1.1
1.   Enter active Head at start of program:

   Define which Head will be active by default at the start of the program.
   This is typically Head 1, which is the standard milling head.
~17.1.2
2.   Enter offset distance for Head 2 calculations:

   Heads 1 and 2 are on the same machine component and therefore move with
   one another.  Enter the distance between Head 2 and Head 1 that will be
   used when calculating the Head 2 position from the input coordinates.  This
   distance is typically 25.629 inches on a Torres machine.
~17.1.3
3.   Enter pivot offset distance for Head 3 and 4 calculations:

   Enter the pivot distance to add to the tool length when calculating the
   output axes positions for Heads 3 and 4.
~17.2.1
1.   Define registers for Head #:

   Enter the Head number that you want to define the axis registers for.
~17.2.2
2.   Register for X-axis:

   Enter the register descriptor for the absolute X-axis position for the
   corresponnding head.  Usually the X1 register is used for Head 2, U1 for
   Head 3, and I1 for Head 4.
~17.2.3
3.   Register for Y-axis:

   Enter the register descriptor for the absolute Y-axis position for the
   corresponnding head.  Usually the Y1 register is used for Head 2, V1 for
   Head 3, and J1 for Head 4.
~17.2.4
4.   Register for Z-axis:

   Enter the register descriptor for the absolute Z-axis position for the
   corresponnding head.  Usually the Z1 register is used for Head 2, W1 for
   Head 3, and K1 for Head 4.
~17.2.5
5.   Register for Rotary axis #1:

   Enter the register descriptor for the absolute Rotary axis #1 located on
   Head 2.  Usually the AA register is used.
~17.2.6
6.   Register for Rotary axis #2:

   Enter the register descriptor for the absolute Rotary axis #2 located on
   Head 2.  Usually the AB register is used.
~17.2.7
7.   Register for Rotary axis #3:

   Enter the register descriptor for the absolute Rotary axis #3 located on
   Head 2.  Usually the AC register is used.
~17.3.1
1.   User defined block for Head #1 activation:

   Enter the User defined block to output when Head #1 is activated.  This
   block typically contains codes that are used to initialize and activate this
   head.
~17.3.2
2.   User defined block for Head #2 activation:

   Enter the User defined block to output when Head #2 is activated.  This
   block typically contains codes that are used to initialize and activate this
   head.
~17.3.3
3.   User defined block for Head #3 activation:

   Enter the User defined block to output when Head #3 is activated.  This
   block typically contains codes that are used to initialize and activate this
   head.
~17.3.4
2.   User defined block for Head #4 activation:

   Enter the User defined block to output when Head #4 is activated.  This
   block typically contains codes that are used to initialize and activate this
   head.
~17.3.5
5.   User defined block for Head #1 home move:

   Enter the User defined block to output when Head #1 is moved to its home
   position using the HEAD/1,HOME command.  This block is typically similar
   to the User defined block for Head #1 activation, but with an extra code or
   two added.
~17.3.6
6.   Code for clip holder slide home position:

   Enter the register and its value that positions the clip holder slide at its
   home position.  This is typically AQ(7.2465).
~17.3.7
7.   Spindle ON code for drilling head:

   Enter the register and its value for turning on the drilling heads' (3 & 4)
   spindles.  This code is typically (M45).
~17.3.8
8.   Spindle OFF code for drilling head:

   Enter the register and its value for turning off the drilling heads' (3 & 4)
   spindles.  This code is typically (M46).
~17.3.9
9.   Coolant ON code for drilling head:

   Enter the register and its value for turning on the drilling heads' (3 & 4)
   coolant.  This code is typically (M10).
~17.3.10
10.  Coolant OFF code for drilling head:

   Enter the register and its value for turning off the drilling heads' (3 & 4)
   coolant.  This code is typically (M11).
~17.3.11
11.  Code for activating the milling head:

   Enter the register and its value that will activate the milling head.  This
   code is usually M(38).
~17.3.12
12.  Code for activating the drilling heads:

   Enter the register and its value that will activate the drilling heads.  This
   code is usually M(35).
~17.4.1
1.   Current axes positions for Head #

   Enter the Head number that you want to define the current position for.
~17.4.2
2.   Current position for X-axis:

   Enter the default position for the X-axis of the Head being defined at the
   start of the program.  This location is input as the actual machine position
   and not the tool tip position.
~17.4.3
3.   Current position for Y-axis:

   Enter the default position for the Y-axis of the Head being defined at the
   start of the program.  This location is input as the actual machine position
   and not the tool tip position.
~17.4.4
4.   Current position for Z-axis:

   Enter the default position for the Z-axis of the Head being defined at the
   start of the program.  This location is input as the actual machine position
   and not the tool tip position.
~17.4.5
5.   Current position for Rotary axis #1:

   Enter the default position for Rotary axis #1 located on Head #2 at the
   start of the program.
~17.4.6
6.   Current position for Rotary axis #2:

   Enter the default position for Rotary axis #2 located on Head #2 at the
   start of the program.
~17.4.7
7.   Current position for Rotary axis #3:

   Enter the default position for Rotary axis #3 located on Head #2 at the
   start of the program.
~17.5.1
1.   Home positions for Head #

   Enter the Head number that you want to define the Home position for.
~17.5.2
2.   X-axis Home position:

   Enter the machine's X-axis home (reference point) position for the
   corresponding Head.  The HEAD/n,HOME command can be used to position the
   Head to its home position.
~17.5.3
3.   Y-axis Home position:

   Enter the machine's Y-axis home (reference point) position for the
   corresponding Head.  The HEAD/n,HOME command can be used to position the
   Head to its home position.
~17.5.4
4.   Z-axis Home position:

   Enter the machine's Z-axis home (reference point) position for the
   corresponding Head.  The HEAD/n,HOME command can be used to position the
   Head to its home position.
~17.5.5
5.   Rotary axis #1 Home position:

   Enter the machine's Rotary axis #1 home (reference point) position for 
   Head #2.  The HEAD/2,HOME command can be used to position the Head to its
   home position.
~17.5.6
6.   Rotary axis #2 Home position:

   Enter the machine's Rotary axis #2 home (reference point) position for 
   Head #2.  The HEAD/2,HOME command can be used to position the Head to its
   home position.
~17.5.7
7.   Rotary axis #3 Home position:

   Enter the machine's Rotary axis #3 home (reference point) position for 
   Head #2.  The HEAD/2,HOME command can be used to position the Head to its
   home position.
~17.6.1
6.   Machine limits for Head #

   Enter the Head number that you want to define the machine limits for.  The
   limits for Head #2 are checked a bit differently in that axis deltas are 
   checked against the limit range (minimum/maximum) rather than the 
   axis positions being checked against the absolute limit values.
~17.6.2
2.   X-axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the X-axis associated with
   the corresponding head.
~17.6.3
3.   Y-axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the Y-axis associated with
   the corresponding head.
~17.6.4
4.   Z-axis travel limits [min,max]:

   Enter the minimum and maximum travel limits for the Z-axis associated with
   the corresponding head.
~17.6.5
5.   Rotary axis #1 travel limits [min,max]:

   Enter the minimum and maximum travel limits for Rotary axis #1 associated
   with Head #2.
~17.6.6
6.   Rotary axis #2 travel limits [min,max]:

   Enter the minimum and maximum travel limits for Rotary axis #2 associated
   with Head #2.
~17.6.7
7.   Rotary axis #3 travel limits [min,max]:

   Enter the minimum and maximum travel limits for Rotary axis #3 associated
   with Head #2.
