/************************************************************************
c
c   FILE NAME: stepglobal.cpp
c
c		Defines the functions that can call from C function
c			but these function here will use MFC
c	 CONTAINS: 
c			iges_wntstr_out(char *msg, int display)
c			iges_wntget_label_type()
c			iges_wntlist_ans(CWnd *parent, char*title, char*msg, char** list, int*ans, int *num, int flag)
c			iges_wnt_msg(CWnd *parent, char *title, char *msg)
c			iges_wntyesno(CWnd *parent, char *title, char* msg)
c			iges_wntget_outname(char *filename)
c			iges_wntget_ptname(char *filename)
c			iges_wntget_unifil(char *filename)
c			iges_wntprompt(CWnd *parent, char *title, char *msg, int lns, int cols, char *ans_str)
c			iges_disply_as_percent
c			iges_open_process_win
c			iges_close_process_win
c			iges_set_process_lab
c
c     COPYRIGHT 2013 (c) Numerical Control Computer Sciences.
c           All Rights Reserved
c      MODULE NAME AND RELEASE LEVEL
c        stepglobal.cpp , 25.1
c     DATE AND TIME OF LAST  MODIFICATION
c        04/29/15 , 15:13:26
c
c**********************************************************************
*/
#include "stdafx.h"
#include "step.h"
#include "stepDlg.h"
#include "stepDlg2.h"
#include "StepPromptDlg.h"
#include "StepListDlg.h"
#include "xenv1.h"

extern int Iges_limit_txt;
extern "C" int  label_type;
extern "C" int Iges_batch, iges_process;
extern "C" char iges_ptfile[UX_MAX_PATH_LEN];
extern "C" char iges_unifile[UX_MAX_PATH_LEN];
extern "C" char iges_outfile[UX_MAX_PATH_LEN];
extern "C" int uig_list_out(char*, int);

extern "C" int iges_wntprompt(CWnd *parent, char *title, char *msg, int lns, int cols, char *ans_str);
extern "C" int ul_break_fname(char *filename, char *dir, char *fname);
/*********************************************************************
**    I_FUNCTION     : iges_wntstr_out(char *msg, int display) 
**          Output a string to main window's status area
**    PARAMETERS
**       INPUT  :
**          string                  string to output
**       OUTPUT :
**						nine
**    RETURNS      : none
**    SIDE EFFECTS : none
**    WARNINGS     : none
*********************************************************************/
extern "C" int iges_wntstr_out(char *msg, int display)
{
	char disp_msg[500];
	char *buf, *tmp;
	CString wintxt, wintxt2;
	int len = strlen(msg);
	if (len==0) return 0;
	CStepApp *app = (CStepApp*)AfxGetApp();
	CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());
	CEdit *ewin = (CEdit*)(MainDlg->GetDlgItem(IDC_STATUS));

	if (ewin==NULL) return 0;
	ewin->GetWindowText(wintxt); 
	buf = wintxt.GetBuffer(Iges_limit_txt);

	int spos = ewin->GetWindowTextLength() + 1;
/*
.....replace "\n" with "\r\n"
.....before display
*/
	int i, j;
	for (i=0, j=0; i<len; i++, j++)
	{
		if (msg[i]!='\n')
			disp_msg[j] = msg[i];
		else
		{
			disp_msg[j++] = '\r';
			disp_msg[j] = msg[i];
		}
	}
	disp_msg[j] = '\0';
	len = strlen(disp_msg);
	if (spos+len>Iges_limit_txt)
	{
		tmp = buf + len;
		if (*(tmp-1)!='\n')
		{
			while ((*tmp!='\n') && (*tmp!='\0')) tmp++;
			tmp++;
		}
		wintxt2 = tmp;
	}
	else
		wintxt2 = buf; 
	ewin->SetWindowText(wintxt2);
	len = wintxt2.GetLength();
	ewin->SetSel(len, len);
	ewin->ReplaceSel(disp_msg);

	return 0;
}
/*********************************************************************
**    I_FUNCTION     :  uig_get_label_type
**          put label type to list file. we have already get label
**				type when pick up choice button.
**    PARAMETERS
**       INPUT  :
**          none
**       OUTPUT :
**          none
**    RETURNS      : none
**    SIDE EFFECTS : none
**    WARNINGS     : none
*********************************************************************/
extern "C" int iges_wntget_label_type()
{
	switch (label_type)
	{
		case 1:
			uig_list_out("Labels generated by STEP.\n\n", 0);
			break;
		case 2:
			uig_list_out("Labels generated using subscripts.\n\n", 0);
			break;
		case 3:
			uig_list_out("Labels from file.\n\n", 0);
			break;
		case 4:
			uig_list_out("Labels from file using subscripts.\n\n", 0);
			break;
		case 5:
			uig_list_out("Labels from file using CV subscript.\n\n", 0);
			break;
		case 6:
			uig_list_out("Labels from file using property.\n\n", 0);
			break;
		case 7:
			uig_list_out("Labels from STEP using max 6 chars.\n\n", 0);
			break;
	}
	return(0);
}
/**********************************************************************
**    I_FUNCTION : iges_wntlist_ans(CWnd *parent, char*title, char*msg, char** list, int*ans, int *num, int flag)
**			popup a List dialog box and get answer
**			
**    PARAMETERS   
**       INPUT  : 
**				parent: parent widget
**				title:  dialog box title
**				msg:    dialog str.
**				list: array of strings to put in list box
**				num: number of strings
**				flag: single/multiple select not used
**       OUTPUT :  
**         			ans:  array of answers
**    RETURNS      : 1:No
**					 0: Yes
**    SIDE EFFECTS : bring out a dialog box
**    WARNINGS     : none
*********************************************************************/

extern "C" int iges_wntlist_ans(CWnd *parent, char*title, char*msg, char** list, int*ans, int *num, int flag)
{
	int i, result;
/*
.....if batch, get no selection as answer
*/
	if (Iges_batch)
	{
		*num = 0;
		return 0;
	}
	CStepListDlg *listdlg = new CStepListDlg(parent);
	listdlg->SetDlgValue(flag, title, msg, list, *num);
	result = listdlg->DoModal();
	listdlg->GetSelect(ans, num);
	return result;
}
/**********************************************************************
**    I_FUNCTION : iges_wnt_msg(CWnd *parent, char *title, char *msg)
**			popup a Message dialog box 
**			
**    PARAMETERS   
**       INPUT  : 
**				parent: parent widget
**				title:  dialog box title
**				msg:    dialog str.
**       OUTPUT :  
**         			none 
**    RETURNS      : 1:No
**					 0: Yes
**    SIDE EFFECTS : bring out a dialog box
**    WARNINGS     : none
*********************************************************************/

extern "C" int iges_wnt_msg(CWnd *parent, char *title, char *msg)
{
	int result;
	if (Iges_batch)
		return IDOK ;
	if (parent==NULL)
	{
		CStepApp *app = (CStepApp*)AfxGetApp();
		CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());		
		result = MainDlg->MessageBox(msg, title, MB_OK);
	}
	else
		result = parent->MessageBox(msg, title, MB_OK);
	return result;
}
/**********************************************************************
**    I_FUNCTION : iges_wntyesno(CWnd *parent, char *title, char* msg)
**			popup a YesNo question dialog box and get answer
**			
**    PARAMETERS   
**       INPUT  : 
**				parent: parent widget
**				title:  dialog box title
**				msg:    dialog str.
**       OUTPUT :  
**         			none 
**    RETURNS      : 1:No
**					 0: Yes
**    SIDE EFFECTS : bring out a dialog box
**    WARNINGS     : none
*********************************************************************/

extern "C" int iges_wntyesno(CWnd *parent, char *title, char* msg)
{
	int result;
	if (Iges_batch)
	{
/*
.....always return YES
*/
		return (0);
	}
	if (parent==NULL)
	{
		CStepApp *app = (CStepApp*)AfxGetApp();
		CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());		
		result = MainDlg->MessageBox(msg, title, MB_YESNO);
	}
	else
		result = parent->MessageBox(msg, title, MB_YESNO);
	if (result==IDYES)
		return 0;
	else
		return 1;
}
/**********************************************************************
**    I_FUNCTION : iges_wntget_outname(char *filename)
**			Get output data iges file name 
**			
**    PARAMETERS   
**       INPUT  : 
**				filename: data iges file
**       OUTPUT :  
**         		filename: data iges file
**    RETURNS      : none
**    SIDE EFFECTS : none
**    WARNINGS     : none
*********************************************************************/

extern "C" int iges_wntget_outname(char *filename)
{
   char path_buffer[_MAX_PATH];
   char drive[_MAX_DRIVE];
   char dir[_MAX_DIR];
   char fname[_MAX_FNAME];
   char ext[_MAX_EXT];

	if (Iges_batch)
	{
		strcpy(filename, iges_outfile);
		return (0);
	}
	CStepApp *app = (CStepApp*)AfxGetApp();
	CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());
	CEdit *ewin = (CEdit*)(MainDlg->GetDlgItem(IDC_OUTPUT_DATA));
	ewin->GetWindowText(filename, UX_MAX_PATH_LEN);
/*
.....If user doesn't specify output filename, make default filename
.....using drive\path\filename.stp format.
*/
	if (strlen(filename) <= 0)
	{
		CEdit *ewin = (CEdit*)(MainDlg->GetDlgItem(IDC_INPUT_PART));
		ewin->GetWindowText(path_buffer, _MAX_PATH);
		_splitpath( path_buffer, drive, dir, fname, ext );
		sprintf(path_buffer,"%s%s%s.stp", drive, dir, fname);
/*
.....Must copy new filename into the output string.  The string
.....(array of char) used here is local and will go away when
.....execution leaves this function.
*/
		strcpy(filename, path_buffer);
	}
	return(0);
}
/**********************************************************************
**    I_FUNCTION : iges_wntget_ptname(char *filename)
**			Get input part file name 
**			
**    PARAMETERS   
**       INPUT  : 
**				filename: part file
**       OUTPUT :  
**         		filename: part file
**    RETURNS      : none
**    SIDE EFFECTS : none
**    WARNINGS     : none
*********************************************************************/

extern "C" int iges_wntget_ptname(char *filename)
{
	if (Iges_batch)
	{
		strcpy(filename, iges_ptfile);
		return (0);
	}
	CStepApp *app = (CStepApp*)AfxGetApp();
	CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());
	CEdit *ewin = (CEdit*)(MainDlg->GetDlgItem(IDC_INPUT_PART));
	
	ewin->GetWindowText(filename, UX_MAX_PATH_LEN) ;
	return(0);
}
/**********************************************************************
**    I_FUNCTION : iges_wntget_unifil(char *filename)
**			Get output unibase filename 
**			
**    PARAMETERS   
**       INPUT  : 
**				filename: unibase file
**       OUTPUT :  
**         		filename: unibase file
**    RETURNS      : none
**    SIDE EFFECTS : none
**    WARNINGS     : none
*********************************************************************/
extern "C" int iges_wntget_unifil(char *filename)
{
	UX_pathname fname, dir, tempname, tempname1;
	int i;
	if (Iges_batch)
	{
		strcpy(filename, iges_unifile);
		return (0);
	}
	CStepApp *app = (CStepApp*)AfxGetApp();
	CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());
	CEdit *ewin = (CEdit*)(MainDlg->GetDlgItem(IDC_OUTPUT_UNI));
	CEdit *eiwin = (CEdit*)(MainDlg->GetDlgItem(IDC_INPUT_STEP));
	
	ewin->GetWindowText(filename, UX_MAX_PATH_LEN) ;

/*
.....check if user entered filename
*/
	ul_break_fname(filename, dir, fname);
	if (strlen(fname)==0)
/*
.....use default name
*/
	{
		eiwin->GetWindowText(filename, UX_MAX_PATH_LEN);
		ul_break_fname(filename, dir, fname);
	}
/*
.....if no directory input, use input step file's directory
*/
	else if (strlen(dir)==0)
	{
		eiwin->GetWindowText(tempname, UX_MAX_PATH_LEN);
		ul_break_fname(tempname, dir, tempname1);
	}
/*
.....added ext '.u' if not have
*/
	i = strcspn (fname, ".");
	strcpy(&fname[i], ".u");
/*
.....then cat with directory
*/
	if (strlen(dir)!=0)
		strcat (dir,"\\");
	strcat (dir, fname);
	strcpy(filename, dir);
	return(0);
}
/**********************************************************************
**    I_FUNCTION : iges_wntprompt(CWnd *parent, char *title, char *msg, int lns, int cols, char *ans_str)
**			popup a prompt dialog box 
**			
**    PARAMETERS   
**       INPUT  : 
**				parent: parent widget
**				title:  prompt box title
**				msg:    prompt str.
**				ln: not used.
**				str_ans: user input in text field.
**       OUTPUT :  
**         			none 
**    RETURNS      : none
**    SIDE EFFECTS : bring out a dialog box
**    WARNINGS     : none
*********************************************************************/
extern "C" int iges_wntprompt(CWnd *parent, char *title, char *msg, int lns, int cols, char *ans_str)
{
	int result;
	if (Iges_batch)
	{
		strcpy(ans_str, "Batch: should not come here");
		return (0);
	}
	CStepPromptDlg *promptdlg = new CStepPromptDlg(parent);
	promptdlg->SetDlgValue(cols, lns, title, msg, ans_str);
	result = promptdlg->DoModal();
	promptdlg->GetInput(ans_str, 1000);
	return result;
}

/***********************************************************************
c
c   SUBROUTINE:  iges_disply_as_percent
c
c   FUNCTION:  This function display process as percent num
c
c   INPUT:  num: percentage to display
c
c   OUTPUT: none
c
c***********************************************************************
*/
extern "C" void iges_disply_as_percent(int num)
{
	CStepApp *app = (CStepApp*)AfxGetApp();
	if (app==NULL)
		return;
	static int save_per = -1;
	if (Iges_batch)
	{
		if (iges_process==0)
			return;
		CStepDlg2 *MainDlg = (CStepDlg2*)(app->GetMainWnd());
/*
.....only do it when percent change because Pted_Display_Dlg_percent will
.....ignore number but check time message, we don't wnt to check it the message
.....too often because it takes a lot of time
*/
		if (num!=save_per)
		{
			MainDlg->Display_as_percent(num);
			save_per = num;
		}
	}
	else
	{
		CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());
		if (num!=save_per)
		{
			MainDlg->Display_as_percent(num);
			save_per = num;
		}
	}
}
/***********************************************************************
c
c   SUBROUTINE:  iges_open_process_win(char *title)
c
c   FUNCTION:  This function show a process window
c
c   INPUT:  char *title: label before processor
c
c   OUTPUT: none
c
c***********************************************************************
*/
extern "C" void iges_open_process_win(char *title)
{
	CStepApp *app = (CStepApp*)AfxGetApp();
	if (app==NULL)
		return;
	if (Iges_batch)
	{
		if (iges_process==0)
			return;
		CStepDlg2 *MainDlg = (CStepDlg2*)(app->GetMainWnd());
		MainDlg->ShowProcessWindow(title);
	}
	else
	{
		CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());
		MainDlg->ShowProcessWindow(title);
	}
}

/***********************************************************************
c
c   SUBROUTINE:  iges_close_process_win()
c
c   FUNCTION:  This function close a process window
c
c   INPUT:  none
c
c   OUTPUT: none
c
c***********************************************************************
*/
extern "C" void iges_close_process_win()
{
	CStepApp *app = (CStepApp*)AfxGetApp();
	if (app==NULL)
		return;
	if (Iges_batch)
	{
		if (iges_process==0)
			return;
		CStepDlg2 *MainDlg = (CStepDlg2*)(app->GetMainWnd());
		MainDlg->CloseProcessWindow();
	}
	else
	{
		CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());
		MainDlg->CloseProcessWindow();
	}
}

/***********************************************************************
c
c   SUBROUTINE:  iges_set_process_lab(char *label1, char *label2)
c
c   FUNCTION:  This function show a process window
c
c   INPUT:  char *label1: label before processor
c			char *label2: label after processor
c
c   OUTPUT: none
c
c***********************************************************************
*/
extern "C" void iges_set_process_lab(char *label1, char *label2)
{
	CStepApp *app = (CStepApp*)AfxGetApp();
	if (app==NULL)
		return;
	if (Iges_batch)
	{
		if (iges_process==0)
			return;
		CStepDlg2 *MainDlg = (CStepDlg2*)(app->GetMainWnd());
		MainDlg->SetProcessLabel(label1, label2);
	}
	else
	{
		CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());
		MainDlg->SetProcessLabel(label1, label2);
	}
}

extern "C" void iges_set_procpos(int pos)
{
	CStepApp *app = (CStepApp*)AfxGetApp();
	if (app==NULL)
		return;
	if (Iges_batch)
	{
		if (iges_process==0)
			return;
		CStepDlg2 *MainDlg = (CStepDlg2*)(app->GetMainWnd());
		MainDlg->SetProcPos(pos);
	}
	else
	{
		CStepDlg *MainDlg = (CStepDlg*)(app->GetMainWnd());
		MainDlg->SetProcPos(pos);
	}
}
